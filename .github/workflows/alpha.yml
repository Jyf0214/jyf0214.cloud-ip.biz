name: CI with Persistent Environment (v10.0 - Final Stable Architecture)

on:
  workflow_dispatch:
    inputs:
      create_backup_b2_primary: { description: '✅ [备份] 是否备份 B2-1 (控制容器)?', required: true, type: boolean, default: false }
      create_backup_b2_secondary: { description: '✅ [备份] 是否备份 B2-2 (安卓数据)?', required: true, type: boolean, default: false }
      run_startup_script: { description: '🚀 [核心] 是否自动执行 Chroot 内服务?', required: true, type: boolean, default: true }
      enable_ssh: { description: '🐞 [调试] 是否启用 SSH 手动调试?', required: true, type: boolean, default: false }
      run_yunzai: { description: '  - 是否启动 Yunzai (将同时启动Launcher和Napcat)?', type: boolean, default: true }
      run_loophole_webdav: { description: '  - 是否启动 Loophole WebDAV 隧道?', type: boolean, default: true }
      run_openlist: { description: '  - 是否启动 openlist (将同时启动ChmlFrp)?', type: boolean, default: true }
  schedule:
    - cron: '30 */6 * * *'
concurrency:
  group: ${{ github.workflow }}
  cancel-in-progress: false
env:
  # --- 主容器 (Linux Chroot) 配置 ---
  CHROOT_DIR: /mnt/minisys
  B2_REMOTE_NAME: "b2_storage"
  B2_REMOTE_PATH: "backup"
  BACKUP_PREFIX: minisys_backup_
  B2_KEY_ID: ${{ secrets.B2_KEY_ID }}
  B2_APPLICATION_KEY: ${{ secrets.B2_APPLICATION_KEY }}
  B2_BUCKET_NAME: ${{ secrets.B2_BUCKET_NAME }}
  B2_DOWNLOAD_URL: ${{ secrets.B2_DOWNLOAD_URL }}

  # --- 安卓容器 (Redroid Docker) 数据配置 ---
  REDROID_DATA_DIR: /mnt/redroid_data
  B2_REMOTE_NAME_2: "b2_storage_2"
  B2_REMOTE_PATH_2: "backup_android"
  BACKUP_PREFIX_2: android_data_backup_
  B2_KEY_ID_2: ${{ secrets.B2_KEY_ID_2 }}
  B2_APPLICATION_KEY_2: ${{ secrets.B2_APPLICATION_KEY_2 }}
  B2_BUCKET_NAME_2: ${{ secrets.B2_BUCKET_NAME_2 }}
  B2_DOWNLOAD_URL_2: ${{ secrets.B2_DOWNLOAD_URL_2 }}

  # --- 通用配置 ---
  RCLONE_FLAGS: "--multi-thread-streams 4 --buffer-size 64M --fast-list --transfers 8 --progress"
  PAT: ${{ secrets.PAT }}
  LOOPHOLE_WEBDAV_USER: ${{ secrets.LOOPHOLE_WEBDAV_USER }}
  LOOPHOLE_WEBDAV_PASS: ${{ secrets.LOOPHOLE_WEBDAV_PASS }}
  LOOPHOLE_WEBDAV_HOSTNAME: ${{ secrets.LOOPHOLE_WEBDAV_HOSTNAME }}
  LOOPHOLE_NAPCAT_HOSTNAME: ${{ secrets.LOOPHOLE_NAPCAT_HOSTNAME }}
  NAPCATUSER: ${{ secrets.NAPCATUSER }}
  NAPCATPASS: ${{ secrets.NAPCATPASS }}

jobs:
  build-and-run-all:
    name: "Run All Services (v10.0 - Final Stable Architecture)"
    runs-on: ubuntu-latest
    steps:
      - name: 1. 检出工作流代码
        uses: actions/checkout@v4

      - name: 2. 最大化运行器磁盘空间
        run: sudo rm -rf /usr/share/dotnet /opt/ghc /usr/local/share/boost "$AGENT_TOOLSDIRECTORY"

      - name: 3. 安装基础系统依赖 (修正)
        run: |
          sudo apt-get update
          # [修正] 为 Host 运行器安装所有必要工具，包括 adb
          sudo apt-get install -y debootstrap rclone pigz zstd jq adb
          # 使用 Docker 官方脚本，避免依赖冲突
          curl -fsSL https://get.docker.com -o get-docker.sh
          sudo sh get-docker.sh

      - name: 4. 设置 Python 环境
        uses: actions/setup-python@v4
        with: { python-version: "3.9" }

      - name: 5. 克隆 Python 应用仓库
        run: git clone https://x-access-token:${{ env.PAT }}@github.com/Jyf0214/chatgpt-on-wechat.git

      - name: 6. 缓存 Python 依赖 (Pip)
        id: cache-pip
        uses: actions/cache@v4
        with:
          path: ./chatgpt-on-wechat/lib
          key: ${{ runner.os }}-pip-deps-${{ hashFiles('./chatgpt-on-wechat/requirements.txt', './chatgpt-on-wechat/requirements-optional.txt') }}

      - name: 7. [稳定] 顺序准备环境
        id: prepare_all
        run: |
          set -e
          echo "--- 1. 准备 Chroot 控制容器 ---"
          sudo mkdir -p ${{ env.CHROOT_DIR }}
          # [费用修正] 确保 download_url 存在
          rclone config create ${{ env.B2_REMOTE_NAME }} b2 account "${{ env.B2_KEY_ID }}" key "${{ env.B2_APPLICATION_KEY }}" download_url "${{ env.B2_DOWNLOAD_URL }}"
          B1_FULL_PATH="${{ env.B2_REMOTE_NAME }}:${{ env.B2_BUCKET_NAME }}/${{ env.B2_REMOTE_PATH }}"
          LATEST_BACKUP=$(rclone lsjson ${B1_FULL_PATH}/ | jq -r '[.[] | select(.Name | test("${{ env.BACKUP_PREFIX }}.*\\.tar\\.zst$"))] | sort_by(.ModTime) | .[-1].Name')
          if [[ -n "$LATEST_BACKUP" && "$LATEST_BACKUP" != "null" ]]; then
            echo " -> 发现备份，正在恢复..."
            rclone copyto "${B1_FULL_PATH}/${LATEST_BACKUP}" /tmp/b1.tar.zst ${{ env.RCLONE_FLAGS }}
            unzstd -c /tmp/b1.tar.zst | sudo tar -xpf - -C ${{ env.CHROOT_DIR }}
            rm /tmp/b1.tar.zst
            echo "restored=true" > /tmp/chroot_status
          else
            echo " -> 备份未找到，全新创建..."
            sudo debootstrap --variant=minbase jammy ${{ env.CHROOT_DIR }} http://archive.ubuntu.com/ubuntu/
            echo "restored=false" > /tmp/chroot_status
          fi
          echo "--- ✅ Chroot 就绪 ---"

          echo "--- 2. 准备 Android (Redroid) 数据目录 ---"
          sudo mkdir -p ${{ env.REDROID_DATA_DIR }}
          # [费用修正] 确保 download_url 存在
          rclone config create ${{ env.B2_REMOTE_NAME_2 }} b2 account "${{ env.B2_KEY_ID_2 }}" key "${{ env.B2_APPLICATION_KEY_2 }}" download_url "${{ env.B2_DOWNLOAD_URL_2 }}"
          B2_FULL_PATH="${{ env.B2_REMOTE_NAME_2 }}:${{ env.B2_BUCKET_NAME_2 }}/${{ env.B2_REMOTE_PATH_2 }}"
          LATEST_ANDROID_BACKUP=$(rclone lsjson ${B2_FULL_PATH}/ | jq -r '[.[] | select(.Name | test("${{ env.BACKUP_PREFIX_2 }}.*\\.tar\\.zst$"))] | sort_by(.ModTime) | .[-1].Name')
          if [[ -n "$LATEST_ANDROID_BACKUP" && "$LATEST_ANDROID_BACKUP" != "null" ]]; then
            echo " -> 发现安卓备份，正在恢复..."
            rclone copyto "${B2_FULL_PATH}/${LATEST_ANDROID_BACKUP}" /tmp/b2.tar.zst ${{ env.RCLONE_FLAGS }}
            unzstd -c /tmp/b2.tar.zst | sudo tar -xpf - -C ${{ env.REDROID_DATA_DIR }}
            rm /tmp/b2.tar.zst
          fi
          echo "--- ✅ Android 数据就绪 ---"
          
          echo "--- 3. 启动 Redroid 容器 ---"
          sudo docker pull redroid/redroid:11.0.0-latest
          sudo docker run -d --privileged --name redroid11 -v ${{ env.REDROID_DATA_DIR }}:/data -p 5555:5555 redroid/redroid:11.0.0-latest
          
          echo "--- 4. 安装 Node.js & PM2 ---"
          curl -fsSL https://deb.nodesource.com/setup_18.x | sudo -E bash -
          sudo apt-get install -y nodejs
          sudo npm install -g pm2
          
          echo "✅ 所有准备任务成功完成!"
          CHROOT_STATUS=$(cat /tmp/chroot_status); echo "restored=${CHROOT_STATUS}" >> $GITHUB_OUTPUT
      
      - name: 8. 安装依赖并启动 Python 应用
        run: |
          nohup bash -c 'cd chatgpt-on-wechat && python -m pip install -r requirements.txt --target ./lib --cache-dir ~/.cache/pip && export PYTHONPATH=$(pwd)/lib && pm2 start "python3 app.py" --name "python-app" && pm2 ls' > install.log 2>&1 &
      - name: 9. 挂载虚拟文件系统
        run: |
          MNT_DIR=${{ env.CHROOT_DIR }}; sudo mount -t proc proc "${MNT_DIR}/proc"; sudo mount -o bind /dev "${MNT_DIR}/dev"; sudo mount -o bind /dev/pts "${MNT_DIR}/dev/pts"; sudo mount -o bind /sys "${MNT_DIR}/sys"
      - name: 10. [增强] 清理与更新 Chroot
        run: |
          sudo chroot ${{ env.CHROOT_DIR }} /bin/bash -c "apt-get clean -y && apt-get autoremove -y && rm -rf /var/lib/apt/lists/*"
          sudo tee ${{ env.CHROOT_DIR }}/tmp/update_openlist.sh > /dev/null << 'EOF'
          #!/bin/bash
          set -e; cd /root; apt-get update >/dev/null && apt-get install -y curl jq >/dev/null; LATEST_TAG=$(curl -s https://api.github.com/repos/OpenListTeam/OpenList/releases/latest | jq -r .tag_name); ARCH=amd64; TARBALL="openlist-linux-${ARCH}.tar.gz"; DOWNLOAD_URL="https://github.com/OpenListTeam/OpenList/releases/download/${LATEST_TAG}/${TARBALL}"; wget -qO "${TARBALL}" "${DOWNLOAD_URL}"; TMP_DIR=$(mktemp -d); tar -zxf "${TARBALL}" -C "${TMP_DIR}"; mv -f "${TMP_DIR}/openlist" ./openlist; chmod +x ./openlist; rm -f "${TARBALL}"; echo "✅ OpenList 已更新至 ${LATEST_TAG}"
          EOF
          sudo chmod +x ${{ env.CHROOT_DIR }}/tmp/update_openlist.sh; sudo chroot ${{ env.CHROOT_DIR }} /tmp/update_openlist.sh
      - name: 11. 安装或更新 MAA 环境
        run: |
          sudo tee ${{ env.CHROOT_DIR }}/tmp/install_maa.sh > /dev/null << 'EOF'
          #!/bin/bash
          set -e; IS_RESTORED="${1}"; MAA_CLI_URL="https://github.com/MaaAssistantArknights/maa-cli/releases/latest/download/maa_cli-x86_64-unknown-linux-gnu.tar.gz"; export DEBIAN_FRONTEND=noninteractive; cd /tmp; curl -L "${MAA_CLI_URL}" | tar -xz; mv maa_cli-x86_64-unknown-linux-gnu/maa /usr/local/bin/; if [[ "${IS_RESTORED}" == "true" ]]; then maa update; else apt-get update -y && apt-get install -y adb; maa install; fi; rm -rf /tmp/maa_cli-x86_64-unknown-linux-gnu;
          EOF
          sudo chmod +x ${{ env.CHROOT_DIR }}/tmp/install_maa.sh; sudo chroot ${{ env.CHROOT_DIR }} /tmp/install_maa.sh "${{ steps.prepare_all.outputs.restored }}"

      - name: 12. 验证 Android (Redroid) 连接
        run: |
          echo "--- 等待 Redroid 容器内的 ADB 服务就绪 (最多等待60秒)... ---"
          for i in {1..12}; do sudo docker logs redroid11 2>&1 | grep "providing adb service" && break; echo "Still waiting..." && sleep 5; done
          echo "--- 尝试连接到 Redroid ADB... ---"
          adb connect 127.0.0.1:5555; sleep 2
          echo "--- 当前 ADB 设备列表: ---"; adb devices

      - name: 13A. [自动化路径] 拉取并执行外部启动脚本
        if: github.event_name == 'schedule' || (github.event.inputs.run_startup_script == 'true' && github.event.inputs.enable_ssh == 'false')
        env:
          RUNTIME_MINUTES: ${{ (github.event_name == 'schedule' || github.event.inputs.create_backup_b2_primary == 'true' || github.event.inputs.create_backup_b2_secondary == 'true') && 300 || 350 }}
          STARTUP_SCRIPT_URL: ${{ secrets.STARTUP_SCRIPT_URL }}
        run: |
          echo "--- 从 ${{ env.STARTUP_SCRIPT_URL }} 下载外部启动脚本 ---"
          sudo curl -sSL -o ${{ env.CHROOT_DIR }}/tmp/startup.sh "${{ env.STARTUP_SCRIPT_URL }}"
          if [ ! -s "${{ env.CHROOT_DIR }}/tmp/startup.sh" ]; then echo "::error::下载的启动脚本为空或下载失败！请检查 URL 和网络。"; exit 1; fi
          sudo chmod +x ${{ env.CHROOT_DIR }}/tmp/startup.sh
          echo "--- 在 Chroot 环境中执行外部脚本 ---"
          sudo chroot ${{ env.CHROOT_DIR }} /bin/bash -c " \
            export GITHUB_EVENT_NAME='${{ github.event_name }}'; \
            export INPUT_RUN_YUNZAI='${{ github.event.inputs.run_yunzai }}'; \
            export INPUT_RUN_LOOPHOLE_WEBDAV='${{ github.event.inputs.run_loophole_webdav }}'; \
            export INPUT_RUN_OPENLIST='${{ github.event.inputs.run_openlist }}'; \
            export LOOPHOLE_WEBDAV_USER='${{ env.LOOPHOLE_WEBDAV_USER }}'; \
            export LOOPHOLE_WEBDAV_PASS='${{ env.LOOPHOLE_WEBDAV_PASS }}'; \
            export LOOPHOLE_WEBDAV_HOSTNAME='${{ env.LOOPHOLE_WEBDAV_HOSTNAME }}'; \
            export LOOPHOLE_NAPCAT_HOSTNAME='${{ env.LOOPHOLE_NAPCAT_HOSTNAME }}'; \
            export NAPCATUSER='${{ env.NAPCATUSER }}'; \
            export NAPCATPASS='${{ env.NAPCATPASS }}'; \
            /tmp/startup.sh \
          "
          echo "🚀 服务已启动。工作流将暂停 ${RUNTIME_MINUTES} 分钟..."; sleep ${RUNTIME_MINUTES}m; echo "⏳ 规定运行时间已到。"

      - name: 13B. [手动调试路径] 启用 SSH
        if: github.event.inputs.enable_ssh == 'true'
        uses: lhotari/action-upterm@v1
        with: { limit-access-to-actor: true, wait-timeout-minutes: 350 }
      - name: 14. 卸载虚拟文件系统
        if: always()
        run: sudo umount -l "${{ env.CHROOT_DIR }}/dev/pts"||true; sudo umount -l "${{ env.CHROOT_DIR }}/dev"||true; sudo umount -l "${{ env.CHROOT_DIR }}/proc"||true; sudo umount -l "${{ env.CHROOT_DIR }}/sys"||true

      - name: 15. ⚡️ [备份] Chroot 控制容器至 B2-1
        if: success() && !cancelled() && (github.event_name == 'schedule' || github.event.inputs.create_backup_b2_primary == 'true')
        run: |
          echo "--- 停止服务并创建 Chroot 备份 ---"; sudo chroot ${{ env.CHROOT_DIR }} bash -c 'pm2 stop all' || true; pm2 stop python-app || true
          # [费用修正] 确保 download_url 存在
          rclone config create ${{ env.B2_REMOTE_NAME }} b2 account "${{ env.B2_KEY_ID }}" key "${{ env.B2_APPLICATION_KEY }}" download_url "${{ env.B2_DOWNLOAD_URL }}"
          TIMESTAMP=$(date -u +'%Y%m%d-%H%M%S'); NEW_BACKUP_FILE="${{ env.BACKUP_PREFIX }}${TIMESTAMP}.tar.zst"; B1_FULL_PATH="${{ env.B2_REMOTE_NAME }}:${{ env.B2_BUCKET_NAME }}/${{ env.B2_REMOTE_PATH }}"
          EXCLUDE_OPTS="--exclude=./tmp --exclude=./var/tmp --exclude=./root/.cache --exclude=./var/cache --exclude=./var/log"
          sudo tar -c ${EXCLUDE_OPTS} -f - -C ${{ env.CHROOT_DIR }} . | zstd -T0 -19 -c | rclone rcat ${B1_FULL_PATH}/${NEW_BACKUP_FILE} ${{ env.RCLONE_FLAGS }}
          echo "✅ Chroot 备份上传成功。清理旧备份..."; rclone delete --min-age 24h ${B1_FULL_PATH}/ --include "${{ env.BACKUP_PREFIX }}*" 

      - name: 16. [新增] ⚡️ [备份] Android 数据至 B2-2
        if: success() && !cancelled() && (github.event_name == 'schedule' || github.event.inputs.create_backup_b2_secondary == 'true')
        run: |
          echo "--- 创建 Android (Redroid) 数据备份 ---"
          # [费用修正] 确保 download_url 存在
          rclone config create ${{ env.B2_REMOTE_NAME_2 }} b2 account "${{ env.B2_KEY_ID_2 }}" key "${{ env.B2_APPLICATION_KEY_2 }}" download_url "${{ env.B2_DOWNLOAD_URL_2 }}"
          TIMESTAMP=$(date -u +'%Y%m%d-%H%M%S'); NEW_BACKUP_FILE="${{ env.BACKUP_PREFIX_2 }}${TIMESTAMP}.tar.zst"; B2_FULL_PATH="${{ env.B2_REMOTE_NAME_2 }}:${{ env.B2_BUCKET_NAME_2 }}/${{ env.B2_REMOTE_PATH_2 }}"
          sudo tar -c -f - -C ${{ env.REDROID_DATA_DIR }} . | zstd -T0 -19 -c | rclone rcat ${B2_FULL_PATH}/${NEW_BACKUP_FILE} ${{ env.RCLONE_FLAGS }}
          echo "✅ Android 数据备份上传成功。清理旧备份..."; rclone delete --min-age 24h ${B2_FULL_PATH}/ --include "${{ env.BACKUP_PREFIX_2 }}*"

      - name: 17. 清理运行器残留文件
        if: always()
        run: |
          echo "--- 开始清理运行器环境 ---"
          sudo docker stop redroid11 || true
          sudo docker rm redroid11 || true
          sudo rm -rf ${{ env.CHROOT_DIR }} ${{ env.REDROID_DATA_DIR }} chatgpt-on-wechat
          sudo npm cache clean --force || true; pip cache purge || true; echo "✅ 运行器清理完成。"