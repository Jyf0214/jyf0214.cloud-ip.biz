# 工作流名称
name: CI with Persistent Environment (Versioned Backups - B2 Enhanced v4)

# 工作流触发器
on:
  workflow_dispatch:
    inputs:
      # --- 核心控制开关 ---
      create_backup_on_finish: { description: '✅ [核心] 是否在结束时创建环境备份? (这将影响运行时长)', required: true, type: boolean, default: false }
      run_startup_script: { description: '🚀 [核心] 是否自动执行Chroot内的服务启动脚本?', required: true, type: boolean, true }
      enable_ssh: { description: '🐞 [调试] 是否启用SSH手动调试 (将暂停自动化) ?', required: true, type: boolean, default: false }

      # --- [新增] 服务独立启动开关 (仅当 "run_startup_script" 为 true 时生效) ---
      run_launcher: { description: '  - 是否启动 launcher 服务?', type: boolean, default: false }
      run_redis: { description: '  - 是否启动 Redis 服务?', type: boolean, default: true }
      run_yunzai: { description: '  - 是否启动 Yunzai-Bot 服务?', type: boolean, default: true }
      run_loophole_webdav: { description: '  - 是否启动 Loophole WebDAV 隧道?', type: boolean, default: true }
      enable_napcat_tunnel: { description: '  - (Loophole) 是否额外启用 Napcat 内网穿透?', type: boolean, default: false }
      run_openlist: { description: '  - 是否启动 openlist 服务?', type: boolean, default: true }
      run_chmlfrp: { description: '  - 是否启动 ChmlFrp 服务?', type: boolean, default: true }


# 并发控制
concurrency:
  group: ${{ github.workflow }}
  cancel-in-progress: false

# 全局环境变量
env:
  CHROOT_DIR: /mnt/minisys
  BACKUP_PREFIX: minisys_backup_
  # [B2 修改] 新增 B2 远程存储配置
  B2_REMOTE_NAME: "b2_storage"            # Rclone 远程的内部名称
  B2_REMOTE_PATH: "backup"                # B2 存储桶内的备份目录
  RCLONE_FLAGS: "--multi-thread-streams 4 --buffer-size 64M --fast-list --transfers 8 --progress"
  # Secrets
  PAT: ${{ secrets.PAT }}
  LOOPHOLE_WEBDAV_USER: ${{ secrets.LOOPHOLE_WEBDAV_USER }}
  LOOPHOLE_WEBDAV_PASS: ${{ secrets.LOOPHOLE_WEBDAV_PASS }}
  LOOPHOLE_WEBDAV_HOSTNAME: ${{ secrets.LOOPHOLE_WEBDAV_HOSTNAME }}
  LOOPHOLE_NAPCAT_HOSTNAME: ${{ secrets.LOOPHOLE_NAPCAT_HOSTNAME }}
  NAPCATUSER: ${{ secrets.NAPCATUSER }}
  NAPCATPASS: ${{ secrets.NAPCATPASS }}
  # [B2 修改] 从 Secrets 读取 B2 配置
  B2_KEY_ID: ${{ secrets.B2_KEY_ID }}
  B2_APPLICATION_KEY: ${{ secrets.B2_APPLICATION_KEY }}
  B2_BUCKET_NAME: ${{ secrets.B2_BUCKET_NAME }}
  B2_DOWNLOAD_URL: ${{ secrets.B2_DOWNLOAD_URL }}


jobs:
  build-and-run-all:
    name: "Run All Services (B2 Enhanced v4)"
    runs-on: ubuntu-latest
    steps:
      - name: 1. 检出代码
        uses: actions/checkout@v4

      - name: 2. 最大化运行器磁盘空间
        run: sudo rm -rf /usr/share/dotnet /opt/ghc /usr/local/share/boost "$AGENT_TOOLSDIRECTORY"

      - name: 3. 安装全部所需依赖 (zstd, pigz)
        run: sudo apt-get update && sudo apt-get install -y debootstrap rclone pigz zstd jq

      - name: 4. 设置 Python 和 Node.js 环境
        uses: actions/setup-node@v3
        with: { node-version: '18' }
      - uses: actions/setup-python@v4
        with: { python-version: "3.9" }

      - name: 5. ⚡️ 并行执行：智能恢复 Chroot (从B2恢复) & 部署 Python 应用
        id: restore_or_create
        run: |
          BG_LOG_FILE=$(mktemp)
          echo "📄 后台任务日志将记录在: ${BG_LOG_FILE}"

          # 启动后台任务：智能恢复或创建 Chroot 环境
          (
            set -eo pipefail
            echo "--- [后台任务] 开始执行 Chroot 智能恢复/创建 ---"
            sudo mkdir -p ${{ env.CHROOT_DIR }}
            
            # [B2 修改] 创建 Rclone B2 远程配置
            echo "正在配置 Rclone B2 远程: ${{ env.B2_REMOTE_NAME }}"
            rclone config create ${{ env.B2_REMOTE_NAME }} b2 \
              account "${{ env.B2_KEY_ID }}" \
              key "${{ env.B2_APPLICATION_KEY }}" \
              download_url "${{ env.B2_DOWNLOAD_URL }}"

            B2_FULL_PATH="${{ env.B2_REMOTE_NAME }}:${{ env.B2_BUCKET_NAME }}/${{ env.B2_REMOTE_PATH }}"
            echo "1. 正在从 B2 路径 (${B2_FULL_PATH}) 查找最新的备份 (优先 .zst, 其次 .gz)..."
            LATEST_BACKUP_FILENAME=$(rclone lsjson ${B2_FULL_PATH}/ | \
                                      jq -r '[.[] | select(.Name | test("minisys_backup_.*\\.tar\\.(zst|gz)$"))] | sort_by(.ModTime) | .[-1].Name' 2>/dev/null)

            if [[ -n "$LATEST_BACKUP_FILENAME" && "$LATEST_BACKUP_FILENAME" != "null" ]]; then
                echo "   -> ✅ 发现最新可用备份: ${LATEST_BACKUP_FILENAME}"
                LOCAL_BACKUP_PATH="/tmp/backup.archive"
                # [B2 修改] 从 B2 下载备份文件
                rclone copyto "${B2_FULL_PATH}/${LATEST_BACKUP_FILENAME}" ${LOCAL_BACKUP_PATH} ${{ env.RCLONE_FLAGS }}
                echo "--- [后台任务] ✅ 下载完成。开始解压..."
                
                if [[ "${LATEST_BACKUP_FILENAME}" == *.zst ]]; then
                    echo "   -> 使用 zstd 进行解压..."
                    unzstd -c ${LOCAL_BACKUP_PATH} | sudo tar -xpf - -C ${{ env.CHROOT_DIR }}
                else
                    echo "   -> 使用 pigz (gzip) 进行解压..."
                    pigz -dc ${LOCAL_BACKUP_PATH} | sudo tar -xpf - -C ${{ env.CHROOT_DIR }}
                fi
                rm -f ${LOCAL_BACKUP_PATH}
            else
              echo "--- [后台任务] ⚠️ 所有类型的备份均未找到。将创建全新系统..."
              sudo debootstrap --variant=minbase jammy ${{ env.CHROOT_DIR }} http://archive.ubuntu.com/ubuntu/
            fi
            echo "--- [后台任务] ✅ 任务成功完成 ---"
          ) > ${BG_LOG_FILE} 2>&1 &
          CHROOT_SETUP_PID=$!
          
          # 前台任务：部署 Python 应用 (此部分无变化)
          echo "--- [前台任务] 后台正在恢复 Chroot，前台开始部署 Python 应用... ---"
          npm install -g pm2; rm -rf chatgpt-on-wechat
          git clone https://x-access-token:${{ env.PAT }}@github.com/Jyf0214/chatgpt-on-wechat.git || true
          cd chatgpt-on-wechat
          python -m pip install --upgrade pip
          pip install -r requirements-optional.txt --target ./ || true
          pip install -r requirements.txt --target ./ || true
          pm2 start "python3 app.py" --name "python-app"
          
          echo "--- [前台任务] ✅ Python 应用已启动。等待后台 Chroot 任务完成... ---"
          if ! wait ${CHROOT_SETUP_PID}; then
            echo "=================================================" >&2; echo "❌ ERROR: 后台 Chroot 设置任务失败！" >&2; echo "以下是后台任务的详细日志：" >&2; echo "-------------------------------------------------" >&2; cat ${BG_LOG_FILE} >&2; echo "=================================================" >&2; exit 1
          fi
          
          echo "--- ✅ 所有并行任务完成 ---"
          if [[ -f "${{ env.CHROOT_DIR }}/etc/debian_version" ]]; then echo "restored=true" >> $GITHUB_OUTPUT; else echo "restored=false" >> $GITHUB_OUTPUT; fi

      # --- 后续步骤无功能性修改，仅保持原样 ---

      - name: 6. 挂载虚拟文件系统
        run: |
          MNT_DIR=${{ env.CHROOT_DIR }}
          sudo mount -t proc proc "${MNT_DIR}/proc"; sudo mount -o bind /dev "${MNT_DIR}/dev"; sudo mount -o bind /dev/pts "${MNT_DIR}/dev/pts"; sudo mount -o bind /sys "${MNT_DIR}/sys"

      - name: 7. [增强] 清理 Chroot 环境空间
        if: steps.restore_or_create.outputs.restored == 'true'
        run: |
          echo "--- 开始深度清理 Chroot 环境 ---"
          sudo chroot ${{ env.CHROOT_DIR }} /bin/bash -c "
            echo '1. 清理 apt 缓存...'
            apt-get clean -y > /dev/null 2>&1
            apt-get autoclean -y > /dev/null 2>&1
            apt-get autoremove -y > /dev/null 2>&1
            rm -rf /var/lib/apt/lists/*
            
            echo '2. 清理通用临时文件和日志...'
            rm -rf /tmp/* /var/tmp/*
            find /var/log -type f -name '*.log' -delete
            find /var/log -type f -name '*.gz' -delete
            
            echo '3. 清理用户缓存和历史记录...'
            rm -rf /root/.cache /root/.npm /root/.bash_history
            
            echo '✅ Chroot 环境清理完成。'
          "
          
      - name: 7.1. [新增] 自动更新 Chroot 内的 OpenList
        if: steps.restore_or_create.outputs.restored == 'true'
        run: |
          echo "--- 将 OpenList 更新脚本写入 Chroot 环境 ---"
          sudo tee ${{ env.CHROOT_DIR }}/tmp/update_openlist.sh > /dev/null << 'EOF'
          #!/usr/bin/env bash
          set -e
          cd /root
          if ! command -v curl &> /dev/null || ! command -v jq &> /dev/null; then
            echo "正在安装 curl 和 jq..."
            apt-get update && apt-get install -y curl jq
          fi
          LATEST_TAG=$(curl -s https://api.github.com/repos/OpenListTeam/OpenList/releases/latest | jq -r '.tag_name' | head -1)
          ARCH=amd64
          TARBALL="openlist-linux-${ARCH}.tar.gz"
          DOWNLOAD_URL="https://github.com/OpenListTeam/OpenList/releases/download/${LATEST_TAG}/${TARBALL}"
          echo "Downloading ${DOWNLOAD_URL} ..."
          wget -q --show-progress "${DOWNLOAD_URL}"
          TMP_DIR=$(mktemp -d)
          trap "rm -rf ${TMP_DIR}" EXIT
          tar -zxf "${TARBALL}" -C "${TMP_DIR}"
          mv "${TMP_DIR}/openlist" ./openlist
          chmod +x ./openlist
          rm -f "${TARBALL}"
          echo "✅ OpenList(amd64) 已更新至最新版 ${LATEST_TAG}"
          EOF
          echo "--- 在 Chroot 环境中执行更新脚本 ---"
          sudo chmod +x ${{ env.CHROOT_DIR }}/tmp/update_openlist.sh
          sudo chroot ${{ env.CHROOT_DIR }} /tmp/update_openlist.sh

      - name: 8A. [自动化路径] 根据开关启动服务并动态暂停
        if: >
          steps.restore_or_create.outputs.restored == 'true' &&
          (
            github.event_name == 'schedule' ||
            (
              github.event.inputs.run_startup_script == 'true' &&
              github.event.inputs.enable_ssh == 'false'
            )
          )
        env:
          RUNTIME_MINUTES: ${{ github.event.inputs.create_backup_on_finish == 'true' && 300 || 350 }}
        run: |
          echo "✅ 进入自动化运行模式 (Chroot 服务)..."
          # 使用 tee 和 here-document 创建启动脚本
          sudo tee ${{ env.CHROOT_DIR }}/tmp/startup.sh > /dev/null << EOF
          #!/bin/bash
          set -e
          export RUN_LAUNCHER='${{ github.event.inputs.run_launcher || (github.event_name == 'schedule' && 'true') }}'
          export RUN_REDIS='${{ github.event.inputs.run_redis || (github.event_name == 'schedule' && 'true') }}'
          export RUN_YUNZAI='${{ github.event.inputs.run_yunzai || (github.event_name == 'schedule' && 'true') }}'
          export RUN_LOOPHOLE_WEBDAV='${{ github.event.inputs.run_loophole_webdav || (github.event_name == 'schedule' && 'true') }}'
          export RUN_OPENLIST='${{ github.event.inputs.run_openlist || (github.event_name == 'schedule' && 'true') }}'
          export RUN_CHMLFRP='${{ github.event.inputs.run_chmlfrp || (github.event_name == 'schedule' && 'true') }}'
          export ENABLE_NAPCAT_TUNNEL='${{ github.event.inputs.enable_napcat_tunnel || 'false' }}'

          export LOOPHOLE_WEBDAV_USER='${{ env.LOOPHOLE_WEBDAV_USER }}'
          export LOOPHOLE_WEBDAV_PASS='${{ env.LOOPHOLE_WEBDAV_PASS }}'
          export LOOPHOLE_WEBDAV_HOSTNAME='${{ env.LOOPHOLE_WEBDAV_HOSTNAME }}'
          export LOOPHOLE_NAPCAT_HOSTNAME='${{ env.LOOPHOLE_NAPCAT_HOSTNAME }}'
          export NAPCATUSER='${{ env.NAPCATUSER }}'
          export NAPCATPASS='${{ env.NAPCATPASS }}'
          export PATH=/usr/local/sbin:/usr/local/bin:/usr/sbin:/usr/bin:/sbin:/bin:/root/node_modules/.bin
          HOME_DIR="/root"

          echo "--- [Chroot 环境内] 开始执行自动化启动任务 ---"
          if ! command -v pm2 &> /dev/null; then npm install -g pm2; fi
          echo "1. 清理旧日志..." && pm2 flush && find \${HOME_DIR} -name "*.log" -type f -delete
          
          if [[ "\$RUN_LAUNCHER" == "true" ]]; then echo "2. 启动 launcher..."; [ -f "\${HOME_DIR}/launcher.sh" ] && (cd "\${HOME_DIR}" && pm2 start ./launcher.sh --name "launcher" --output /dev/null --error /dev/null || pm2 restart "launcher") || echo "  -> 警告: launcher.sh 未找到。"; else echo "2. [已禁用] 跳过 launcher。"; fi
          if [[ "\$RUN_REDIS" == "true" ]]; then echo "3. 启动 Redis..."; command -v redis-server &> /dev/null && redis-server --daemonize yes || echo "  -> 警告: redis-server 未找到。"; else echo "3. [已禁用] 跳过 Redis。"; fi
          if [[ "\$RUN_YUNZAI" == "true" ]]; then echo "4. 启动 Yunzai-Bot..."; [ -d "\${HOME_DIR}/Yunzai" ] && (cd "\${HOME_DIR}/Yunzai" && pm2 start app.js --name "yunzai-app" || pm2 restart "yunzai-app") || echo "  -> 警告: Yunzai 目录未找到。"; else echo "4. [已禁用] 跳过 Yunzai-Bot。"; fi
          if [[ "\$RUN_LOOPHOLE_WEBDAV" == "true" ]]; then echo "5. 启动 loophole..."; if [ -f "\${HOME_DIR}/loophole/loophole" ]; then cd "\${HOME_DIR}/loophole"; pm2 start ./loophole --name "loophole-webdav" -- webdav ~ -u "\${LOOPHOLE_WEBDAV_USER}" -p "\${LOOPHOLE_WEBDAV_PASS}" --hostname "\${LOOPHOLE_WEBDAV_HOSTNAME}"; if [[ "\$ENABLE_NAPCAT_TUNNEL" == "true" ]]; then echo "  -> 启用 Napcat 隧道..."; pm2 start ./loophole --name "loophole-http" -- http 6099 --hostname "${LOOPHOLE_NAPCAT_HOSTNAME}" --basic-auth-username "${NAPCATUSER}" --basic-auth-password "${NAPCATPASS}"; fi; else echo "  -> 警告: loophole 未找到。"; fi; else echo "5. [已禁用] 跳过 loophole。"; fi
          if [[ "\$RUN_OPENLIST" == "true" ]]; then echo "6. 启动 openlist..."; [ -f "\${HOME_DIR}/openlist" ] && (cd "\${HOME_DIR}" && pm2 start ./openlist --name "openlist-server" -- server) || echo "  -> 警告: openlist 未找到。"; else echo "6. [已禁用] 跳过 openlist。"; fi
          if [[ "\$RUN_CHMLFRP" == "true" ]]; then echo "7. 启动 ChmlFrp..."; [ -f "\${HOME_DIR}/ChmlFrp/frpc" ] && (cd "\${HOME_DIR}/ChmlFrp" && pm2 start ./frpc --name "chml-frp" -- -c frpc.ini) || echo "  -> 警告: frpc 未找到。"; else echo "7. [已禁用] 跳过 ChmlFrp。"; fi

          echo "--- [Chroot 环境内] 任务派发完成，保存PM2进程列表 ---"
          pm2 save && pm2 ls
          EOF
          
          sudo chmod +x ${{ env.CHROOT_DIR }}/tmp/startup.sh
          sudo chroot ${{ env.CHROOT_DIR }} /tmp/startup.sh

          echo "🚀 服务已根据开关启动。工作流将暂停 ${RUNTIME_MINUTES} 分钟 (备份设置: ${{ github.event.inputs.create_backup_on_finish }}) ..."
          sleep ${RUNTIME_MINUTES}m
          echo "⏳ 规定运行时间已到。"

      - name: 8B. [手动调试路径] 启用 SSH
        if: github.event.inputs.enable_ssh == 'true'
        uses: lhotari/action-upterm@v1
        with: { limit-access-to-actor: true, wait-timeout-minutes: 350 }

      - name: 9. 卸载虚拟文件系统
        if: always()
        run: sudo umount -l "${{ env.CHROOT_DIR }}/dev/pts" || true; sudo umount -l "${{ env.CHROOT_DIR }}/dev" || true; sudo umount -l "${{ env.CHROOT_DIR }}/proc" || true; sudo umount -l "${{ env.CHROOT_DIR }}/sys" || true

      - name: 10. ⚡️ [极速] 创建版本化备份 (上传至B2) 并清理旧版本
        if: success() && !cancelled() && github.event.inputs.create_backup_on_finish == 'true'
        run: |
          echo "--- 1. 使用 zstd (高压缩等级) 创建新的高速备份并上传至 B2 ---"
          sudo chroot ${{ env.CHROOT_DIR }} bash -c 'command -v pm2 && pm2 stop all' || true
          pm2 stop python-app || true

          # [B2 修改] 创建 Rclone B2 远程配置
          echo "正在配置 Rclone B2 远程: ${{ env.B2_REMOTE_NAME }}"
          rclone config create ${{ env.B2_REMOTE_NAME }} b2 \
            account "${{ env.B2_KEY_ID }}" \
            key "${{ env.B2_APPLICATION_KEY }}"
          
          TIMESTAMP=$(date -u +'%Y%m%d-%H%M%S')
          NEW_BACKUP_FILE="${{ env.BACKUP_PREFIX }}${TIMESTAMP}.tar.zst"
          echo "新备份文件名: ${NEW_BACKUP_FILE}"
          
          B2_FULL_PATH="${{ env.B2_REMOTE_NAME }}:${{ env.B2_BUCKET_NAME }}/${{ env.B2_REMOTE_PATH }}"

          EXCLUDE_OPTS="--exclude='./tmp' --exclude='./var/tmp' --exclude='./root/.cache' --exclude='./var/cache' --exclude='./var/log'"
          # [B2 修改] 使用 rcat 将备份流式上传到 B2
          sudo tar -c ${EXCLUDE_OPTS} -f - -C ${{ env.CHROOT_DIR }} . | zstd -T0 -15 -c | rclone rcat ${B2_FULL_PATH}/${NEW_BACKUP_FILE} ${{ env.RCLONE_FLAGS }}
          echo "✅ 新备份上传成功。"

          echo "--- 2. 清理 B2 上的旧备份 (保留3个最新, 兼容 gz/zst) ---"
          # [B2 修改] 从 B2 列出文件进行清理
          FILES_TO_DELETE=$(rclone lsjson ${B2_FULL_PATH}/ | \
                              jq -r '[.[] | select(.Name | test("minisys_backup_.*\\.tar\\.(zst|gz)$"))] | sort_by(.ModTime) | .[:-3][] | .Name' 2>/dev/null)
          
          if [[ -n "$FILES_TO_DELETE" && "$FILES_TO_DELETE" != "null" ]]; then
            echo "将要删除以下旧备份:"; echo "$FILES_TO_DELETE"
            for file_name in $FILES_TO_DELETE; do
              # [B2 修改] 从 B2 删除文件
              FULL_REMOTE_PATH="${B2_FULL_PATH}/${file_name}"
              echo "Deleting: $FULL_REMOTE_PATH"; rclone deletefile "${FULL_REMOTE_PATH}"
            done
            echo "✅ 旧备份清理完毕。"
          else
            echo "无需清理，备份数量小于或等于3。"
          fi

      - name: 11. [新增] 清理运行器残留文件
        if: always()
        run: |
          echo "--- 开始清理运行器环境 ---"
          sudo rm -rf ${{ env.CHROOT_DIR }}
          rm -rf chatgpt-on-wechat
          npm cache clean --force
          pip cache purge
          echo "✅ 运行器清理完成。"