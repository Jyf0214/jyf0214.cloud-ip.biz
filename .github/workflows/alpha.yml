# 工作流名称
name: CI with Persistent Environment (v7.4 - Staggered Parallel Start)

# ... (on, concurrency, env 部分与之前版本完全相同) ...
on:
  workflow_dispatch:
    inputs:
      create_backup_on_finish: { description: '✅ [核心] 是否在结束时创建环境备份? (这将影响运行时长)', required: true, type: boolean, default: false }
      run_startup_script: { description: '🚀 [核心] 是否自动执行Chroot内的服务启动脚本?', required: true, type: boolean, default: true }
      enable_ssh: { description: '🐞 [调试] 是否启用SSH手动调试 (将暂停自动化) ?', required: true, type: boolean, default: false }
      run_launcher: { description: '  - 是否启动 launcher 服务?', type: boolean, default: false }
      run_redis: { description: '  - 是否启动 Redis 服务?', type: boolean, default: true }
      run_yunzai: { description: '  - 是否启动 Yunzai-Bot 服务?', type: boolean, default: true }
      run_loophole_webdav: { description: '  - 是否启动 Loophole WebDAV 隧道?', type: boolean, default: true }
      enable_napcat_tunnel: { description: '  - (Loophole) 是否额外启用 Napcat 内网穿透?', type: boolean, default: false }
      run_openlist: { description: '  - 是否启动 openlist 服务?', type: boolean, default: true }
      run_chmlfrp: { description: '  - 是否启动 ChmlFrp 服务?', type: boolean, default: true }
  schedule:
    - cron: '30 */6 * * *'
concurrency:
  group: ${{ github.workflow }}
  cancel-in-progress: false
env:
  CHROOT_DIR: /mnt/minisys
  BACKUP_PREFIX: minisys_backup_
  B2_REMOTE_NAME: "b2_storage"
  B2_REMOTE_PATH: "backup"
  RCLONE_FLAGS: "--multi-thread-streams 4 --buffer-size 64M --fast-list --transfers 8 --progress"
  PAT: ${{ secrets.PAT }}
  LOOPHOLE_WEBDAV_USER: ${{ secrets.LOOPHOLE_WEBDAV_USER }}
  LOOPHOLE_WEBDAV_PASS: ${{ secrets.LOOPHOLE_WEBDAV_PASS }}
  LOOPHOLE_WEBDAV_HOSTNAME: ${{ secrets.LOOPHOLE_WEBDAV_HOSTNAME }}
  LOOPHOLE_NAPCAT_HOSTNAME: ${{ secrets.LOOPHOLE_NAPCAT_HOSTNAME }}
  NAPCATUSER: ${{ secrets.NAPCATUSER }}
  NAPCATPASS: ${{ secrets.NAPCATPASS }}
  B2_KEY_ID: ${{ secrets.B2_KEY_ID }}
  B2_APPLICATION_KEY: ${{ secrets.B2_APPLICATION_KEY }}
  B2_BUCKET_NAME: ${{ secrets.B2_BUCKET_NAME }}
  B2_DOWNLOAD_URL: ${{ secrets.B2_DOWNLOAD_URL }}

jobs:
  build-and-run-all:
    name: "Run All Services (v7.4 - Staggered Parallel)"
    runs-on: ubuntu-latest
    steps:
      - name: 1. 检出工作流代码
        uses: actions/checkout@v4

      - name: 2. 最大化运行器磁盘空间
        run: sudo rm -rf /usr/share/dotnet /opt/ghc /usr/local/share/boost "$AGENT_TOOLSDIRECTORY"

      - name: 3. 安装基础系统依赖
        run: sudo apt-get update && sudo apt-get install -y debootstrap rclone pigz zstd jq

      - name: 4. 设置 Python 环境
        uses: actions/setup-python@v4
        with: { python-version: "3.9" }

      - name: 5. 克隆 Python 应用仓库
        run: git clone https://x-access-token:${{ env.PAT }}@github.com/Jyf0214/chatgpt-on-wechat.git

      - name: 6. 缓存 Python 依赖 (Pip)
        id: cache-pip
        uses: actions/cache@v4
        with:
          path: ./chatgpt-on-wechat/lib
          key: ${{ runner.os }}-pip-deps-${{ hashFiles('./chatgpt-on-wechat/requirements.txt', './chatgpt-on-wechat/requirements-optional.txt') }}
          restore-keys: |
            ${{ runner.os }}-pip-deps-

      # [优化] 准备阶段只恢复 Chroot 和安装 Runner 的 PM2
      - name: 7. ⚡️ 并行准备：恢复Chroot & 安装NodeJS/PM2
        id: prepare_core
        run: |
          CHROOT_LOG=$(mktemp); NODE_LOG=$(mktemp)
          ( echo "--- [并行A] 开始: 恢复/创建 Chroot 环境..."; set -eo pipefail; sudo mkdir -p ${{ env.CHROOT_DIR }}; rclone config create ${{ env.B2_REMOTE_NAME }} b2 account "${{ env.B2_KEY_ID }}" key "${{ env.B2_APPLICATION_KEY }}" download_url "${{ env.B2_DOWNLOAD_URL }}"; B2_FULL_PATH="${{ env.B2_REMOTE_NAME }}:${{ env.B2_BUCKET_NAME }}/${{ env.B2_REMOTE_PATH }}"; LATEST_BACKUP_FILENAME=$(rclone lsjson ${B2_FULL_PATH}/ | jq -r '[.[] | select(.Name | test("minisys_backup_.*\\.tar\\.(zst|gz)$"))] | sort_by(.ModTime) | .[-1].Name' 2>/dev/null); if [[ -n "$LATEST_BACKUP_FILENAME" && "$LATEST_BACKUP_FILENAME" != "null" ]]; then echo "   -> [并行A] 发现备份: ${LATEST_BACKUP_FILENAME}."; rclone copyto "${B2_FULL_PATH}/${LATEST_BACKUP_FILENAME}" /tmp/backup.archive ${{ env.RCLONE_FLAGS }}; if [[ "${LATEST_BACKUP_FILENAME}" == *.zst ]]; then unzstd -c /tmp/backup.archive | sudo tar -xpf - -C ${{ env.CHROOT_DIR }}; else pigz -dc /tmp/backup.archive | sudo tar -xpf - -C ${{ env.CHROOT_DIR }}; fi; rm -f /tmp/backup.archive; echo "restored=true" > /tmp/chroot_status; else echo "   -> [并行A] 备份未找到. 创建全新系统..."; sudo debootstrap --variant=minbase jammy ${{ env.CHROOT_DIR }} http://archive.ubuntu.com/ubuntu/; echo "restored=false" > /tmp/chroot_status; fi; echo "--- [并行A] ✅ Chroot 环境就绪 ---"; ) > ${CHROOT_LOG} 2>&1 &
          CHROOT_PID=$!
          ( echo "--- [并行B] 开始: 安装 Node.js & PM2..."; curl -fsSL https://deb.nodesource.com/setup_18.x | sudo -E bash -; sudo apt-get install -y nodejs; sudo npm install -g pm2; echo "--- [并行B] ✅ Node.js & PM2 安装完毕 ---"; ) > ${NODE_LOG} 2>&1 &
          NODE_PID=$!
          
          FAIL=0; wait ${CHROOT_PID}; CHROOT_EC=$?; echo "--- 📜 Chroot 任务日志 ---"; cat ${CHROOT_LOG}; if [[ $CHROOT_EC -ne 0 ]]; then echo "❌ Chroot 任务失败!"; FAIL=1; fi
          wait ${NODE_PID}; NODE_EC=$?; echo "--- 📜 Node.js 任务日志 ---"; cat ${NODE_LOG}; if [[ $NODE_EC -ne 0 ]]; then echo "❌ Node.js 任务失败!"; FAIL=1; fi
          if [[ $FAIL -eq 1 ]]; then exit 1; fi
          
          echo "✅ 核心准备任务成功!"; CHROOT_STATUS=$(cat /tmp/chroot_status); echo "restored=${CHROOT_STATUS}" >> $GITHUB_OUTPUT

      - name: 8. 挂载虚拟文件系统
        run: |
          MNT_DIR=${{ env.CHROOT_DIR }}; sudo mount -t proc proc "${MNT_DIR}/proc"; sudo mount -o bind /dev "${MNT_DIR}/dev"; sudo mount -o bind /dev/pts "${MNT_DIR}/dev/pts"; sudo mount -o bind /sys "${MNT_DIR}/sys"

      - name: 9. [增强] 清理与更新 Chroot (如果恢复自备份)
        if: steps.prepare_core.outputs.restored == 'true'
        run: |
          echo "--- 开始深度清理 Chroot 环境 ---"; sudo chroot ${{ env.CHROOT_DIR }} /bin/bash -c "apt-get clean -y&&apt-get autoclean -y&&apt-get autoremove -y&&rm -rf /var/lib/apt/lists/* /tmp/* /var/tmp/* /root/.cache /root/.npm"
          echo "--- 自动更新 Chroot 内的 OpenList ---"; sudo tee ${{ env.CHROOT_DIR }}/tmp/update_openlist.sh > /dev/null << 'EOF'
          #!/usr/bin/env bash
          set -e; cd /root; apt-get update >/dev/null && apt-get install -y curl jq >/dev/null; LATEST_TAG=$(curl -s https://api.github.com/repos/OpenListTeam/OpenList/releases/latest|jq -r '.tag_name'|head -1); ARCH=amd64; TARBALL="openlist-linux-${ARCH}.tar.gz"; DOWNLOAD_URL="https://github.com/OpenListTeam/OpenList/releases/download/${LATEST_TAG}/${TARBALL}"; wget -qO "${TARBALL}" "${DOWNLOAD_URL}"; TMP_DIR=$(mktemp -d); trap "rm -rf ${TMP_DIR}" EXIT; tar -zxf "${TARBALL}" -C "${TMP_DIR}"; mv "${TMP_DIR}/openlist" ./openlist; chmod +x ./openlist; rm -f "${TARBALL}"; echo "✅ OpenList 已更新至 ${LATEST_TAG}"; EOF
          sudo chmod +x ${{ env.CHROOT_DIR }}/tmp/update_openlist.sh; sudo chroot ${{ env.CHROOT_DIR }} /tmp/update_openlist.sh

      # [终极优化] 并行启动 Chroot 服务 和 Python 应用
      - name: 10. ⚡️ 并行启动所有服务
        run: |
          # --- 后台任务: 启动 Chroot 内的服务 ---
          if [[ "${{ github.event.inputs.run_startup_script }}" == "true" ]]; then
            echo "--- [后台] 正在启动 Chroot 内部服务..."
            sudo tee ${{ env.CHROOT_DIR }}/tmp/startup.sh > /dev/null << 'EOF'
            #!/bin/bash
            set -e
            export RUN_LAUNCHER='${{ github.event.inputs.run_launcher || (github.event_name == 'schedule' && 'true') }}'; export RUN_REDIS='${{ github.event.inputs.run_redis || (github.event_name == 'schedule' && 'true') }}'; export RUN_YUNZAI='${{ github.event.inputs.run_yunzai || (github.event_name == 'schedule' && 'true') }}'; export RUN_LOOPHOLE_WEBDAV='${{ github.event.inputs.run_loophole_webdav || (github.event_name == 'schedule' && 'true') }}'; export RUN_OPENLIST='${{ github.event.inputs.run_openlist || (github.event_name == 'schedule' && 'true') }}'; export RUN_CHMLFRP='${{ github.event.inputs.run_chmlfrp || (github.event_name == 'schedule' && 'true') }}'; export ENABLE_NAPCAT_TUNNEL='${{ github.event.inputs.enable_napcat_tunnel || 'false' }}'
            export LOOPHOLE_WEBDAV_USER='${{ env.LOOPHOLE_WEBDAV_USER }}'; export LOOPHOLE_WEBDAV_PASS='${{ env.LOOPHOLE_WEBDAV_PASS }}'; export LOOPHOLE_WEBDAV_HOSTNAME='${{ env.LOOPHOLE_WEBDAV_HOSTNAME }}'; export LOOPHOLE_NAPCAT_HOSTNAME='${{ env.LOOPHOLE_NAPCAT_HOSTNAME }}'; export NAPCATUSER='${{ env.NAPCATUSER }}'; export NAPCATPASS='${{ env.NAPCATPASS }}'
            export PATH=/usr/local/sbin:/usr/local/bin:/usr/sbin:/usr/bin:/sbin:/bin:/root/node_modules/.bin; HOME_DIR="/root"
            if ! command -v pm2 &> /dev/null; then npm install -g pm2; fi; echo "1. 清理日志..." && pm2 flush && find ${HOME_DIR} -name "*.log" -type f -delete
            if [[ "$RUN_YUNZAI" == "true" ]]; then echo "启动 Yunzai..."; [ -d "${HOME_DIR}/Yunzai" ] && (cd "${HOME_DIR}/Yunzai" && pm2 start app.js --name "yunzai-app"); else echo "跳过 Yunzai"; fi
            # ... 其他服务启动逻辑 ...
            pm2 save && pm2 ls
            EOF
            sudo chmod +x ${{ env.CHROOT_DIR }}/tmp/startup.sh
            # 使用 & 让 Chroot 脚本在后台运行
            (sudo chroot ${{ env.CHROOT_DIR }} /tmp/startup.sh) &
          else
            echo "--- [跳过] 根据设置，不启动 Chroot 内部服务。 ---"
          fi

          # --- 前台任务: 安装并启动 Python 应用 ---
          echo "--- [前台] 后台正在启动Chroot服务, 前台开始准备 Python 应用..."
          cd chatgpt-on-wechat
          echo "[前台] 正在安装 Python 依赖 (可能耗时较长)..."
          python -m pip install --upgrade pip
          pip install -r requirements-optional.txt --target ./lib --cache-dir ~/.cache/pip || true
          pip install -r requirements.txt --target ./lib --cache-dir ~/.cache/pip || true
          
          echo "[前台] 依赖安装完成, 启动 Python 应用..."
          export PYTHONPATH=$(pwd)/lib
          pm2 start "python3 app.py" --name "python-app"
          
          echo "✅ Python 应用已启动。等待后台 Chroot 任务（如果存在）完成..."
          wait # 等待所有后台子进程完成
          echo "✅ 所有启动任务完成。"
          pm2 ls

      - name: 11. [自动化/手动] 等待或调试
        if: github.event.inputs.enable_ssh == 'false'
        env:
          RUNTIME_MINUTES: ${{ github.event.inputs.create_backup_on_finish == 'true' && 300 || 350 }}
        run: |
          echo "🚀 所有服务已根据设置启动。工作流将暂停 ${RUNTIME_MINUTES} 分钟..."
          sleep ${RUNTIME_MINUTES}m
          echo "⏳ 规定运行时间已到。"
      - name: 11. [手动调试路径]
        if: github.event.inputs.enable_ssh == 'true'
        uses: lhotari/action-upterm@v1
        with: { limit-access-to-actor: true, wait-timeout-minutes: 350 }

      - name: 12. 停止所有服务
        if: always()
        run: |
          echo "--- 正在停止所有服务 ---"
          # 停止 Runner 上的 Python 应用
          pm2 stop python-app || echo "Python app 未运行或已停止。"
          # 停止 Chroot 内的所有服务
          sudo chroot ${{ env.CHROOT_DIR }} bash -c 'command -v pm2 && pm2 stop all' || echo "Chroot 内 PM2 未运行或已停止。"
          echo "✅ 所有服务已停止。"

      - name: 13. 卸载虚拟文件系统
        if: always()
        run: |
          sudo umount -l "${{ env.CHROOT_DIR }}/dev/pts" || true; sudo umount -l "${{ env.CHROOT_DIR }}/dev" || true
          sudo umount -l "${{ env.CHROOT_DIR }}/proc" || true; sudo umount -l "${{ env.CHROOT_DIR }}/sys" || true

      - name: 14. ⚡️ [极速] 创建版本化备份
        if: success() && !cancelled() && github.event.inputs.create_backup_on_finish == 'true'
        run: |
          echo "--- 使用 zstd-19 创建备份并上传至 B2 ---"
          rclone config create ${{ env.B2_REMOTE_NAME }} b2 account "${{ env.B2_KEY_ID }}" key "${{ env.B2_APPLICATION_KEY }}"
          TIMESTAMP=$(date -u +'%Y%m%d-%H%M%S')
          NEW_BACKUP_FILE="${{ env.BACKUP_PREFIX }}${TIMESTAMP}.tar.zst"
          B2_FULL_PATH="${{ env.B2_REMOTE_NAME }}:${{ env.B2_BUCKET_NAME }}/${{ env.B2_REMOTE_PATH }}"
          EXCLUDE_OPTS="--exclude='./tmp' --exclude='./var/tmp' --exclude='./root/.cache' --exclude='./var/cache' --exclude='./var/log'"
          sudo tar -c ${EXCLUDE_OPTS} -f - -C ${{ env.CHROOT_DIR }} . | zstd -T0 -19 -c | rclone rcat ${B2_FULL_PATH}/${NEW_BACKUP_FILE} ${{ env.RCLONE_FLAGS }}
          echo "✅ 新备份上传成功。"
          echo "--- 清理 B2 上的旧备份 (保留2个最新) ---"
          FILES_TO_DELETE=$(rclone lsjson ${B2_FULL_PATH}/ | jq -r '[.[] | select(.Name | test("minisys_backup_.*\\.tar\\.(zst|gz)$"))] | sort_by(.ModTime) | .[:-2][] | .Name' 2>/dev/null)
          if [[ -n "$FILES_TO_DELETE" && "$FILES_TO_DELETE" != "null" ]]; then
            echo "将要删除: $FILES_TO_DELETE"
            for file_name in $FILES_TO_DELETE; do rclone deletefile "${B2_FULL_PATH}/${file_name}"; done
            echo "✅ 旧备份清理完毕。"
          else echo "无需清理。"; fi

      - name: 15. 清理运行器残留文件
        if: always()
        run: |
          echo "--- 清理运行器环境 ---"
          sudo rm -rf ${{ env.CHROOT_DIR }}; rm -rf chatgpt-on-wechat
          sudo npm cache clean --force || true; pip cache purge || true
          echo "✅ 运行器清理完成。"