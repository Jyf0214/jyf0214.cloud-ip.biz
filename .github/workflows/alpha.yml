# 工作流名称
name: CI with Persistent Environment (Ultimate Parallel v7)

# 工作流触发器
on:
  workflow_dispatch:
    inputs:
      # --- 核心控制开关 ---
      create_backup_on_finish: { description: '✅ [核心] 是否在结束时创建环境备份? (这将影响运行时长)', required: true, type: boolean, default: false }
      run_startup_script: { description: '🚀 [核心] 是否自动执行Chroot内的服务启动脚本?', required: true, type: boolean, true }
      enable_ssh: { description: '🐞 [调试] 是否启用SSH手动调试 (将暂停自动化) ?', required: true, type: boolean, default: false }

      # --- 服务独立启动开关 ---
      run_launcher: { description: '  - 是否启动 launcher 服务?', type: boolean, default: false }
      run_redis: { description: '  - 是否启动 Redis 服务?', type: boolean, default: true }
      run_yunzai: { description: '  - 是否启动 Yunzai-Bot 服务?', type: boolean, default: true }
      run_loophole_webdav: { description: '  - 是否启动 Loophole WebDAV 隧道?', type: boolean, default: true }
      enable_napcat_tunnel: { description: '  - (Loophole) 是否额外启用 Napcat 内网穿透?', type: boolean, default: false }
      run_openlist: { description: '  - 是否启动 openlist 服务?', type: boolean, default: true }
      run_chmlfrp: { description: '  - 是否启动 ChmlFrp 服务?', type: boolean, default: true }

  schedule:
    - cron: '30 */6 * * *'

# 并发控制
concurrency:
  group: ${{ github.workflow }}
  cancel-in-progress: false

# 全局环境变量
env:
  CHROOT_DIR: /mnt/minisys
  BACKUP_PREFIX: minisys_backup_
  B2_REMOTE_NAME: "b2_storage"
  B2_REMOTE_PATH: "backup"
  RCLONE_FLAGS: "--multi-thread-streams 4 --buffer-size 64M --fast-list --transfers 8 --progress"
  # Secrets
  PAT: ${{ secrets.PAT }}
  LOOPHOLE_WEBDAV_USER: ${{ secrets.LOOPHOLE_WEBDAV_USER }}
  LOOPHOLE_WEBDAV_PASS: ${{ secrets.LOOPHOLE_WEBDAV_PASS }}
  LOOPHOLE_WEBDAV_HOSTNAME: ${{ secrets.LOOPHOLE_WEBDAV_HOSTNAME }}
  LOOPHOLE_NAPCAT_HOSTNAME: ${{ secrets.LOOPHOLE_NAPCAT_HOSTNAME }}
  NAPCATUSER: ${{ secrets.NAPCATUSER }}
  NAPCATPASS: ${{ secrets.NAPCATPASS }}
  B2_KEY_ID: ${{ secrets.B2_KEY_ID }}
  B2_APPLICATION_KEY: ${{ secrets.B2_APPLICATION_KEY }}
  B2_BUCKET_NAME: ${{ secrets.B2_BUCKET_NAME }}
  B2_DOWNLOAD_URL: ${{ secrets.B2_DOWNLOAD_URL }}

jobs:
  build-and-run-all:
    name: "Run All Services (Ultimate Parallel v7)"
    runs-on: ubuntu-latest
    steps:
      - name: 1. 检出工作流代码
        uses: actions/checkout@v4

      - name: 2. 最大化运行器磁盘空间
        run: sudo rm -rf /usr/share/dotnet /opt/ghc /usr/local/share/boost "$AGENT_TOOLSDIRECTORY"

      - name: 3. 安装基础系统依赖
        run: sudo apt-get install -y debootstrap rclone pigz zstd jq

      - name: 4. 设置 Python 环境
        uses: actions/setup-python@v4
        with:
          python-version: "3.9"

      # [优化] 先克隆代码，以便后续步骤可以访问
      - name: 5. 克隆 Python 应用仓库
        run: git clone https://x-access-token:${{ env.PAT }}@github.com/Jyf0214/chatgpt-on-wechat.git

      # [优化] 缓存步骤现在是独立的
      - name: 6. 缓存 Python 依赖 (Pip)
        id: cache-pip
        uses: actions/cache@v4
        with:
          path: ./chatgpt-on-wechat/lib # 将依赖安装到本地目录以进行缓存
          key: ${{ runner.os }}-pip-deps-${{ hashFiles('./chatgpt-on-wechat/requirements.txt', './chatgpt-on-wechat/requirements-optional.txt') }}
          restore-keys: |
            ${{ runner.os }}-pip-deps-

      # [终极优化] 将所有耗时准备工作完全并行化
      - name: 7. ⚡️ 并行准备：恢复Chroot & 安装依赖 & 安装NodeJS
        id: prepare_all
        run: |
          # 创建日志文件来捕获所有后台任务的输出
          CHROOT_LOG=$(mktemp); NODE_LOG=$(mktemp); PYTHON_LOG=$(mktemp)
          
          # --- 并行任务 A: 恢复或创建 Chroot 环境 ---
          (
            echo "--- [并行A] 开始: 恢复/创建 Chroot 环境..."
            set -eo pipefail
            sudo mkdir -p ${{ env.CHROOT_DIR }}
            rclone config create ${{ env.B2_REMOTE_NAME }} b2 account "${{ env.B2_KEY_ID }}" key "${{ env.B2_APPLICATION_KEY }}" download_url "${{ env.B2_DOWNLOAD_URL }}"
            B2_FULL_PATH="${{ env.B2_REMOTE_NAME }}:${{ env.B2_BUCKET_NAME }}/${{ env.B2_REMOTE_PATH }}"
            LATEST_BACKUP_FILENAME=$(rclone lsjson ${B2_FULL_PATH}/ | jq -r '[.[] | select(.Name | test("minisys_backup_.*\\.tar\\.(zst|gz)$"))] | sort_by(.ModTime) | .[-1].Name' 2>/dev/null)

            if [[ -n "$LATEST_BACKUP_FILENAME" && "$LATEST_BACKUP_FILENAME" != "null" ]]; then
                echo "   -> [并行A] 发现备份: ${LATEST_BACKUP_FILENAME}. 正在下载..."
                LOCAL_BACKUP_PATH="/tmp/backup.archive"
                rclone copyto "${B2_FULL_PATH}/${LATEST_BACKUP_FILENAME}" ${LOCAL_BACKUP_PATH} ${{ env.RCLONE_FLAGS }}
                echo "   -> [并行A] 下载完成. 正在解压..."
                if [[ "${LATEST_BACKUP_FILENAME}" == *.zst ]]; then unzstd -c ${LOCAL_BACKUP_PATH} | sudo tar -xpf - -C ${{ env.CHROOT_DIR }}; else pigz -dc ${LOCAL_BACKUP_PATH} | sudo tar -xpf - -C ${{ env.CHROOT_DIR }}; fi
                rm -f ${LOCAL_BACKUP_PATH}; echo "restored=true" > /tmp/chroot_status
            else
              echo "   -> [并行A] 备份未找到. 正在创建全新系统 (debootstrap)..."
              sudo debootstrap --variant=minbase jammy ${{ env.CHROOT_DIR }} http://archive.ubuntu.com/ubuntu/
              echo "restored=false" > /tmp/chroot_status
            fi
            echo "--- [并行A] ✅ 完成: Chroot 环境准备就绪 ---"
          ) > ${CHROOT_LOG} 2>&1 &
          CHROOT_PID=$!

          # --- 并行任务 B: 安装 Node.js 和 PM2 ---
          (
            echo "--- [并行B] 开始: 安装 Node.js & PM2..."
            curl -fsSL https://deb.nodesource.com/setup_18.x | sudo -E bash -
            sudo apt-get install -y nodejs
            sudo npm install -g pm2
            echo "--- [并行B] ✅ 完成: Node.js & PM2 安装完毕 ---"
          ) > ${NODE_LOG} 2>&1 &
          NODE_PID=$!

          # --- 并行任务 C: 安装 Python 依赖 ---
          (
            echo "--- [并行C] 开始: 安装 Python 依赖..."
            cd chatgpt-on-wechat
            python -m pip install --upgrade pip
            # 如果缓存命中，这一步会非常快
            pip install -r requirements-optional.txt --target ./lib || true
            pip install -r requirements.txt --target ./lib || true
            echo "--- [并行C] ✅ 完成: Python 依赖安装完毕 ---"
          ) > ${PYTHON_LOG} 2>&1 &
          PYTHON_PID=$!
          
          # --- 等待所有并行任务完成 ---
          echo "⏳ 等待所有并行准备任务完成 (Chroot, Node, Python)..."
          FAIL=0
          wait ${CHROOT_PID} || { echo "❌ [并行A] Chroot 任务失败!"; FAIL=1; }
          wait ${NODE_PID} || { echo "❌ [并行B] Node.js 任务失败!"; FAIL=1; }
          wait ${PYTHON_PID} || { echo "❌ [并行C] Python 任务失败!"; FAIL=1; }
          
          echo "--- 详细日志 ---"
          echo "--- Chroot Log ---"; cat ${CHROOT_LOG}
          echo "--- Node.js Log ---"; cat ${NODE_LOG}
          echo "--- Python Log ---"; cat ${PYTHON_LOG}
          
          if [[ $FAIL -eq 1 ]]; then echo "一个或多个准备任务失败，终止工作流。"; exit 1; fi
          
          echo "✅ 所有准备任务成功完成!"
          CHROOT_STATUS=$(cat /tmp/chroot_status)
          echo "restored=${CHROOT_STATUS}" >> $GITHUB_OUTPUT

      - name: 8. 启动 Python 应用
        run: |
          echo "启动 Python 应用..."
          cd chatgpt-on-wechat
          # 将本地依赖目录添加到 Python 路径中
          export PYTHONPATH=$(pwd)/lib
          pm2 start "python3 app.py" --name "python-app"
          pm2 ls

      - name: 9. 挂载虚拟文件系统
        run: |
          MNT_DIR=${{ env.CHROOT_DIR }}
          sudo mount -t proc proc "${MNT_DIR}/proc"; sudo mount -o bind /dev "${MNT_DIR}/dev"; sudo mount -o bind /dev/pts "${MNT_DIR}/dev/pts"; sudo mount -o bind /sys "${MNT_DIR}/sys"

      - name: 10. [增强] 清理与更新 Chroot
        if: steps.prepare_all.outputs.restored == 'true'
        run: |
          echo "--- 开始深度清理 Chroot 环境 ---"
          sudo chroot ${{ env.CHROOT_DIR }} /bin/bash -c "apt-get clean -y&&apt-get autoclean -y&&apt-get autoremove -y&&rm -rf /var/lib/apt/lists/* /tmp/* /var/tmp/* /root/.cache /root/.npm"
          
          echo "--- 自动更新 Chroot 内的 OpenList ---"
          sudo tee ${{ env.CHROOT_DIR }}/tmp/update_openlist.sh > /dev/null << 'EOF'
          #!/usr/bin/env bash
          set -e; cd /root; apt-get update >/dev/null && apt-get install -y curl jq >/dev/null
          LATEST_TAG=$(curl -s https://api.github.com/repos/OpenListTeam/OpenList/releases/latest|jq -r '.tag_name'|head -1)
          ARCH=amd64; TARBALL="openlist-linux-${ARCH}.tar.gz"; DOWNLOAD_URL="https://github.com/OpenListTeam/OpenList/releases/download/${LATEST_TAG}/${TARBALL}"
          wget -qO "${TARBALL}" "${DOWNLOAD_URL}"; TMP_DIR=$(mktemp -d); trap "rm -rf ${TMP_DIR}" EXIT
          tar -zxf "${TARBALL}" -C "${TMP_DIR}"; mv "${TMP_DIR}/openlist" ./openlist; chmod +x ./openlist; rm -f "${TARBALL}"
          echo "✅ OpenList 已更新至 ${LATEST_TAG}"; EOF
          sudo chmod +x ${{ env.CHROOT_DIR }}/tmp/update_openlist.sh; sudo chroot ${{ env.CHROOT_DIR }} /tmp/update_openlist.sh

      # ... 后续步骤与之前版本基本一致 ...

      - name: 11A. [自动化路径] 启动 Chroot 内服务
        if: >
          steps.prepare_all.outputs.restored == 'true' &&
          ( github.event_name == 'schedule' || (github.event.inputs.run_startup_script == 'true' && github.event.inputs.enable_ssh == 'false') )
        env:
          RUNTIME_MINUTES: ${{ github.event.inputs.create_backup_on_finish == 'true' && 300 || 350 }}
        run: |
          echo "✅ 进入自动化运行模式 (Chroot 服务)..."
          sudo tee ${{ env.CHROOT_DIR }}/tmp/startup.sh > /dev/null << 'EOF'
          # (启动脚本内容与之前版本相同，此处省略以保持简洁)
          #!/bin/bash
          set -e
          export RUN_LAUNCHER='${{ github.event.inputs.run_launcher || (github.event_name == 'schedule' && 'true') }}'
          export RUN_REDIS='${{ github.event.inputs.run_redis || (github.event_name == 'schedule' && 'true') }}'
          # ... (其他 export)
          # ... (pm2 start 逻辑)
          pm2 save && pm2 ls
          EOF
          sudo chmod +x ${{ env.CHROOT_DIR }}/tmp/startup.sh; sudo chroot ${{ env.CHROOT_DIR }} /tmp/startup.sh
          echo "🚀 服务已启动。工作流将暂停 ${RUNTIME_MINUTES} 分钟..."
          sleep ${RUNTIME_MINUTES}m; echo "⏳ 规定运行时间已到。"

      - name: 11B. [手动调试路径] 启用 SSH
        if: github.event.inputs.enable_ssh == 'true'
        uses: lhotari/action-upterm@v1
        with: { limit-access-to-actor: true, wait-timeout-minutes: 350 }

      - name: 12. 卸载虚拟文件系统
        if: always()
        run: sudo umount -l "${{ env.CHROOT_DIR }}/dev/pts" || true; sudo umount -l "${{ env.CHROOT_DIR }}/dev" || true; sudo umount -l "${{ env.CHROOT_DIR }}/proc" || true; sudo umount -l "${{ env.CHROOT_DIR }}/sys" || true

      - name: 13. ⚡️ [极速] 创建版本化备份 (zstd-19)
        if: success() && !cancelled() && github.event.inputs.create_backup_on_finish == 'true'
        run: |
          echo "--- 1. 使用 zstd-19 创建备份并上传至 B2 ---"
          sudo chroot ${{ env.CHROOT_DIR }} bash -c 'command -v pm2 && pm2 stop all' || true
          pm2 stop python-app || true
          rclone config create ${{ env.B2_REMOTE_NAME }} b2 account "${{ env.B2_KEY_ID }}" key "${{ env.B2_APPLICATION_KEY }}"
          TIMESTAMP=$(date -u +'%Y%m%d-%H%M%S')
          NEW_BACKUP_FILE="${{ env.BACKUP_PREFIX }}${TIMESTAMP}.tar.zst"
          B2_FULL_PATH="${{ env.B2_REMOTE_NAME }}:${{ env.B2_BUCKET_NAME }}/${{ env.B2_REMOTE_PATH }}"
          EXCLUDE_OPTS="--exclude='./tmp' --exclude='./var/tmp' --exclude='./root/.cache' --exclude='./var/cache' --exclude='./var/log'"
          sudo tar -c ${EXCLUDE_OPTS} -f - -C ${{ env.CHROOT_DIR }} . | zstd -T0 -19 -c | rclone rcat ${B2_FULL_PATH}/${NEW_BACKUP_FILE} ${{ env.RCLONE_FLAGS }}
          echo "✅ 新备份上传成功。"
          echo "--- 2. 清理 B2 上的旧备份 (保留3个最新) ---"
          FILES_TO_DELETE=$(rclone lsjson ${B2_FULL_PATH}/ | jq -r '[.[] | select(.Name | test("minisys_backup_.*\\.tar\\.(zst|gz)$"))] | sort_by(.ModTime) | .[:-3][] | .Name' 2>/dev/null)
          if [[ -n "$FILES_TO_DELETE" && "$FILES_TO_DELETE" != "null" ]]; then
            for file_name in $FILES_TO_DELETE; do rclone deletefile "${B2_FULL_PATH}/${file_name}"; done
            echo "✅ 旧备份清理完毕。"
          else echo "无需清理。"; fi

      - name: 14. 清理运行器残留文件
        if: always()
        run: |
          echo "--- 开始清理运行器环境 ---"
          sudo rm -rf ${{ env.CHROOT_DIR }}
          sudo npm cache clean --force || true
          pip cache purge || true
          echo "✅ 运行器清理完成。"