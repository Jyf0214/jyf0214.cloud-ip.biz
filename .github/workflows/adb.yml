# 工作流名称
name: CI with Android Emulator (Using Professional Action)

# 工作流触发器
on:
  workflow_dispatch:
    inputs:
      # --- 核心控制开关 ---
      enable_ssh_debug: { description: '🐞 [调试] 是否启用SSH手动调试 (将暂停自动化)?', required: true, type: boolean, default: false }

      # --- 安卓模拟器配置 ---
      avd_name: { description: 'AVD (模拟器) 名称', required: true, type: string, default: 'pixel_6_pro' }
      api_level: { description: '安卓 API 等级 (例如: 29, 30, 33)', required: true, type: string, default: '33' }
      target: { description: '系统镜像类型 (google_apis, default)', required: true, type: string, default: 'google_apis' }
      arch: { description: 'CPU 架构 (x86_64, x86)', required: true, type: string, default: 'x86_64' }

# 并发控制
concurrency:
  group: ${{ github.workflow }}
  cancel-in-progress: true

# 全局环境变量
env:
  # 注意：这些变量现在主要给 ngrok 和我们自己参考，模拟器 Action 会直接使用 inputs
  AVD_NAME: ${{ github.event.inputs.avd_name }}
  API_LEVEL: ${{ github.event.inputs.api_level }}
  NGROK_AUTHTOKEN: ${{ secrets.NGROK_AUTHTOKEN }}

jobs:
  build-and-run-android:
    name: "Run Android Emulator via Professional Action"
    runs-on: ubuntu-latest
    steps:
      - name: 1. 检出代码
        uses: actions/checkout@v4
      
      # Java (JDK) 是安卓模拟器的前提依赖
      - name: 2. 设置 Java 环境
        uses: actions/setup-java@v4
        with:
          distribution: 'temurin'
          java-version: '17' # 推荐使用较新的 JDK 版本

      - name: 3. ✅ [核心] 启动安卓模拟器
        uses: reactivecircus/android-emulator-runner@v2
        with:
          # --- 传入我们的配置 ---
          api-level: ${{ env.API_LEVEL }}
          target: ${{ github.event.inputs.target }}
          arch: ${{ github.event.inputs.arch }}
          avd-name: ${{ env.AVD_NAME }}
          
          # --- Action 核心配置 ---
          script: adb wait-for-device shell 'while [[ -z $(getprop sys.boot_completed) ]]; do sleep 1; done;' # 等待模拟器完全启动后，此步骤才算完成
          # 模拟器将在后台继续运行，供后续步骤使用

      - name: 4. 暴露无线ADB (ngrok)
        id: start_ngrok
        run: |
          echo "✅ 模拟器已由上一步成功启动并运行在后台。"
          adb devices

          echo "--- 启动 ngrok 隧道暴露 ADB 端口 (5555) ---"
          wget -q https://bin.equinox.io/c/4VmDzA7iaHb/ngrok-stable-linux-amd64.zip -O ngrok.zip
          unzip ngrok.zip
          chmod +x ./ngrok
          ./ngrok authtoken ${{ env.NGROK_AUTHTOKEN }}
          
          # 在后台启动 ngrok 并将连接信息输出到文件
          ./ngrok tcp 5555 --log=stdout > ngrok.log &
          sleep 5 # 等待 ngrok 启动

          NGROK_URL=$(curl -s http://127.0.0.1:4040/api/tunnels | jq -r '.tunnels[] | select(.proto == "tcp") | .public_url')

          echo "================================================================"
          echo "✅ 无线 ADB 已就绪!"
          echo "请使用以下命令从您的本地计算机连接:"
          echo "   adb connect ${NGROK_URL#tcp://}"
          echo "================================================================"
          echo "adb_connect_command=adb connect ${NGROK_URL#tcp://}" >> $GITHUB_OUTPUT

      - name: 5A. [自动化路径] 暂停工作流
        if: github.event.inputs.enable_ssh_debug == 'false'
        run: |
          echo "自动化运行模式。工作流将暂停 350 分钟..."
          sleep 350m
          echo "⏳ 规定运行时间已到。"

      - name: 5B. [调试路径] 启用 SSH
        if: github.event.inputs.enable_ssh_debug == 'true'
        uses: lhotari/action-upterm@v1
        with:
          limit-access-to-actor: true
          wait-timeout-minutes: 350

      - name: 6. [清理] 关闭模拟器和隧道
        if: always()
        run: |
          echo "--- 正在关闭模拟器和 ngrok 隧道 ---"
          adb emu kill || echo "模拟器可能已关闭。"
          killall ngrok || echo "ngrok 进程未找到。"
          echo "✅ 清理完成。"