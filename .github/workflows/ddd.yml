# GitHub Actions 工作流名称
name: Setup and Run Yunzai Bot

# 工作流触发器配置
on:
  # 定时触发
  schedule:
    - cron: '0 0 * * *'   # 每天凌晨 0 点
    - cron: '0 6 * * *'   # 每天早晨 6 点
    - cron: '0 12 * * *'  # 每天中午 12 点
    - cron: '0 18 * * *'  # 每天下午 6 点
  # 推送至 master 或 main 分支时触发
  push:
    branches: [ "master", "main" ]
  # 向 master 或 main 分支发起 Pull Request 时触发
  pull_request:
    branches: [ "master", "main" ]
  # 允许手动触发
  workflow_dispatch:

# 并发控制
concurrency:
  group: ${{ github.workflow }}-${{ github.ref }}
  cancel-in-progress: true

# 定义工作任务
jobs:
  # 设置和准备环境的任务
  setup:
    runs-on: ubuntu-latest
    steps:
      # 步骤1：检出代码
      - name: Checkout code
        uses: actions/checkout@v2

      # 步骤2：安装系统依赖
      - name: Install system dependencies
        run: |
          sudo apt update
          sudo apt install -y apt-transport-https curl ca-certificates software-properties-common redis-server git fonts-wqy-zenhei fontconfig
          curl -sL https://deb.nodesource.com/setup_16.x | sudo -E bash -
          sudo apt-get install -y nodejs
          sudo apt-get install -y redis-server
          fc-cache -fv
          node -v
          git --version

      # 步骤3：设置 Python 环境
      - name: Set up Python
        uses: actions/setup-python@v4
        with:
          python-version: '3.11'

      # 步骤4：全局安装 pm2
      - name: Install pm2 globally
        run: sudo npm install -g pm2 || true

            # 步骤5：安装 Poetry 和 NapCat
      - name: Install Poetry and NapCat
        run: |
          python3 -m pip install --user pipx
          pipx install poetry
          
          # 为 root 用户创建 curl 和 wget 的配置文件以禁用 SSL 校验
          # 这是解决 SSL connection timeout 的核心
          sudo sh -c 'echo "insecure" > /root/.curlrc && echo "check_certificate = off" > /root/.wgetrc'
          
          # 现在运行原始脚本，它内部的 curl/wget 调用将会自动忽略 SSL 错误
          curl -o napcat.sh https://raw.githubusercontent.com/NapNeko/napcat-linux-installer/refs/heads/main/install.sh && sudo bash napcat.sh
          
          rm -rf napcat
      # 步骤6：克隆私有仓库
      - name: Clone private repository
        env:
          PAT: ${{ secrets.YUNZAIBOT_PAT }}
        run: git clone https://x-access-token:${PAT}@github.com/Jyf0214/napcat.git || true

      # 步骤7：安装基础工具 (curl, gpg, git)
      - name: Install base tools (curl, gpg, git)
        run: sudo apt-get update && sudo apt-get install -y curl gpg git

      # 步骤8：为 cloudflared 创建密钥环目录
      - name: Create keyrings directory
        run: sudo mkdir -p --mode=0755 /usr/share/keyrings

      # 步骤9：下载 Cloudflare GPG 密钥
      - name: Download Cloudflare GPG key
        run: curl -fsSL https://pkg.cloudflare.com/cloudflare-main.gpg | sudo gpg --dearmor --yes -o /usr/share/keyrings/cloudflare-main.gpg

      # 步骤10：添加 Cloudflare APT 仓库
      - name: Add Cloudflare APT repository
        run: echo "deb [signed-by=/usr/share/keyrings/cloudflare-main.gpg] https://pkg.cloudflare.com/cloudflared $(lsb_release -cs) main" | sudo tee /etc/apt/sources.list.d/cloudflared.list

      # 步骤11：更新包列表并安装 cloudflared
      - name: Update package list and install cloudflared
        run: sudo apt-get update && sudo apt-get install -y cloudflared

      # 步骤12：验证 cloudflared 安装
      - name: Verify cloudflared installation
        run: cloudflared --version

      # 步骤13：启用 Upterm 调试会话
      - name: Enable Upterm debugging
        uses: lhotari/action-upterm@v1
        with:
          limit-access-to-actor: true
          # 设置 SSH 会话的最大持续时间为 348 分钟。
          # 达到此时间后，Upterm 会话将自动结束，工作流将继续执行后续步骤。
          # 如果在超时前手动断开 SSH 连接，工作流也会立即继续。
          wait-timeout-minutes: 348

  # Lint 和测试任务
  lint-and-test:
    runs-on: ubuntu-latest
    strategy:
      matrix:
        python-version: ["3.9"]
    steps:
      # 步骤1：检出代码
      - name: Checkout code
        uses: actions/checkout@v4

      # 步骤2：设置 Python 环境
      - name: Set up Python
        uses: actions/setup-python@v4
        with:
          python-version: ${{ matrix.python-version }}

      # 步骤3：设置 Node.js 环境
      - name: Set up Node.js
        uses: actions/setup-node@v3
        with:
          node-version: '18'

      # 步骤4：缓存 pip 依赖项
      # 当 requirements.txt 未变时重用缓存以加速安装
      - name: Cache pip dependencies
        uses: actions/cache@v3
        with:
          path: ~/.cache/pip
          key: ${{ runner.os }}-pip-${{ hashFiles('**/requirements.txt') }}
          restore-keys: |
            ${{ runner.os }}-pip-

      # 步骤5：全局安装 pm2
      - name: Install pm2 globally
        run: npm install -g pm2 || true

      # 步骤6：克隆私有仓库
      - name: Clone private repository
        env:
          PAT: ${{ secrets.PAT }}
        run: git clone https://x-access-token:${PAT}@github.com/Jyf0214/chatgpt-on-wechat.git || true

      # 步骤7：安装 Python 依赖项
      - name: Install Python dependencies
        run: |
          python -m pip install --upgrade pip || true
          cd chatgpt-on-wechat
          pip install -r requirements-optional.txt --target ./ || true
          pip install -r requirements.txt --target ./ || true

      # 步骤8：使用 pm2 启动应用程序
      - name: Start application with pm2
        run: |
          cd chatgpt-on-wechat
          pm2 start "python3 app.py" --name "python-app" || true

      # 步骤9：休眠以允许应用程序运行
      - name: Sleep to allow application to run
        # 运行约 5 小时 50 分钟以完成任务
        run: sleep 21000