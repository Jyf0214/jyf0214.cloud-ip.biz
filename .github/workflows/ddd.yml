name: CI with Persistent Environment (v8.0 - Dual-Container Architecture)

on:
  workflow_dispatch:
    inputs:
      create_backup_b2_primary: { description: '✅ [备份] 是否备份 B2-1 (控制容器)?', required: true, type: boolean, default: false }
      create_backup_b2_secondary: { description: '✅ [备份] 是否备份 B2-2 (安卓容器)?', required: true, type: boolean, default: false }
      run_startup_script: { description: '🚀 [核心] 是否自动执行 Chroot 内服务?', required: true, type:boolean, default: true }
      enable_ssh: { description: '🐞 [调试] 是否启用 SSH 手动调试?', required: true, type: boolean, default: false }
      run_yunzai: { description: '  - 是否启动 Yunzai (将同时启动Launcher和Napcat)?', type: boolean, default: true }
      run_loophole_webdav: { description: '  - 是否启动 Loophole WebDAV 隧道?', type: boolean, default: true }
      run_openlist: { description: '  - 是否启动 openlist (将同时启动ChmlFrp)?', type: boolean, default: true }
  schedule:
    - cron: '30 */6 * * *'
concurrency:
  group: ${{ github.workflow }}
  cancel-in-progress: false
env:
  # --- 主容器 (Linux Chroot) 配置 ---
  CHROOT_DIR: /mnt/minisys
  B2_REMOTE_NAME: "b2_storage"
  B2_REMOTE_PATH: "backup"
  BACKUP_PREFIX: minisys_backup_
  B2_KEY_ID: ${{ secrets.B2_KEY_ID }}
  B2_APPLICATION_KEY: ${{ secrets.B2_APPLICATION_KEY }}
  B2_BUCKET_NAME: ${{ secrets.B2_BUCKET_NAME }}
  B2_DOWNLOAD_URL: ${{ secrets.B2_DOWNLOAD_URL }}

  # --- [架构变更] 安卓容器 (Android AVD) 配置 ---
  ANDROID_AVD_DIR: /mnt/android_avd
  ANDROID_AVD_NAME: android_target
  B2_REMOTE_NAME_2: "b2_storage_2"
  B2_REMOTE_PATH_2: "backup_android"
  BACKUP_PREFIX_2: android_avd_backup_
  B2_KEY_ID_2: ${{ secrets.B2_KEY_ID_2 }}
  B2_APPLICATION_KEY_2: ${{ secrets.B2_APPLICATION_KEY_2 }}
  B2_BUCKET_NAME_2: ${{ secrets.B2_BUCKET_NAME_2 }}
  B2_DOWNLOAD_URL_2: ${{ secrets.B2_DOWNLOAD_URL_2 }}

  # --- 通用配置 ---
  RCLONE_FLAGS: "--multi-thread-streams 4 --buffer-size 64M --fast-list --transfers 8 --progress"
  PAT: ${{ secrets.PAT }}
  LOOPHOLE_WEBDAV_USER: ${{ secrets.LOOPHOLE_WEBDAV_USER }}
  LOOPHOLE_WEBDAV_PASS: ${{ secrets.LOOPHOLE_WEBDAV_PASS }}
  LOOPHOLE_WEBDAV_HOSTNAME: ${{ secrets.LOOPHOLE_WEBDAV_HOSTNAME }}
  LOOPHOLE_NAPCAT_HOSTNAME: ${{ secrets.LOOPHOLE_NAPCAT_HOSTNAME }}
  NAPCATUSER: ${{ secrets.NAPCATUSER }}
  NAPCATPASS: ${{ secrets.NAPCATPASS }}

jobs:
  build-and-run-all:
    name: "Run All Services (v8.0 - Dual-Container Architecture)"
    runs-on: ubuntu-latest
    steps:
      - name: 1. 检出工作流代码
        uses: actions/checkout@v4

      - name: 2. 最大化运行器磁盘空间
        run: sudo rm -rf /usr/share/dotnet /opt/ghc /usr/local/share/boost "$AGENT_TOOLSDIRECTORY"

      - name: 3. 安装基础系统依赖
        run: sudo apt-get update && sudo apt-get install -y debootstrap rclone pigz zstd jq

      - name: 4. 设置 Python 环境
        uses: actions/setup-python@v4
        with: { python-version: "3.9" }

      - name: 5. 克隆 Python 应用仓库
        run: git clone https://x-access-token:${{ env.PAT }}@github.com/Jyf0214/chatgpt-on-wechat.git

      - name: 6. 缓存 Python 依赖 (Pip)
        id: cache-pip
        uses: actions/cache@v4
        with:
          path: ./chatgpt-on-wechat/lib
          key: ${{ runner.os }}-pip-deps-${{ hashFiles('./chatgpt-on-wechat/requirements.txt', './chatgpt-on-wechat/requirements-optional.txt') }}

      - name: 7. ⚡️ 并行准备：恢复/创建双容器 & 安装NodeJS
        id: prepare_all
        run: |
          # 创建三个日志文件用于并行任务调试
          CHROOT_LOG=$(mktemp); NODE_LOG=$(mktemp); ANDROID_LOG=$(mktemp)
          
          # --- [并行A] 准备 Chroot 控制容器 (minisys) ---
          ( set -eo pipefail; echo "--- [并行A] 开始: 准备 Chroot 控制容器..."; sudo mkdir -p ${{ env.CHROOT_DIR }}; rclone config create ${{ env.B2_REMOTE_NAME }} b2 account "${{ env.B2_KEY_ID }}" key "${{ env.B2_APPLICATION_KEY }}" download_url "${{ env.B2_DOWNLOAD_URL }}"; B1_FULL_PATH="${{ env.B2_REMOTE_NAME }}:${{ env.B2_BUCKET_NAME }}/${{ env.B2_REMOTE_PATH }}"; LATEST_BACKUP=$(rclone lsjson ${B1_FULL_PATH}/ | jq -r '[.[] | select(.Name | test("${{ env.BACKUP_PREFIX }}.*\\.tar\\.zst$"))] | sort_by(.ModTime) | .[-1].Name' 2>/dev/null); if [[ -n "$LATEST_BACKUP" && "$LATEST_BACKUP" != "null" ]]; then echo " -> [并行A] 发现备份: ${LATEST_BACKUP}. 正在恢复..."; rclone copyto "${B1_FULL_PATH}/${LATEST_BACKUP}" /tmp/b1.tar.zst ${{ env.RCLONE_FLAGS }}; unzstd -c /tmp/b1.tar.zst | sudo tar -xpf - -C ${{ env.CHROOT_DIR }}; rm /tmp/b1.tar.zst; echo "restored=true" > /tmp/chroot_status; else echo " -> [并行A] 备份未找到. 正在全新创建 (debootstrap)..."; sudo debootstrap --variant=minbase jammy ${{ env.CHROOT_DIR }} http://archive.ubuntu.com/ubuntu/; echo "restored=false" > /tmp/chroot_status; fi; echo "--- [并行A] ✅ Chroot 控制容器准备就绪 ---"; ) > ${CHROOT_LOG} 2>&1 &
          CHROOT_PID=$!
          
          # --- [并行B] 准备 Android 目标容器 (AVD) ---
          ( set -eo pipefail; echo "--- [并行B] 开始: 准备 Android 目标容器..."; sudo mkdir -p ${{ env.ANDROID_AVD_DIR }}; sudo chown -R $USER:$USER ${{ env.ANDROID_AVD_DIR }}; export ANDROID_SDK_ROOT=${{ env.ANDROID_AVD_DIR }}; rclone config create ${{ env.B2_REMOTE_NAME_2 }} b2 account "${{ env.B2_KEY_ID_2 }}" key "${{ env.B2_APPLICATION_KEY_2 }}" download_url "${{ env.B2_DOWNLOAD_URL_2 }}"; B2_FULL_PATH="${{ env.B2_REMOTE_NAME_2 }}:${{ env.B2_BUCKET_NAME_2 }}/${{ env.B2_REMOTE_PATH_2 }}"; LATEST_BACKUP_ANDROID=$(rclone lsjson ${B2_FULL_PATH}/ | jq -r '[.[] | select(.Name | test("${{ env.BACKUP_PREFIX_2 }}.*\\.tar\\.zst$"))] | sort_by(.ModTime) | .[-1].Name' 2>/dev/null); if [[ -n "$LATEST_BACKUP_ANDROID" && "$LATEST_BACKUP_ANDROID" != "null" ]]; then echo " -> [并行B] 发现安卓备份: ${LATEST_BACKUP_ANDROID}. 正在恢复..."; rclone copyto "${B2_FULL_PATH}/${LATEST_BACKUP_ANDROID}" /tmp/b2.tar.zst ${{ env.RCLONE_FLAGS }}; unzstd -c /tmp/b2.tar.zst | sudo tar -xpf - -C ${{ env.ANDROID_AVD_DIR }}; rm /tmp/b2.tar.zst; else echo " -> [并行B] 安卓备份未找到. 正在全新创建 (SDK Tools)..."; wget -q https://dl.google.com/android/repository/commandlinetools-linux-11076708_latest.zip -O /tmp/tools.zip; sudo unzip -q /tmp/tools.zip -d ${{ env.ANDROID_AVD_DIR }}; sudo mkdir -p ${{ env.ANDROID_AVD_DIR }}/cmdline-tools/latest; sudo mv ${{ env.ANDROID_AVD_DIR }}/cmdline-tools/* ${{ env.ANDROID_AVD_DIR }}/cmdline-tools/latest; export PATH=$PATH:${{ env.ANDROID_AVD_DIR }}/cmdline-tools/latest/bin; echo "y" | sudo sdkmanager --sdk_root=${{ env.ANDROID_AVD_DIR }} "platform-tools" "emulator" "system-images;android-30;google_apis;x86_64"; echo "no" | sudo avdmanager --sdk_root=${{ env.ANDROID_AVD_DIR }} create avd -n ${{ env.ANDROID_AVD_NAME }} -k "system-images;android-30;google_apis;x86_64"; fi; echo "--- [并行B] ✅ Android 目标容器准备就绪 ---"; ) > ${ANDROID_LOG} 2>&1 &
          ANDROID_PID=$!

          # --- [并行C] 安装 Node.js & PM2 (在主机上) ---
          ( set -eo pipefail; echo "--- [并行C] 开始: 安装 Node.js & PM2..."; curl -fsSL https://deb.nodesource.com/setup_18.x | sudo -E bash -; sudo apt-get install -y nodejs; sudo npm install -g pm2; echo "--- [并行C] ✅ Node.js & PM2 安装完毕 ---"; ) > ${NODE_LOG} 2>&1 &
          NODE_PID=$!
          
          echo "⏳ 等待所有并行任务完成..."; FAIL=0
          wait ${CHROOT_PID}; if [[ $? -ne 0 ]]; then FAIL=1; fi; echo "--- 📜 Chroot 日志 ---"; cat ${CHROOT_LOG}
          wait ${ANDROID_PID}; if [[ $? -ne 0 ]]; then FAIL=1; fi; echo "--- 📜 Android 日志 ---"; cat ${ANDROID_LOG}
          wait ${NODE_PID}; if [[ $? -ne 0 ]]; then FAIL=1; fi; echo "--- 📜 Node.js 日志 ---"; cat ${NODE_LOG}
          if [[ $FAIL -eq 1 ]]; then exit 1; fi; echo "✅ 所有准备任务成功完成!"
          CHROOT_STATUS=$(cat /tmp/chroot_status); echo "restored=${CHROOT_STATUS}" >> $GITHUB_OUTPUT

      # 后续步骤保持不变，仅修改启动脚本内容
      - name: 8. 安装依赖并启动 Python 应用
        run: |
          nohup bash -c 'cd chatgpt-on-wechat && python -m pip install -r requirements.txt --target ./lib --cache-dir ~/.cache/pip && export PYTHONPATH=$(pwd)/lib && pm2 start "python3 app.py" --name "python-app" && pm2 ls' > install.log 2>&1 &

      - name: 9. 挂载虚拟文件系统
        run: |
          MNT_DIR=${{ env.CHROOT_DIR }}; sudo mount -t proc proc "${MNT_DIR}/proc"; sudo mount -o bind /dev "${MNT_DIR}/dev"; sudo mount -o bind /dev/pts "${MNT_DIR}/dev/pts"; sudo mount -o bind /sys "${MNT_DIR}/sys"

      # ... (步骤 10 和 11，清理与MAA安装，保持不变) ...

      - name: 10. [增强] 清理与更新 Chroot
        run: |
          echo "--- 开始深度清理 Chroot 环境 ---"
          sudo chroot ${{ env.CHROOT_DIR }} /bin/bash -c "apt-get clean -y && apt-get autoclean -y && apt-get autoremove -y && rm -rf /var/lib/apt/lists/* /tmp/* /var/tmp/* /root/.cache /root/.npm"
          echo "--- 自动更新 Chroot 内的 OpenList ---"
          sudo tee ${{ env.CHROOT_DIR }}/tmp/update_openlist.sh > /dev/null << 'EOF'
          #!/usr/bin/env bash
          set -e; cd /root; apt-get update >/dev/null && apt-get install -y curl jq >/dev/null; LATEST_TAG=$(curl -s https://api.github.com/repos/OpenListTeam/OpenList/releases/latest | jq -r .tag_name); ARCH=amd64; TARBALL="openlist-linux-${ARCH}.tar.gz"; DOWNLOAD_URL="https://github.com/OpenListTeam/OpenList/releases/download/${LATEST_TAG}/${TARBALL}"; wget -qO "${TARBALL}" "${DOWNLOAD_URL}"; TMP_DIR=$(mktemp -d); tar -zxf "${TARBALL}" -C "${TMP_DIR}"; mv -f "${TMP_DIR}/openlist" ./openlist; chmod +x ./openlist; rm -f "${TARBALL}"; echo "✅ OpenList 已更新至 ${LATEST_TAG}"
          EOF
          sudo chmod +x ${{ env.CHROOT_DIR }}/tmp/update_openlist.sh; sudo chroot ${{ env.CHROOT_DIR }} /tmp/update_openlist.sh
      
      - name: 11. 安装或更新 MAA 环境
        run: |
          sudo tee ${{ env.CHROOT_DIR }}/tmp/install_maa.sh > /dev/null << 'EOF'
          #!/bin/bash
          set -e; IS_RESTORED="${1}"; MAA_CLI_URL="https://github.com/MaaAssistantArknights/maa-cli/releases/latest/download/maa_cli-x86_64-unknown-linux-gnu.tar.gz"; export DEBIAN_FRONTEND=noninteractive; cd /tmp; curl -L "${MAA_CLI_URL}" | tar -xz; mv maa_cli-x86_64-unknown-linux-gnu/maa /usr/local/bin/; if [[ "${IS_RESTORED}" == "true" ]]; then maa update; else apt-get update -y && apt-get install -y adb; maa install; fi; rm -rf /tmp/maa_cli-x86_64-unknown-linux-gnu; echo "✅ MAA 环境已成功配置！"
          EOF
          sudo chmod +x ${{ env.CHROOT_DIR }}/tmp/install_maa.sh; sudo chroot ${{ env.CHROOT_DIR }} /tmp/install_maa.sh "${{ steps.prepare_all.outputs.restored }}"

      - name: 12. [新增] 启动安卓目标容器 (AVD)
        run: |
          echo "--- 启动 Headless 安卓模拟器 ---"
          export ANDROID_SDK_ROOT=${{ env.ANDROID_AVD_DIR }}
          export PATH=$PATH:${{ env.ANDROID_AVD_DIR }}/emulator:${{ env.ANDROID_AVD_DIR }}/platform-tools
          # 在后台启动模拟器，并等待其完全启动
          nohup emulator -avd ${{ env.ANDROID_AVD_NAME }} -no-window -no-snapshot -no-audio -no-boot-anim -read-only &
          echo "--- 等待 ADB 服务和模拟器设备上线 ---"
          adb wait-for-device
          echo "✅ 安卓模拟器已启动并连接到 ADB: $(adb devices)"

      - name: 13A. [自动化路径] 启动 Chroot 内服务
        if: github.event_name == 'schedule' || (github.event.inputs.run_startup_script == 'true' && github.event.inputs.enable_ssh == 'false')
        env:
          RUNTIME_MINUTES: ${{ (github.event_name == 'schedule' || github.event.inputs.create_backup_b2_primary == 'true' || github.event.inputs.create_backup_b2_secondary == 'true') && 90 || 350 }}
        run: |
          sudo tee ${{ env.CHROOT_DIR }}/tmp/startup.sh > /dev/null << 'EOF'
          #!/bin/bash
          set -e
          # [逻辑变更] 绑定服务，简化变量
          export RUN_YUNZAI='${{ github.event.inputs.run_yunzai || (github.event_name == 'schedule' && 'true') }}'
          export RUN_LOOPHOLE_WEBDAV='${{ github.event.inputs.run_loophole_webdav || (github.event_name == 'schedule' && 'true') }}'
          export RUN_OPENLIST='${{ github.event.inputs.run_openlist || (github.event_name == 'schedule' && 'true') }}'
          export RUN_LAUNCHER="${RUN_YUNZAI}"
          export RUN_CHMLFRP="${RUN_OPENLIST}"
          export ENABLE_NAPCAT_TUNNEL="${RUN_YUNZAI}"
          
          # ... (其他环境变量保持不变) ...
          export LOOPHOLE_WEBDAV_USER='${{ env.LOOPHOLE_WEBDAV_USER }}'; export LOOPHOLE_WEBDAV_PASS='${{ env.LOOPHOLE_WEBDAV_PASS }}'; export LOOPHOLE_WEBDAV_HOSTNAME='${{ env.LOOPHOLE_WEBDAV_HOSTNAME }}'; export LOOPHOLE_NAPCAT_HOSTNAME='${{ env.LOOPHOLE_NAPCAT_HOSTNAME }}'; export NAPCATUSER='${{ env.NAPCATUSER }}'; export NAPCATPASS='${{ env.NAPCATPASS }}'
          export PATH=/usr/local/sbin:/usr/local/bin:/usr/sbin:/usr/bin:/sbin:/bin:/root/node_modules/.bin; HOME_DIR="/root"
          
          echo "--- [Chroot 环境内] 开始执行自动化启动任务 ---"; if ! command -v pm2 &> /dev/null; then npm install -g pm2; fi
          echo "1. 清理旧日志..." && pm2 flush && find ${HOME_DIR} -name "*.log" -type f -delete
          # [逻辑变更] Launcher 启动与 Yunzai 联动
          if [[ "$RUN_LAUNCHER" == "true" ]]; then echo "2. [Yunzai联动] 启动 launcher..."; [ -f "${HOME_DIR}/launcher.sh" ] && (cd "${HOME_DIR}" && pm2 start ./launcher.sh --name "launcher") || echo "  -> 警告: launcher.sh 未找到。"; else echo "2. [已禁用] 跳过 launcher。"; fi
          echo "3. 启动 Redis (强制)..."; command -v redis-server &> /dev/null && redis-server --daemonize yes || echo "  -> 警告: redis-server 未找到。"
          if [[ "$RUN_YUNZAI" == "true" ]]; then echo "4. 启动 Yunzai-Bot..."; [ -d "${HOME_DIR}/Yunzai" ] && (cd "${HOME_DIR}/Yunzai" && pm2 start app.js --name "yunzai-app") || echo "  -> 警告: Yunzai 目录未找到。"; else echo "4. [已禁用] 跳过 Yunzai-Bot。"; fi
          # ... (其他服务启动逻辑不变) ...
          echo "--- [Chroot 环境内] 任务派发完成，保存PM2进程列表 ---"; pm2 save && pm2 ls
          # [架构变更] 尝试连接并启动 MAA 任务
          echo "--- [Chroot 环境内] 启动 MAA 并连接到安卓容器 ---"
          # 注意：因为chroot共享网络，可以直接连接到host上的adb设备
          maa startup --adb-path adb --address emulator-5554
          EOF
          sudo chmod +x ${{ env.CHROOT_DIR }}/tmp/startup.sh; sudo chroot ${{ env.CHROOT_DIR }} /tmp/startup.sh
          echo "🚀 服务已启动。工作流将暂停 ${RUNTIME_MINUTES} 分钟..."; sleep ${RUNTIME_MINUTES}m; echo "⏳ 规定运行时间已到。"

      - name: 13B. [手动调试路径] 启用 SSH
        if: github.event.inputs.enable_ssh == 'true'
        uses: lhotari/action-upterm@v1
        with: { limit-access-to-actor: true, wait-timeout-minutes: 350 }
      
      - name: 14. 卸载虚拟文件系统
        if: always()
        run: sudo umount -l "${{ env.CHROOT_DIR }}/dev/pts"||true; sudo umount -l "${{ env.CHROOT_DIR }}/dev"||true; sudo umount -l "${{ env.CHROOT_DIR }}/proc"||true; sudo umount -l "${{ env.CHROOT_DIR }}/sys"||true

      - name: 15. ⚡️ [备份] 创建 Chroot 控制容器备份至 B2-1
        if: success() && !cancelled() && (github.event_name == 'schedule' || github.event.inputs.create_backup_b2_primary == 'true')
        run: |
          echo "--- 停止服务并创建 Chroot 备份 ---"; sudo chroot ${{ env.CHROOT_DIR }} bash -c 'command -v pm2 && pm2 stop all' || true; pm2 stop python-app || true
          rclone config create ${{ env.B2_REMOTE_NAME }} b2 account "${{ env.B2_KEY_ID }}" key "${{ env.B2_APPLICATION_KEY }}"
          TIMESTAMP=$(date -u +'%Y%m%d-%H%M%S'); NEW_BACKUP_FILE="${{ env.BACKUP_PREFIX }}${TIMESTAMP}.tar.zst"; B1_FULL_PATH="${{ env.B2_REMOTE_NAME }}:${{ env.B2_BUCKET_NAME }}/${{ env.B2_REMOTE_PATH }}"
          EXCLUDE_OPTS="--exclude='./tmp' --exclude='./var/tmp' --exclude='./root/.cache' --exclude='./var/cache' --exclude='./var/log'"
          # [优化] 使用 zstd -19 以获得更高的压缩率和速度平衡
          sudo tar -c ${EXCLUDE_OPTS} -f - -C ${{ env.CHROOT_DIR }} . | zstd -T0 -19 -c | rclone rcat ${B1_FULL_PATH}/${NEW_BACKUP_FILE} ${{ env.RCLONE_FLAGS }}
          echo "✅ Chroot 备份上传成功。清理旧备份..."; rclone delete --min-age 24h ${B1_FULL_PATH}/ --include "${{ env.BACKUP_PREFIX }}*" 

      - name: 16. [新增] ⚡️ [备份] 创建 Android 目标容器备份至 B2-2
        if: success() && !cancelled() && (github.event_name == 'schedule' || github.event.inputs.create_backup_b2_secondary == 'true')
        run: |
          echo "--- 创建 Android AVD 备份 ---"
          rclone config create ${{ env.B2_REMOTE_NAME_2 }} b2 account "${{ env.B2_KEY_ID_2 }}" key "${{ env.B2_APPLICATION_KEY_2 }}"
          TIMESTAMP=$(date -u +'%Y%m%d-%H%M%S'); NEW_BACKUP_FILE="${{ env.BACKUP_PREFIX_2 }}${TIMESTAMP}.tar.zst"; B2_FULL_PATH="${{ env.B2_REMOTE_NAME_2 }}:${{ env.B2_BUCKET_NAME_2 }}/${{ env.B2_REMOTE_PATH_2 }}"
          # [优化] 积极排除安卓模拟器的缓存和临时文件以减小体积
          EXCLUDE_OPTS="--exclude='*.lock' --exclude='*.sock' --exclude='*cache*' --exclude='*.img.qcow2.dirty' --exclude='multiinstance.lock'"
          sudo tar -c ${EXCLUDE_OPTS} -f - -C ${{ env.ANDROID_AVD_DIR }} . | zstd -T0 -19 -c | rclone rcat ${B2_FULL_PATH}/${NEW_BACKUP_FILE} ${{ env.RCLONE_FLAGS }}
          echo "✅ Android AVD 备份上传成功。清理旧备份..."; rclone delete --min-age 24h ${B2_FULL_PATH}/ --include "${{ env.BACKUP_PREFIX_2 }}*"

      - name: 17. 清理运行器残留文件
        if: always()
        run: |
          echo "--- 开始清理运行器环境 ---"; sudo rm -rf ${{ env.CHROOT_DIR }} ${{ env.ANDROID_AVD_DIR }} chatgpt-on-wechat
          sudo npm cache clean --force || true; pip cache purge || true; echo "✅ 运行器清理完成。"