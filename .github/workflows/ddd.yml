# 工作流名称
name: CI with Persistent Environment (Unified, Parallelized & Debuggable)

# 工作流触发器
on:
  # 1. 手动触发 (workflow_dispatch)，可以自定义参数
  workflow_dispatch:
    inputs:
      use_cache:
        description: '是否启用恢复缓存 (Restore from backup?)'
        required: true
        type: boolean
        default: true
      run_startup_script:
        description: '是否自动执行启动脚本 (Auto-run startup script?)'
        required: true
        type: boolean
        default: true
      enable_ssh:
        description: '是否启用SSH手动调试 (Enable SSH for manual debug?)'
        required: true
        type: boolean
        default: false
      enable_napcat_tunnel:
        description: '是否启用Napcat内网穿透 (Enable Napcat Tunnel?)'
        required: true
        type: boolean
        default: false
  
  # 2. 定时触发 (schedule)，每隔约6小时自动运行
  schedule:
    # cron: '30 */6 * * *' 表示在每天的 00:30, 06:30, 12:30, 18:30 (UTC) 触发
    - cron: '30 */6 * * *'

# 并发控制：确保同一时间只有一个工作流实例运行，后续触发的会排队等待。
concurrency:
  group: ${{ github.workflow }}
  cancel-in-progress: false

# 全局环境变量
env:
  # === 核心配置 ===
  CHROOT_DIR: /mnt/minisys
  BACKUP_FILE: minisys_backup.tar.gz
  WEBDAV_REMOTE_PATH: "backup"
  RUN_DURATION_MINUTES: 300
  
  # === Rclone 性能优化参数 ===
  RCLONE_FLAGS: "--multi-thread-streams 4 --buffer-size 64M --fast-list --transfers 8 --progress"
  
  # === Secrets ===
  PAT: ${{ secrets.PAT }}
  LOOPHOLE_WEBDAV_USER: ${{ secrets.LOOPHOLE_WEBDAV_USER }}
  LOOPHOLE_WEBDAV_PASS: ${{ secrets.LOOPHOLE_WEBDAV_PASS }}
  LOOPHOLE_WEBDAV_HOSTNAME: ${{ secrets.LOOPHOLE_WEBDAV_HOSTNAME }}
  LOOPHOLE_NAPCAT_HOSTNAME: ${{ secrets.LOOPHOLE_NAPCAT_HOSTNAME }}
  WEBDAV_URL: ${{ secrets.WEBDAV_URL }}
  WEBDAV_USER: ${{ secrets.WEBDAV_USER }}
  WEBDAV_PASS: ${{ secrets.WEBDAV_PASS }}

# 作业定义 (单一统一作业)
jobs:
  build-and-run-all:
    name: "Run All Services (Chroot + Python App)"
    runs-on: ubuntu-latest
    steps:
      - name: 1. 检出代码 (Checkout)
        uses: actions/checkout@v4

      - name: 2. 最大化运行器磁盘空间
        run: |
          sudo rm -rf /usr/share/dotnet /opt/ghc /usr/local/share/boost "$AGENT_TOOLSDIRECTORY"

      - name: 3. 安装全部所需依赖
        run: sudo apt-get update && sudo apt-get install -y debootstrap rclone pigz

      - name: 4. 设置 Python 和 Node.js 环境
        uses: actions/setup-node@v3
        with: { node-version: '18' }
      - uses: actions/setup-python@v4
        with: { python-version: "3.9" }

      - name: 5. ⚡️ 并行执行：恢复 Chroot (后台) & 部署 Python 应用 (前台)
        id: restore_or_create
        run: |
          # --- 修复点 1：增强调试能力 ---
          # 创建一个临时日志文件来捕获后台任务的输出
          BG_LOG_FILE=$(mktemp)
          echo "📄 后台任务日志将记录在: ${BG_LOG_FILE}"

          # 启动后台任务：恢复或创建 Chroot 环境，并将所有输出重定向到日志文件
          (
            set -e # 确保后台任务中任何命令失败都会立即退出
            echo "--- [后台任务] 开始执行 Chroot 恢复/创建 ---"
            sudo mkdir -p ${{ env.CHROOT_DIR }}
            rclone config create webdav webdav url="${WEBDAV_URL}" vendor=other user="${WEBDAV_USER}" pass="${WEBDAV_PASS}"

            if [[ "${{ github.event.inputs.use_cache || 'true' }}" == "true" ]] && rclone lsf webdav:${WEBDAV_REMOTE_PATH}/${BACKUP_FILE} > /dev/null; then
              echo "--- [后台任务] ✅ 发现备份，开始多线程恢复..."
              rclone cat webdav:${WEBDAV_REMOTE_PATH}/${BACKUP_FILE} ${{ env.RCLONE_FLAGS }} | pigz -dc | sudo tar -xpf - -C ${{ env.CHROOT_DIR }}
            else
              echo "--- [后台任务] ⚠️ 未发现备份或禁用缓存，创建全新系统中..."
              sudo debootstrap --variant=minbase jammy ${{ env.CHROOT_DIR }} http://archive.ubuntu.com/ubuntu/
            fi
            echo "--- [后台任务] ✅ 任务成功完成 ---"
          ) > ${BG_LOG_FILE} 2>&1 &
          CHROOT_SETUP_PID=$!
          
          # --- 前台任务：利用后台恢复的时间，部署 Python 应用 ---
          echo "--- [前台任务] 后台正在恢复 Chroot，前台开始部署 Python 应用... ---"
          npm install -g pm2
          
          # --- 修复点 2：确保环境纯净 ---
          # 在克隆前删除旧目录，避免 pip 警告和潜在冲突
          echo "🧹 清理旧的 Python 应用目录..."
          rm -rf chatgpt-on-wechat
          
          git clone https://x-access-token:${{ env.PAT }}@github.com/Jyf0214/chatgpt-on-wechat.git || true
          cd chatgpt-on-wechat
          python -m pip install --upgrade pip
          # 由于目录已清理，无需担心文件已存在的问题
          pip install -r requirements-optional.txt --target ./ || true
          pip install -r requirements.txt --target ./ || true
          pm2 start "python3 app.py" --name "python-app"
          
          echo "--- [前台任务] ✅ Python 应用已启动。等待后台 Chroot 任务完成... ---"
          # --- 修复点 3：提升健壮性 ---
          # 等待后台任务。如果失败，打印日志并退出。
          if ! wait ${CHROOT_SETUP_PID}; then
            echo "================================================="
            echo "❌ ERROR: 后台 Chroot 设置任务失败！"
            echo "以下是后台任务的详细日志："
            echo "-------------------------------------------------"
            cat ${BG_LOG_FILE}
            echo "================================================="
            exit 1
          fi
          
          echo "--- ✅ 所有并行任务完成 ---"
          if [[ -f "${{ env.CHROOT_DIR }}/etc/debian_version" ]]; then echo "restored=true" >> $GITHUB_OUTPUT; else echo "restored=false" >> $GITHUB_OUTPUT; fi

      # 后续步骤保持不变，这里为了简洁省略了它们的完整内容
      - name: 6. 挂载虚拟文件系统到 Chroot 环境
        run: |
          MNT_DIR=${{ env.CHROOT_DIR }}
          sudo mount -t proc proc "${MNT_DIR}/proc"; sudo mount -o bind /dev "${MNT_DIR}/dev"; sudo mount -o bind /dev/pts "${MNT_DIR}/dev/pts"; sudo mount -o bind /sys "${MNT_DIR}/sys"

      - name: 7. 清理 Chroot 环境空间
        if: steps.restore_or_create.outputs.restored == 'true'
        run: |
          sudo chroot ${{ env.CHROOT_DIR }} /bin/bash -c "apt-get clean -y > /dev/null 2>&1; rm -rf /var/lib/apt/lists/* /tmp/* /var/tmp/* /root/.cache"

      - name: 8A. [自动化路径] 启动 Chroot 内的服务
        if: steps.restore_or_create.outputs.restored == 'true' && (github.event.inputs.run_startup_script || 'true') == 'true'
        run: |
          echo "✅ 进入自动化运行模式 (Chroot 服务)..."
          sudo bash -c 'cat > ${{ env.CHROOT_DIR }}/tmp/startup.sh' << EOF
          #!/bin/bash
          export PATH=/usr/local/sbin:/usr/local/bin:/usr/sbin:/usr/bin:/sbin:/bin:/root/node_modules/.bin
          export ENABLE_NAPCAT_TUNNEL='${{ github.event.inputs.enable_napcat_tunnel || 'false' }}'
          export LOOPHOLE_WEBDAV_USER='${{ env.LOOPHOLE_WEBDAV_USER }}'
          export LOOPHOLE_WEBDAV_PASS='${{ env.LOOPHOLE_WEBDAV_PASS }}'
          export LOOPHOLE_WEBDAV_HOSTNAME='${{ env.LOOPHOLE_WEBDAV_HOSTNAME }}'
          export LOOPHOLE_NAPCAT_HOSTNAME='${{ env.LOOPHOLE_NAPCAT_HOSTNAME }}'
          HOME_DIR="/root"
          
          echo "--- [Chroot 环境内] 开始执行自动化启动任务 ---"
          if ! command -v pm2 &> /dev/null; then echo "  -> PM2 未安装..."; npm install -g pm2; fi
          pm2 flush
          find \${HOME_DIR} -name "*.log" -type f -delete
          if [ -f "\${HOME_DIR}/launcher.sh" ]; then cd "\${HOME_DIR}"; pm2 start ./launcher.sh --name "launcher" --output /dev/null --error /dev/null || pm2 restart "launcher"; fi
          if command -v redis-server &> /dev/null; then redis-server --daemonize yes; fi
          YUNZAI_DIR="\${HOME_DIR}/Yunzai"; if [ -d "\${YUNZAI_DIR}" ]; then cd "\${YUNZAI_DIR}"; pm2 start app.js --name "yunzai-app" || pm2 restart "yunzai-app"; fi
          LOOPHOLE_APP="\${HOME_DIR}/loophole/loophole"
          if [ -f "\${LOOPHOLE_APP}" ]; then
              cd "\${HOME_DIR}/loophole"
              pm2 start ./loophole --name "loophole-webdav" -- webdav ~ -u "\${LOOPHOLE_WEBDAV_USER}" -p "\${LOOPHOLE_WEBDAV_PASS}" --hostname "\${LOOPHOLE_WEBDAV_HOSTNAME}"
              if [[ "\$ENABLE_NAPCAT_TUNNEL" == "true" ]]; then
                  echo "  -> 启用 Napcat 隧道...";
                  pm2 start ./loophole --name "loophole-http" -- http 6099 --hostname "\${LOOPHOLE_NAPCAT_HOSTNAME}"
              fi
          fi
          OPENLIST_APP="\${HOME_DIR}/openlist"; if [ -f "\${OPENLIST_APP}" ]; then cd "\${HOME_DIR}"; pm2 start ./openlist --name "openlist-server" -- server; fi
          FRPC_APP="\${HOME_DIR}/ChmlFrp/frpc"; if [ -f "\${FRPC_APP}" ]; then cd "\${HOME_DIR}/ChmlFrp"; pm2 start ./frpc --name "chml-frp" -- -c frpc.ini; fi
          
          echo "--- [Chroot 环境内] 任务派发完毕 ---"; pm2 save; pm2 ls
          EOF
          
          sudo chmod +x ${{ env.CHROOT_DIR }}/tmp/startup.sh
          sudo chroot ${{ env.CHROOT_DIR }} /tmp/startup.sh
          echo "🚀 所有服务已启动，工作流将在此暂停 ${{ env.RUN_DURATION_MINUTES }} 分钟..."
          sleep $(( ${{ env.RUN_DURATION_MINUTES }} * 60 ))
          echo "⏳ 规定运行时间已到。"

      - name: 8B. [手动调试路径] 启用 Upterm SSH 会话
        if: github.event.inputs.enable_ssh == 'true'
        uses: lhotari/action-upterm@v1
        with: { limit-access-to-actor: true, wait-timeout-minutes: 100 }

      - name: 9. 卸载 Chroot 环境的虚拟文件系统
        if: always()
        run: |
          MNT_DIR=${{ env.CHROOT_DIR }}
          sudo umount -l "${MNT_DIR}/dev/pts" || true; sudo umount -l "${MNT_DIR}/dev" || true; sudo umount -l "${MNT_DIR}/proc" || true; sudo umount -l "${MNT_DIR}/sys" || true

      - name: 10. ⚡️ 高效流式备份 Chroot 系统
        if: success() && !cancelled() && (github.event.inputs.use_cache || 'true') == 'true'
        run: |
          sudo chroot ${{ env.CHROOT_DIR }} bash -c 'command -v pm2 && pm2 stop all' || true
          pm2 stop python-app || true
          rclone config create webdav webdav url="${WEBDAV_URL}" vendor=other user="${WEBDAV_USER}" pass="${WEBDAV_PASS}"
          sudo tar -cpf - -C ${{ env.CHROOT_DIR }} . | pigz -c | rclone rcat webdav:${WEBDAV_REMOTE_PATH}/${BACKUP_FILE} ${{ env.RCLONE_FLAGS }}