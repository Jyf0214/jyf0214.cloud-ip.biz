# 工作流名称
name: CI with Persistent Environment (Versioned Backups - Complete)

# 工作流触发器
on:
  workflow_dispatch:
    inputs:
      use_cache: { description: '是否启用恢复缓存?', required: true, type: boolean, default: true }
      run_startup_script: { description: '是否自动执行启动脚本?', required: true, type: boolean, default: true }
      enable_ssh: { description: '是否启用SSH手动调试?', required: true, type: boolean, default: false }
      enable_napcat_tunnel: { description: '是否启用Napcat内网穿透?', required: true, type: boolean, default: false }
  schedule:
    - cron: '30 */6 * * *'

# 并发控制
concurrency:
  group: ${{ github.workflow }}
  cancel-in-progress: false

# 全局环境变量
env:
  CHROOT_DIR: /mnt/minisys
  OLD_BACKUP_FILE: minisys_backup.tar.gz
  BACKUP_PREFIX: minisys_backup_
  WEBDAV_REMOTE_PATH: "backup"
  RUN_DURATION_MINUTES: 300
  RCLONE_FLAGS: "--multi-thread-streams 4 --buffer-size 64M --fast-list --transfers 8 --progress"
  # Secrets
  PAT: ${{ secrets.PAT }}
  LOOPHOLE_WEBDAV_USER: ${{ secrets.LOOPHOLE_WEBDAV_USER }}
  LOOPHOLE_WEBDAV_PASS: ${{ secrets.LOOPHOLE_WEBDAV_PASS }}
  LOOPHOLE_WEBDAV_HOSTNAME: ${{ secrets.LOOPHOLE_WEBDAV_HOSTNAME }}
  LOOPHOLE_NAPCAT_HOSTNAME: ${{ secrets.LOOPHOLE_NAPCAT_HOSTNAME }}
  WEBDAV_URL: ${{ secrets.WEBDAV_URL }}
  WEBDAV_USER: ${{ secrets.WEBDAV_USER }}
  WEBDAV_PASS: ${{ secrets.WEBDAV_PASS }}
  NAPCATUSER: ${{ secrets.NAPCATUSER }}
  NAPCATPASS: ${{ secrets.NAPCATPASS }}

jobs:
  build-and-run-all:
    name: "Run All Services (Versioned Backups)"
    runs-on: ubuntu-latest
    steps:
      - name: 1. 检出代码
        uses: actions/checkout@v4

      - name: 2. 最大化运行器磁盘空间
        run: sudo rm -rf /usr/share/dotnet /opt/ghc /usr/local/share/boost "$AGENT_TOOLSDIRECTORY"

      - name: 3. 安装全部所需依赖
        run: sudo apt-get update && sudo apt-get install -y debootstrap rclone pigz jq

      - name: 4. 设置 Python 和 Node.js 环境
        uses: actions/setup-node@v3
        with: { node-version: '18' }
      - uses: actions/setup-python@v4
        with: { python-version: "3.9" }

      - name: 5. ⚡️ 并行执行：智能恢复 Chroot (后台) & 部署 Python 应用 (前台)
        id: restore_or_create
        run: |
          BG_LOG_FILE=$(mktemp)
          echo "📄 后台任务日志将记录在: ${BG_LOG_FILE}"

          # 启动后台任务：智能恢复或创建 Chroot 环境
          (
            set -eo pipefail
            echo "--- [后台任务] 开始执行 Chroot 智能恢复/创建 ---"
            sudo mkdir -p ${{ env.CHROOT_DIR }}
            rclone config create webdav webdav url="${WEBDAV_URL}" vendor=other user="${WEBDAV_USER}" pass="${WEBDAV_PASS}"

            # --- [FIXED] 版本化恢复逻辑 ---
            # 修复了路径拼接问题，确保无论是版本化备份还是旧版备份，都能构造出正确的完整远程路径
            LATEST_BACKUP_PATH=""
            echo "1. 正在查找最新的版本化备份..."
            LATEST_VERSIONED_FILENAME=$(rclone lsjson webdav:${{ env.WEBDAV_REMOTE_PATH }}/ | \
                                      jq -r '[.[] | select(.Name | startswith("${{ env.BACKUP_PREFIX }}"))] | sort_by(.ModTime) | .[-1].Name' 2>/dev/null)

            if [[ -n "$LATEST_VERSIONED_FILENAME" && "$LATEST_VERSIONED_FILENAME" != "null" ]]; then
                echo "   -> 发现最新版本化备份: ${LATEST_VERSIONED_FILENAME}"
                LATEST_BACKUP_PATH="${{ env.WEBDAV_REMOTE_PATH }}/${LATEST_VERSIONED_FILENAME}"
            else
                echo "   -> 未找到版本化备份。正在查找旧版备份 (${{ env.OLD_BACKUP_FILE }})..."
                if rclone lsf webdav:${{ env.WEBDAV_REMOTE_PATH }}/${{ env.OLD_BACKUP_FILE }} > /dev/null 2>&1; then
                    echo "   -> 发现旧版备份。"
                    LATEST_BACKUP_PATH="${{ env.WEBDAV_REMOTE_PATH }}/${{ env.OLD_BACKUP_FILE }}"
                fi
            fi

            if [[ -n "$LATEST_BACKUP_PATH" ]]; then
              echo "--- [后台任务] ✅ 发现可用备份: ${LATEST_BACKUP_PATH}。开始下载..."
              LOCAL_BACKUP_PATH="/tmp/backup.tar.gz"
              rclone copyto "webdav:${LATEST_BACKUP_PATH}" ${LOCAL_BACKUP_PATH} ${{ env.RCLONE_FLAGS }}
              echo "--- [后台任务] ✅ 下载完成。开始从本地文件解压..."
              pigz -dc ${LOCAL_BACKUP_PATH} | sudo tar -xpf - -C ${{ env.CHROOT_DIR }}
              rm -f ${LOCAL_BACKUP_PATH}
            else
              echo "--- [后台任务] ⚠️ 所有类型的备份均未找到。将创建全新系统..."
              sudo debootstrap --variant=minbase jammy ${{ env.CHROOT_DIR }} http://archive.ubuntu.com/ubuntu/
            fi
            echo "--- [后台任务] ✅ 任务成功完成 ---"
          ) > ${BG_LOG_FILE} 2>&1 &
          CHROOT_SETUP_PID=$!
          
          # 前台任务：部署 Python 应用
          echo "--- [前台任务] 后台正在恢复 Chroot，前台开始部署 Python 应用... ---"
          npm install -g pm2; rm -rf chatgpt-on-wechat
          git clone https://x-access-token:${{ env.PAT }}@github.com/Jyf0214/chatgpt-on-wechat.git || true
          cd chatgpt-on-wechat
          python -m pip install --upgrade pip
          pip install -r requirements-optional.txt --target ./ || true
          pip install -r requirements.txt --target ./ || true
          pm2 start "python3 app.py" --name "python-app"
          
          echo "--- [前台任务] ✅ Python 应用已启动。等待后台 Chroot 任务完成... ---"
          if ! wait ${CHROOT_SETUP_PID}; then
            echo "=================================================" >&2; echo "❌ ERROR: 后台 Chroot 设置任务失败！" >&2; echo "以下是后台任务的详细日志：" >&2; echo "-------------------------------------------------" >&2; cat ${BG_LOG_FILE} >&2; echo "=================================================" >&2; exit 1
          fi
          
          echo "--- ✅ 所有并行任务完成 ---"
          if [[ -f "${{ env.CHROOT_DIR }}/etc/debian_version" ]]; then echo "restored=true" >> $GITHUB_OUTPUT; else echo "restored=false" >> $GITHUB_OUTPUT; fi

      - name: 6. 挂载虚拟文件系统
        run: |
          MNT_DIR=${{ env.CHROOT_DIR }}
          sudo mount -t proc proc "${MNT_DIR}/proc"; sudo mount -o bind /dev "${MNT_DIR}/dev"; sudo mount -o bind /dev/pts "${MNT_DIR}/dev/pts"; sudo mount -o bind /sys "${MNT_DIR}/sys"

      - name: 7. 清理 Chroot 环境空间
        if: steps.restore_or_create.outputs.restored == 'true'
        run: sudo chroot ${{ env.CHROOT_DIR }} /bin/bash -c "apt-get clean -y > /dev/null 2>&1; rm -rf /var/lib/apt/lists/* /tmp/* /var/tmp/* /root/.cache"

      - name: 8A. [自动化路径] 启动服务
        if: steps.restore_or_create.outputs.restored == 'true' && (github.event.inputs.run_startup_script || 'true') == 'true'
        run: |
          echo "✅ 进入自动化运行模式 (Chroot 服务)..."
          # 使用 tee 和 here-document 创建启动脚本，确保变量正确注入
          sudo tee ${{ env.CHROOT_DIR }}/tmp/startup.sh > /dev/null << EOF
          #!/bin/bash
          set -e

          # 从外部注入的环境变量
          export ENABLE_NAPCAT_TUNNEL='${{ github.event.inputs.enable_napcat_tunnel || 'false' }}'
          export LOOPHOLE_WEBDAV_USER='${{ env.LOOPHOLE_WEBDAV_USER }}'
          export LOOPHOLE_WEBDAV_PASS='${{ env.LOOPHOLE_WEBDAV_PASS }}'
          export LOOPHOLE_WEBDAV_HOSTNAME='${{ env.LOOPHOLE_WEBDAV_HOSTNAME }}'
          export LOOPHOLE_NAPCAT_HOSTNAME='${{ env.LOOPHOLE_NAPCAT_HOSTNAME }}'
          export NAPCATUSER='${{ env.NAPCATUSER }}'
          export NAPCATPASS='${{ env.NAPCATPASS }}'
          
          # 内部使用的变量
          export PATH=/usr/local/sbin:/usr/local/bin:/usr/sbin:/usr/bin:/sbin:/bin:/root/node_modules/.bin
          HOME_DIR="/root"

          echo "--- [Chroot 环境内] 开始执行自动化启动任务 ---"
          
          if ! command -v pm2 &> /dev/null; then
              echo "  -> PM2 未安装，将使用 npm 全局安装..."
              npm install -g pm2
          fi
          
          echo "1. 正在清理旧的日志文件..."
          pm2 flush
          find \${HOME_DIR} -name "*.log" -type f -delete
          echo "  -> 日志已清理。"

          echo "2. 正在尝试使用 PM2 启动 launcher.sh..."
          if [ -f "\${HOME_DIR}/launcher.sh" ]; then
              cd "\${HOME_DIR}"
              pm2 start ./launcher.sh --name "launcher" --output /dev/null --error /dev/null || pm2 restart "launcher"
          else
              echo "  -> 警告: \${HOME_DIR}/launcher.sh 未找到，跳过。"
          fi
          
          echo "3. 正在启动 Redis 服务器..."
          if command -v redis-server &> /dev/null; then
              redis-server --daemonize yes
          else
              echo "  -> 警告: redis-server 命令未找到，跳过。"
          fi
          
          echo "4. 正在尝试启动 Yunzai-Bot..."
          YUNZAI_DIR="\${HOME_DIR}/Yunzai"
          if [ -d "\${YUNZAI_DIR}" ]; then
              cd "\${YUNZAI_DIR}"
              pm2 start app.js --name "yunzai-app" || pm2 restart "yunzai-app"
          else
              echo "  -> 警告: 目录 \${YUNZAI_DIR} 未找到，跳过。"
          fi

          echo "5. 正在启动 loophole 服务..."
          LOOPHOLE_APP="\${HOME_DIR}/loophole/loophole"
          if [ -f "\${LOOPHOLE_APP}" ]; then
              cd "\${HOME_DIR}/loophole"
              # 启动 loophole webdav (总是启动)
              pm2 start ./loophole --name "loophole-webdav" -- webdav ~ -u "\${LOOPHOLE_WEBDAV_USER}" -p "\${LOOPHOLE_WEBDAV_PASS}" --hostname "\${LOOPHOLE_WEBDAV_HOSTNAME}"
              
              # 根据开关，决定是否启动 Napcat 隧道
              if [[ "\$ENABLE_NAPCAT_TUNNEL" == "true" ]]; then
                  echo "  -> 用户已启用 Napcat 隧道，正在启动 loophole-http 服务...";
                  pm2 start ./loophole --name "loophole-http" -- http 6099 --hostname "${LOOPHOLE_NAPCAT_HOSTNAME}" --basic-auth-username "${NAPCATUSER}" --basic-auth-password "${NAPCATPASS}"
              else
                  echo "  -> Napcat 隧道未启用，跳过 loophole-http 服务。"
              fi
          else
              echo "  -> 警告: \${LOOPHOLE_APP} 未找到，跳过。"
          fi

          echo "6. 正在尝试启动 openlist server..."
          OPENLIST_APP="\${HOME_DIR}/openlist"
          if [ -f "\${OPENLIST_APP}" ]; then
              cd "\${HOME_DIR}"
              pm2 start ./openlist --name "openlist-server" -- server
          else
              echo "  -> 警告: \${OPENLIST_APP} 未找到，跳过。"
          fi

          echo "7. 正在尝试启动 ChmlFrp 服务..."
          FRPC_APP="\${HOME_DIR}/ChmlFrp/frpc"
          if [ -f "\${FRPC_APP}" ]; then
              cd "\${HOME_DIR}/ChmlFrp"
              pm2 start ./frpc --name "chml-frp" -- -c frpc.ini
          else
              echo "  -> 警告: \${FRPC_APP} 未找到，跳过。"
          fi
          
          echo "--- [Chroot 环境内] 所有启动任务已派发，正在保存PM2进程列表 ---"
          pm2 save
          pm2 ls
          EOF
          
          echo "赋予启动脚本执行权限并执行..."
          sudo chmod +x ${{ env.CHROOT_DIR }}/tmp/startup.sh
          sudo chroot ${{ env.CHROOT_DIR }} /tmp/startup.sh

          echo "🚀 所有服务已启动，工作流将在此暂停 ${{ env.RUN_DURATION_MINUTES }} 分钟..."
          sleep $(( ${{ env.RUN_DURATION_MINUTES }} * 60 ))
          echo "⏳ 规定运行时间已到。"

      - name: 8B. [手动调试路径] 启用 SSH
        if: github.event.inputs.enable_ssh == 'true'
        uses: lhotari/action-upterm@v1
        with: { limit-access-to-actor: true, wait-timeout-minutes: 100 }

      - name: 9. 卸载虚拟文件系统
        if: always()
        run: sudo umount -l "${{ env.CHROOT_DIR }}/dev/pts" || true; sudo umount -l "${{ env.CHROOT_DIR }}/dev" || true; sudo umount -l "${{ env.CHROOT_DIR }}/proc" || true; sudo umount -l "${{ env.CHROOT_DIR }}/sys" || true

      - name: 10. ⚡️ 创建版本化备份并清理旧版本
        if: success() && !cancelled() && (github.event.inputs.use_cache || 'true') == 'true'
        run: |
          echo "--- 1. 创建新的版本化备份 ---"
          sudo chroot ${{ env.CHROOT_DIR }} bash -c 'command -v pm2 && pm2 stop all' || true
          pm2 stop python-app || true
          rclone config create webdav webdav url="${WEBDAV_URL}" vendor=other user="${WEBDAV_USER}" pass="${WEBDAV_PASS}"
          TIMESTAMP=$(date -u +'%Y%m%d-%H%M%S')
          NEW_BACKUP_FILE="${{ env.BACKUP_PREFIX }}${TIMESTAMP}.tar.gz"
          echo "新备份文件名: ${NEW_BACKUP_FILE}"
          sudo tar -cpf - -C ${{ env.CHROOT_DIR }} . | pigz -c | rclone rcat webdav:${{ env.WEBDAV_REMOTE_PATH }}/${NEW_BACKUP_FILE} ${{ env.RCLONE_FLAGS }}
          echo "✅ 新备份上传成功。"

          echo "--- 2. 清理旧备份 (保留3个最新) ---"
          # [FIXED] 修复了删除文件时的路径问题
          # `jq`返回的是文件名，而不是完整路径，因此在调用 `rclone deletefile` 时需要手动拼接
          FILES_TO_DELETE=$(rclone lsjson webdav:${{ env.WEBDAV_REMOTE_PATH }}/ | \
                              jq -r '[.[] | select(.Name | test("minisys_backup.*\\.tar\\.gz"))] | sort_by(.ModTime) | .[:-3][] | .Name' 2>/dev/null)
          
          if [[ -n "$FILES_TO_DELETE" && "$FILES_TO_DELETE" != "null" ]]; then
            echo "将要删除以下旧备份:"; echo "$FILES_TO_DELETE"
            for file_name in $FILES_TO_DELETE; do
              FULL_REMOTE_PATH="${{ env.WEBDAV_REMOTE_PATH }}/${file_name}"
              echo "Deleting: $FULL_REMOTE_PATH"; rclone deletefile "webdav:${FULL_REMOTE_PATH}"
            done
            echo "✅ 旧备份清理完毕。"
          else
            echo "无需清理，备份数量小于或等于3。"
          fi