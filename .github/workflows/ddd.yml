name: CI with Persistent Environment (v7.5 - AVD Emulator + B2 Backup)

on:
  workflow_dispatch:
    inputs:
      backup_mode:
        description: '✅ [核心] 选择在结束时创建的环境备份模式'
        required: true
        type: choice
        default: 'none'
        options:
          - 'none'
          - 'chroot'
          - 'android'
          - 'all'
      run_startup_script: { description: '🚀 [核心] 是否自动执行Chroot内的服务启动脚本?', required: true, type: boolean, default: true }
      enable_ssh: { description: '🐞 [调试] 是否启用SSH手动调试 (将暂停自动化) ?', required: true, type: boolean, default: false }
      ssh_timeout_minutes: { description: '⏳ SSH会话超时时间（分钟）', required: false, type: number, default: 350 }
      run_yunzai: { description: '  - 是否启动 Yunzai-Bot 服务? (包含 launcher)', type: boolean, default: true }
      run_loophole_webdav: { description: '  - 是否启动 Loophole WebDAV 隧道?', type: boolean, default: true }
      enable_napcat_tunnel: { description: '  - (Loophole) 是否额外启用 Napcat 内网穿透?', type: boolean, default: false }
      run_chmlfrp: { description: '  - 是否启动 ChmlFrp 服务? (包含 openlist)', type: boolean, default: true }
      run_android_container: { description: '🚀 是否启动 Android 模拟器服务?', required: true, type: boolean, default: true }
      android_runtime_minutes: { description: '⏳ Android 模拟器运行时间（分钟）', required: false, type: number, default: 300 }
  schedule:
    - cron: '30 */6 * * *'
concurrency:
  group: ${{ github.workflow }}
  cancel-in-progress: false
env:
  # Chroot & General
  CHROOT_DIR: /mnt/minisys
  BACKUP_PREFIX: minisys_backup_
  B2_REMOTE_NAME: "b2_storage"
  B2_REMOTE_PATH: "backup"
  RCLONE_FLAGS: "--multi-thread-streams 4 --buffer-size 64M --fast-list --transfers 8 --progress"
  PAT: ${{ secrets.PAT }}

  # Secrets
  LOOPHOLE_WEBDAV_USER: ${{ secrets.LOOPHOLE_WEBDAV_USER }}
  LOOPHOLE_WEBDAV_PASS: ${{ secrets.LOOPHOLE_WEBDAV_PASS }}
  LOOPHOLE_WEBDAV_HOSTNAME: ${{ secrets.LOOPHOLE_WEBDAV_HOSTNAME }}
  LOOPHOLE_NAPCAT_HOSTNAME: ${{ secrets.LOOPHOLE_NAPCAT_HOSTNAME }}
  NAPCATUSER: ${{ secrets.NAPCATUSER }}
  NAPCATPASS: ${{ secrets.NAPCATPASS }}
  B2_KEY_ID: ${{ secrets.B2_KEY_ID }}
  B2_APPLICATION_KEY: ${{ secrets.B2_APPLICATION_KEY }}
  B2_BUCKET_NAME: ${{ secrets.B2_BUCKET_NAME }}
  B2_DOWNLOAD_URL: ${{ secrets.B2_DOWNLOAD_URL }}
  
  # Android AVD
  ANDROID_AVD_BACKUP_PREFIX: android_avd_backup_
  B2_REMOTE_NAME_2: "b2_storage_2"
  B2_REMOTE_PATH_2: "backup/android"
  B2_KEY_ID_2: ${{ secrets.B2_KEY_ID_2 }}
  B2_APPLICATION_KEY_2: ${{ secrets.B2_APPLICATION_KEY_2 }}
  B2_BUCKET_NAME_2: ${{ secrets.B2_BUCKET_NAME_2 }}
  B2_DOWNLOAD_URL_2: ${{ secrets.B2_DOWNLOAD_URL_2 }}

jobs:
  build-and-run-all:
    name: "Run All Services (v7.5 - AVD Emulator + B2 Backup)"
    runs-on: ubuntu-latest
    steps:
      - name: 1. 检出工作流代码
        uses: actions/checkout@v4

      - name: 2. 最大化运行器磁盘空间
        run: |
          sudo rm -rf /usr/share/dotnet /opt/ghc /usr/local/share/boost "$AGENT_TOOLSDIRECTORY"
          sudo apt-get autoremove -y && sudo apt-get autoclean -y
          sudo rm -rf /var/lib/apt/lists/* /var/cache/apt/archives/*
          sudo docker system prune -a -f || true
          echo "✅ 磁盘空间优化完成。当前可用空间: $(df -h / | tail -1 | awk '{print $4}')"

      - name: 3. 安装基础系统依赖
        run: |
          echo "--- 更新 APT 并安装基础依赖 ---"
          sudo apt-get update
          sudo apt-get install -y debootstrap rclone pigz zstd jq

      - name: 4. 设置 Python 环境
        uses: actions/setup-python@v4
        with: { python-version: "3.9" }

      - name: 5. 克隆 Python 应用仓库
        run: git clone https://x-access-token:${{ env.PAT }}@github.com/Jyf0214/chatgpt-on-wechat.git

      - name: 6. 缓存 Python 依赖 (Pip)
        id: cache-pip
        uses: actions/cache@v4
        with:
          path: ./chatgpt-on-wechat/lib
          key: ${{ runner.os }}-pip-deps-${{ hashFiles('./chatgpt-on-wechat/requirements.txt', './chatgpt-on-wechat/requirements-optional.txt') }}

      - name: 7. ⚡️ [健壮模式] 准备 Chroot 环境
        id: prepare_chroot
        run: |
          retry() {
            local retries=$1; shift; local count=0
            until "$@"; do
              exit_code=$?; count=$((count + 1))
              if [ $count -lt "$retries" ]; then
                echo "命令失败 (退出码: $exit_code), 重试中 ($count/$retries)..."; sleep 5
              else
                echo "命令在 $retries 次重试后仍然失败。"; return $exit_code
              fi
            done
            return 0
          }
          echo "--- 下载 Chroot 备份 (如果存在) ---"
          rclone config create ${{ env.B2_REMOTE_NAME }} b2 account "${{ env.B2_KEY_ID }}" key "${{ env.B2_APPLICATION_KEY }}"
          B2_FULL_PATH="${{ env.B2_REMOTE_NAME }}:${{ env.B2_BUCKET_NAME }}/${{ env.B2_REMOTE_PATH }}"
          LATEST_BACKUP_FILENAME=$(rclone lsjson ${B2_FULL_PATH}/ | jq -r '[.[] | select(.Name | test("minisys_backup_.*\\.tar\\.(zst|gz)$"))] | sort_by(.ModTime) | .[-1].Name' 2>/dev/null)
          if [[ -n "$LATEST_BACKUP_FILENAME" && "$LATEST_BACKUP_FILENAME" != "null" ]]; then
            echo "   -> 发现备份: ${LATEST_BACKUP_FILENAME}. 下载中..."
            retry 3 rclone copyto "${B2_FULL_PATH}/${LATEST_BACKUP_FILENAME}" "/tmp/backup.archive" ${{ env.RCLONE_FLAGS }}
            echo "$LATEST_BACKUP_FILENAME" > /tmp/chroot_backup_info
          fi
          echo "--- 解压/创建 Chroot 环境 ---"
          sudo mkdir -p ${{ env.CHROOT_DIR }}
          if [ -f "/tmp/backup.archive" ]; then
            echo "   -> 解压 Chroot 备份..."
            LATEST_BACKUP_FILENAME=$(cat /tmp/chroot_backup_info)
            if [[ "${LATEST_BACKUP_FILENAME}" == *.zst ]]; then unzstd -c /tmp/backup.archive | sudo tar -xpf - -C ${{ env.CHROOT_DIR }}; else pigz -dc /tmp/backup.archive | sudo tar -xpf - -C ${{ env.CHROOT_DIR }}; fi
          else
            echo "   -> 未找到备份. 创建全新系统..."
            sudo debootstrap --variant=minbase jammy ${{ env.CHROOT_DIR }} http://archive.ubuntu.com/ubuntu/
          fi
          rm -f /tmp/backup.archive

      - name: 8. 安装依赖并启动 Python 应用
        run: |
          nohup bash -c 'cd chatgpt-on-wechat && python -m pip install -r requirements.txt --target ./lib &> /dev/null && export PYTHONPATH=$(pwd)/lib && pm2 start "python3 app.py" --name "python-app"' > install.log 2>&1 &

      - name: 9. 挂载虚拟文件系统
        run: |
          MNT_DIR=${{ env.CHROOT_DIR }}; sudo mount -t proc proc "${MNT_DIR}/proc"; sudo mount -o bind /dev "${MNT_DIR}/dev"; sudo mount -o bind /dev/pts "${MNT_DIR}/dev/pts"; sudo mount -o bind /sys "${MNT_DIR}/sys"

      - name: 10. [增强] Chroot 环境准备 (NodeJS & OpenList)
        run: |
          echo "--- 安装 NodeJS 和 PM2 到 Chroot 环境 ---"
          sudo chroot ${{ env.CHROOT_DIR }} /bin/bash -c "apt-get update && apt-get install -y curl && curl -fsSL https://deb.nodesource.com/setup_18.x | bash - && apt-get install -y nodejs && npm install -g pm2"
          echo "--- 自动更新 Chroot 内的 OpenList ---"
          sudo tee ${{ env.CHROOT_DIR }}/tmp/update_openlist.sh > /dev/null << 'EOF'
          #!/bin/bash
          set -e; cd /root
          apt-get update >/dev/null && apt-get install -y curl jq wget >/dev/null
          LATEST_TAG=$(curl -s https://api.github.com/repos/OpenListTeam/OpenList/releases/latest | jq -r '.tag_name')
          if [[ -z "$LATEST_TAG" || "$LATEST_TAG" == "null" ]]; then exit 1; fi
          TARBALL="openlist-linux-amd64.tar.gz"; DOWNLOAD_URL="https://github.com/OpenListTeam/OpenList/releases/download/${LATEST_TAG}/${TARBALL}"
          wget -qO "${TARBALL}" "${DOWNLOAD_URL}"; TMP_DIR=$(mktemp -d); tar -zxf "${TARBALL}" -C "${TMP_DIR}"
          mv -f "${TMP_DIR}/openlist" ./openlist; chmod +x ./openlist; rm -f "${TARBALL}"; trap "rm -rf ${TMP_DIR}" EXIT
          echo "✅ OpenList 已成功更新至 ${LATEST_TAG}"
          EOF
          sudo chmod +x ${{ env.CHROOT_DIR }}/tmp/update_openlist.sh && sudo chroot ${{ env.CHROOT_DIR }} /tmp/update_openlist.sh

      - name: 11A. 启动 Chroot 内服务
        if: github.event_name == 'schedule' || github.event.inputs.run_startup_script == 'true'
        env:
          RUNTIME_MINUTES: ${{ (github.event.inputs.backup_mode == 'chroot' || github.event.inputs.backup_mode == 'all') && 90 || 350 }}
        run: |
          echo "✅ 准备启动 Chroot 内服务..."; sudo tee ${{ env.CHROOT_DIR }}/tmp/startup.sh > /dev/null << 'EOF'
          #!/bin/bash
          set -e
          export RUN_YUNZAI='${{ github.event.inputs.run_yunzai || (github.event_name == 'schedule' && 'true') }}'; export RUN_LOOPHOLE_WEBDAV='${{ github.event.inputs.run_loophole_webdav || (github.event_name == 'schedule' && 'true') }}'; export RUN_CHMLFRP='${{ github.event.inputs.run_chmlfrp || (github.event_name == 'schedule' && 'true') }}'; export ENABLE_NAPCAT_TUNNEL='${{ github.event.inputs.enable_napcat_tunnel || 'false' }}'
          export LOOPHOLE_WEBDAV_USER='${{ env.LOOPHOLE_WEBDAV_USER }}'; export LOOPHOLE_WEBDAV_PASS='${{ env.LOOPHOLE_WEBDAV_PASS }}'; export LOOPHOLE_WEBDAV_HOSTNAME='${{ env.LOOPHOLE_WEBDAV_HOSTNAME }}'; export LOOPHOLE_NAPCAT_HOSTNAME='${{ env.LOOPHOLE_NAPCAT_HOSTNAME }}'; export NAPCATUSER='${{ env.NAPCATUSER }}'; export NAPCATPASS='${{ env.NAPCATPASS }}'
          export PATH=/usr/local/sbin:/usr/local/bin:/usr/sbin:/usr/bin:/sbin:/bin:/root/node_modules/.bin; HOME_DIR="/root"
          pm2 flush && find ${HOME_DIR} -name "*.log" -type f -delete
          command -v redis-server &> /dev/null && redis-server --daemonize yes || echo "  -> 警告: redis-server 未找到。"
          if [[ "$RUN_YUNZAI" == "true" ]]; then (cd "${HOME_DIR}" && pm2 start ./launcher.sh --name "launcher"); (cd "${HOME_DIR}/Yunzai" && pm2 start app.js --name "yunzai-app"); fi
          if [[ "$RUN_LOOPHOLE_WEBDAV" == "true" ]]; then (cd "${HOME_DIR}/loophole"; pm2 start ./loophole --name "loophole-webdav" -- webdav ~ -u "${LOOPHOLE_WEBDAV_USER}" -p "${LOOPHOLE_WEBDAV_PASS}" --hostname "${LOOPHOLE_WEBDAV_HOSTNAME}"); if [[ "$ENABLE_NAPCAT_TUNNEL" == "true" ]]; then (cd "${HOME_DIR}/loophole"; pm2 start ./loophole --name "loophole-http" -- http 6099 --hostname "${LOOPHOLE_NAPCAT_HOSTNAME}" --basic-auth-username "${NAPCATUSER}" --basic-auth-password "${NAPCATPASS}"); fi; fi
          if [[ "$RUN_CHMLFRP" == "true" ]]; then (cd "${HOME_DIR}" && pm2 start ./openlist --name "openlist-server" -- server); (cd "${HOME_DIR}/ChmlFrp" && pm2 start ./frpc --name "chml-frp" -- -c frpc.ini); fi
          pm2 save && pm2 ls
          EOF
          sudo chmod +x ${{ env.CHROOT_DIR }}/tmp/startup.sh; sudo chroot ${{ env.CHROOT_DIR }} /tmp/startup.sh
          if [[ "${{ github.event.inputs.enable_ssh }}" == 'false' ]]; then echo "工作流将暂停 ${RUNTIME_MINUTES} 分钟..."; sleep ${RUNTIME_MINUTES}m; echo "⏳ 规定运行时间已到。"; fi

      - name: 11B. [手动调试路径] 启用 SSH
        if: github.event.inputs.enable_ssh == 'true'
        uses: lhotari/action-upterm@v1
        with: { limit-access-to-actor: true, wait-timeout-minutes: ${{ github.event.inputs.ssh_timeout_minutes }} }

      - name: 11C-Restore. 从 B2 恢复 AVD 备份
        if: github.event.inputs.run_android_container == 'true' || github.event_name == 'schedule'
        run: |
          echo "--- 准备从 B2 恢复 AVD 备份 ---"
          rclone config create ${{ env.B2_REMOTE_NAME_2 }} b2 account "${{ env.B2_KEY_ID_2 }}" key "${{ env.B2_APPLICATION_KEY_2 }}"
          B2_FULL_PATH_2="${{ env.B2_REMOTE_NAME_2 }}:${{ env.B2_BUCKET_NAME_2 }}/${{ env.B2_REMOTE_PATH_2 }}"
          LATEST_AVD_BACKUP=$(rclone lsjson ${B2_FULL_PATH_2}/ | jq -r '[.[] | select(.Name | test("${{ env.ANDROID_AVD_BACKUP_PREFIX }}.*\\.tar\\.zst$"))] | sort_by(.ModTime) | .[-1].Name' 2>/dev/null)
          if [[ -n "$LATEST_AVD_BACKUP" && "$LATEST_AVD_BACKUP" != "null" ]]; then
            echo "   -> 发现备份: ${LATEST_AVD_BACKUP}. 下载并解压中..."
            rclone copyto "${B2_FULL_PATH_2}/${LATEST_AVD_BACKUP}" "/tmp/avd_backup.tar.zst" ${{ env.RCLONE_FLAGS }}
            mkdir -p ~/.android/avd
            unzstd -c /tmp/avd_backup.tar.zst | tar -xpf - -C ~/.android/avd
            rm -f /tmp/avd_backup.tar.zst
            echo "✅ AVD 备份恢复成功。"
          else
            echo "   -> 未找到 AVD 备份，将创建全新的模拟器。"
          fi

      - name: 11C-Run. 启动 Android 模拟器 (ReactiveCircus)
        if: github.event.inputs.run_android_container == 'true' || github.event_name == 'schedule'
        uses: reactivecircus/android-emulator-runner@v2
        with:
          api-level: 30
          target: google_apis
          abi: x86_64
          emulator-options: >-
            -no-window -gpu swiftshader_indirect -no-snapshot
            -no-audio -no-boot-anim -camera-back none
          disable-animations: true
          script: |
            echo "✅ 模拟器已完全启动并准备就绪!"
            adb devices
            ANDROID_RUNTIME=${{ github.event.inputs.android_runtime_minutes }}
            echo "Android 模拟器将持续运行 ${ANDROID_RUNTIME} 分钟..."
            sleep ${ANDROID_RUNTIME}m
            echo "⏳ 规定运行时间已到。"

      - name: 12. 卸载虚拟文件系统
        if: always()
        run: sudo umount -l "${{ env.CHROOT_DIR }}/dev/pts"||true; sudo umount -l "${{ env.CHROOT_DIR }}/dev"||true; sudo umount -l "${{ env.CHROOT_DIR }}/proc"||true; sudo umount -l "${{ env.CHROOT_DIR }}/sys"||true

      - name: 13. ⚡️ [极致压缩] 创建 Chroot 版本化备份
        if: success() && !cancelled() && (github.event.inputs.backup_mode == 'chroot' || github.event.inputs.backup_mode == 'all')
        run: |
          echo "--- 1. 创建 Chroot 备份并上传至 B2 ---"
          sudo chroot ${{ env.CHROOT_DIR }} bash -c 'command -v pm2 && pm2 stop all' || true
          pm2 stop python-app || true
          rclone config create ${{ env.B2_REMOTE_NAME }} b2 account "${{ env.B2_KEY_ID }}" key "${{ env.B2_APPLICATION_KEY }}"
          TIMESTAMP=$(date -u +'%Y%m%d-%H%M%S')
          NEW_BACKUP_FILE="${{ env.BACKUP_PREFIX }}${TIMESTAMP}.tar.zst"
          B2_FULL_PATH="${{ env.B2_REMOTE_NAME }}:${{ env.B2_BUCKET_NAME }}/${{ env.B2_REMOTE_PATH }}"
          EXCLUDE_OPTS="--exclude='./tmp' --exclude='./var/tmp' --exclude='./root/.cache' --exclude='./var/cache' --exclude='./var/log'"
          echo "正在执行 Tar 和 Zstandard 极致压缩..."
          sudo tar -c ${EXCLUDE_OPTS} -f - -C ${{ env.CHROOT_DIR }} . | zstd -T0 -22 --long -c | rclone rcat ${B2_FULL_PATH}/${NEW_BACKUP_FILE} ${{ env.RCLONE_FLAGS }}
          echo "✅ 新 Chroot 备份上传成功。"
          echo "--- 2. 清理 B2 上的旧 Chroot 备份 (保留2个最新) ---"
          ( set +e; FILES_TO_DELETE=$(rclone lsjson ${B2_FULL_PATH}/ | jq -r '[.[] | select(.Name | test("minisys_backup_.*\\.tar\\.(zst|gz)$"))] | sort_by(.ModTime) | .[:-2][] | .Name' 2>/dev/null) || true; if [[ -n "$FILES_TO_DELETE" && "$FILES_TO_DELETE" != "null" ]]; then echo "$FILES_TO_DELETE" | while read file_name; do rclone deletefile "${B2_FULL_PATH}/${file_name}"; done; echo "✅ 旧 Chroot 备份清理完毕。"; else echo "无需清理。"; fi )

      - name: 13B. ⚡️ [独立备份] 创建 Android AVD 版本化备份
        if: success() && !cancelled() && (github.event.inputs.backup_mode == 'android' || github.event.inputs.backup_mode == 'all')
        run: |
          echo "--- 1. 创建 Android AVD 备份并上传至 B2_2 ---"
          rclone config create ${{ env.B2_REMOTE_NAME_2 }} b2 account "${{ env.B2_KEY_ID_2 }}" key "${{ env.B2_APPLICATION_KEY_2 }}"
          TIMESTAMP=$(date -u +'%Y%m%d-%H%M%S')
          NEW_AVD_BACKUP_FILE="${{ env.ANDROID_AVD_BACKUP_PREFIX }}${TIMESTAMP}.tar.zst"
          B2_FULL_PATH_2="${{ env.B2_REMOTE_NAME_2 }}:${{ env.B2_BUCKET_NAME_2 }}/${{ env.B2_REMOTE_PATH_2 }}"
          AVD_DIR=~/.android/avd
          if [ ! -d "$AVD_DIR" ]; then echo "❌ 未找到 AVD 目录 (${AVD_DIR})，跳过备份。"; exit 0; fi
          echo "正在打包、压缩和上传 AVD 目录: ${AVD_DIR}"
          tar -c -f - -C ${AVD_DIR} . | zstd -T0 -c | rclone rcat ${B2_FULL_PATH_2}/${NEW_AVD_BACKUP_FILE} ${{ env.RCLONE_FLAGS }}
          echo "✅ 新 AVD 备份上传成功。"
          echo "--- 2. 清理 B2_2 上的旧 AVD 备份 (保留2个最新) ---"
          ( set +e; FILES_TO_DELETE=$(rclone lsjson ${B2_FULL_PATH_2}/ | jq -r '[.[] | select(.Name | test("${{ env.ANDROID_AVD_BACKUP_PREFIX }}.*\\.tar\\.zst$"))] | sort_by(.ModTime) | .[:-2][] | .Name' 2>/dev/null) || true; if [[ -n "$FILES_TO_DELETE" && "$FILES_TO_DELETE" != "null" ]]; then echo "$FILES_TO_DELETE" | while read file_name; do rclone deletefile "${B2_FULL_PATH_2}/${file_name}"; done; echo "✅ 旧 AVD 备份清理完毕。"; else echo "无需清理。"; fi )

      - name: 14. 清理运行器残留文件
        if: always()
        run: |
          echo "--- 开始清理运行器环境 ---"
          sudo rm -rf ${{ env.CHROOT_DIR }}
          rm -rf chatgpt-on-wechat
          sudo npm cache clean --force || true
          pip cache purge || true
          echo "✅ 运行器清理完成。"