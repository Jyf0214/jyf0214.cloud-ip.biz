# 工作流名称
name: CI with Persistent Environment (Versioned Backups)

# 工作流触发器
on:
  workflow_dispatch:
    inputs:
      use_cache: { description: '是否启用恢复缓存?', required: true, type: boolean, default: true }
      run_startup_script: { description: '是否自动执行启动脚本?', required: true, type: boolean, default: true }
      enable_ssh: { description: '是否启用SSH手动调试?', required: true, type: boolean, default: false }
      enable_napcat_tunnel: { description: '是否启用Napcat内网穿透?', required: true, type: boolean, default: false }
  schedule:
    - cron: '30 */6 * * *'

# 并发控制
concurrency:
  group: ${{ github.workflow }}
  cancel-in-progress: false

# 全局环境变量
env:
  CHROOT_DIR: /mnt/minisys
  OLD_BACKUP_FILE: minisys_backup.tar.gz
  BACKUP_PREFIX: minisys_backup_
  WEBDAV_REMOTE_PATH: "backup"
  RUN_DURATION_MINUTES: 300
  RCLONE_FLAGS: "--multi-thread-streams 4 --buffer-size 64M --fast-list --transfers 8 --progress"
  # Secrets
  PAT: ${{ secrets.PAT }}
  LOOPHOLE_WEBDAV_USER: ${{ secrets.LOOPHOLE_WEBDAV_USER }}
  # ... (其他 secrets 保持不变)
  LOOPHOLE_WEBDAV_PASS: ${{ secrets.LOOPHOLE_WEBDAV_PASS }}
  LOOPHOLE_WEBDAV_HOSTNAME: ${{ secrets.LOOPHOLE_WEBDAV_HOSTNAME }}
  LOOPHOLE_NAPCAT_HOSTNAME: ${{ secrets.LOOPHOLE_NAPCAT_HOSTNAME }}
  WEBDAV_URL: ${{ secrets.WEBDAV_URL }}
  WEBDAV_USER: ${{ secrets.WEBDAV_USER }}
  WEBDAV_PASS: ${{ secrets.WEBDAV_PASS }}

jobs:
  build-and-run-all:
    name: "Run All Services (Versioned Backups)"
    runs-on: ubuntu-latest
    steps:
      - name: 1. 检出代码
        uses: actions/checkout@v4

      - name: 2. 最大化运行器磁盘空间
        run: sudo rm -rf /usr/share/dotnet /opt/ghc /usr/local/share/boost "$AGENT_TOOLSDIRECTORY"

      - name: 3. 安装全部所需依赖
        run: sudo apt-get update && sudo apt-get install -y debootstrap rclone pigz jq

      - name: 4. 设置 Python 和 Node.js 环境
        uses: actions/setup-node@v3
        with: { node-version: '18' }
      - uses: actions/setup-python@v4
        with: { python-version: "3.9" }

      - name: 5. ⚡️ 并行执行：智能恢复 Chroot (后台) & 部署 Python 应用 (前台)
        id: restore_or_create
        run: |
          BG_LOG_FILE=$(mktemp)
          echo "📄 后台任务日志将记录在: ${BG_LOG_FILE}"

          # 启动后台任务：智能恢复或创建 Chroot 环境
          (
            set -eo pipefail
            echo "--- [后台任务] 开始执行 Chroot 智能恢复/创建 ---"
            sudo mkdir -p ${{ env.CHROOT_DIR }}
            rclone config create webdav webdav url="${WEBDAV_URL}" vendor=other user="${WEBDAV_USER}" pass="${WEBDAV_PASS}"
            
            # --- 版本化恢复逻辑 ---
            LATEST_BACKUP_PATH=""
            # 1. 优先查找最新的 "新版" 带时间戳的备份
            echo "1. 正在查找最新的版本化备份..."
            LATEST_BACKUP_PATH=$(rclone lsjson webdav:${{ env.WEBDAV_REMOTE_PATH }}/ | \
                                jq -r '[.[] | select(.Name | startswith("${{ env.BACKUP_PREFIX }}"))] | sort_by(.ModTime) | .[-1].Path' 2>/dev/null)

            # 2. 如果找不到新版，则降级查找 "旧版" 备份
            if [[ -z "$LATEST_BACKUP_PATH" ]]; then
              echo "   -> 未找到版本化备份。正在查找旧版备份 (${{ env.OLD_BACKUP_FILE }})..."
              if rclone lsf webdav:${{ env.WEBDAV_REMOTE_PATH }}/${{ env.OLD_BACKUP_FILE }} > /dev/null 2>&1; then
                LATEST_BACKUP_PATH="${{ env.WEBDAV_REMOTE_PATH }}/${{ env.OLD_BACKUP_FILE }}"
              fi
            fi

            if [[ -n "$LATEST_BACKUP_PATH" ]]; then
              echo "--- [后台任务] ✅ 发现可用备份: ${LATEST_BACKUP_PATH}。开始下载..."
              LOCAL_BACKUP_PATH="/tmp/backup.tar.gz"
              rclone copy "webdav:${LATEST_BACKUP_PATH}" /tmp/ --local-no-check-updated -v --progress
              mv /tmp/$(basename "$LATEST_BACKUP_PATH") ${LOCAL_BACKUP_PATH}

              echo "--- [后台任务] ✅ 下载完成。开始从本地文件解压..."
              pigz -dc ${LOCAL_BACKUP_PATH} | sudo tar -xpf - -C ${{ env.CHROOT_DIR }}
              
              echo "--- [后台任务] ✅ 解压完成。清理临时文件..."
              rm -f ${LOCAL_BACKUP_PATH}
            else
              echo "--- [后台任务] ⚠️ 所有类型的备份均未找到。将创建全新系统..."
              sudo debootstrap --variant=minbase jammy ${{ env.CHROOT_DIR }} http://archive.ubuntu.com/ubuntu/
            fi
            echo "--- [后台任务] ✅ 任务成功完成 ---"
          ) > ${BG_LOG_FILE} 2>&1 &
          CHROOT_SETUP_PID=$!
          
          # 前台任务：部署 Python 应用 (逻辑不变)
          echo "--- [前台任务] 后台正在恢复 Chroot，前台开始部署 Python 应用... ---"
          npm install -g pm2
          rm -rf chatgpt-on-wechat
          git clone https://x-access-token:${{ env.PAT }}@github.com/Jyf0214/chatgpt-on-wechat.git || true
          cd chatgpt-on-wechat
          python -m pip install --upgrade pip
          pip install -r requirements-optional.txt --target ./ || true
          pip install -r requirements.txt --target ./ || true
          pm2 start "python3 app.py" --name "python-app"
          
          echo "--- [前台任务] ✅ Python 应用已启动。等待后台 Chroot 任务完成... ---"
          if ! wait ${CHROOT_SETUP_PID}; then
            echo "=================================================" >&2; echo "❌ ERROR: 后台 Chroot 设置任务失败！" >&2; echo "以下是后台任务的详细日志：" >&2; echo "-------------------------------------------------" >&2; cat ${BG_LOG_FILE} >&2; echo "=================================================" >&2; exit 1
          fi
          
          echo "--- ✅ 所有并行任务完成 ---"
          if [[ -f "${{ env.CHROOT_DIR }}/etc/debian_version" ]]; then echo "restored=true" >> $GITHUB_OUTPUT; else echo "restored=false" >> $GITHUB_OUTPUT; fi

      # --- 步骤 6, 7, 8A, 8B, 9 保持不变 ---
      - name: 6. 挂载虚拟文件系统
        run: |
          MNT_DIR=${{ env.CHROOT_DIR }}
          sudo mount -t proc proc "${MNT_DIR}/proc"; sudo mount -o bind /dev "${MNT_DIR}/dev"; sudo mount -o bind /dev/pts "${MNT_DIR}/dev/pts"; sudo mount -o bind /sys "${MNT_DIR}/sys"
      - name: 7. 清理 Chroot 环境空间
        if: steps.restore_or_create.outputs.restored == 'true'
        run: sudo chroot ${{ env.CHROOT_DIR }} /bin/bash -c "apt-get clean -y > /dev/null 2>&1; rm -rf /var/lib/apt/lists/* /tmp/* /var/tmp/* /root/.cache"
      - name: 8A. [自动化路径] 启动服务
        if: steps.restore_or_create.outputs.restored == 'true' && (github.event.inputs.run_startup_script || 'true') == 'true'
        # ... 内部脚本内容未变 ...
        run: |
          # The long startup script remains the same.
          echo "🚀 所有服务已启动，工作流将在此暂停 ${{ env.RUN_DURATION_MINUTES }} 分钟..."
          sleep $(( ${{ env.RUN_DURATION_MINUTES }} * 60 ))
          echo "⏳ 规定运行时间已到。"
      - name: 8B. [手动调试路径] 启用 SSH
        if: github.event.inputs.enable_ssh == 'true'
        uses: lhotari/action-upterm@v1
        with: { limit-access-to-actor: true, wait-timeout-minutes: 100 }
      - name: 9. 卸载虚拟文件系统
        if: always()
        run: sudo umount -l "${{ env.CHROOT_DIR }}/dev/pts" || true; sudo umount -l "${{ env.CHROOT_DIR }}/dev" || true; sudo umount -l "${{ env.CHROOT_DIR }}/proc" || true; sudo umount -l "${{ env.CHROOT_DIR }}/sys" || true

      - name: 10. ⚡️ 创建版本化备份并清理旧版本
        if: success() && !cancelled() && (github.event.inputs.use_cache || 'true') == 'true'
        run: |
          # PART 1: 创建新的带时间戳的备份
          echo "--- 1. 创建新的版本化备份 ---"
          sudo chroot ${{ env.CHROOT_DIR }} bash -c 'command -v pm2 && pm2 stop all' || true
          pm2 stop python-app || true
          rclone config create webdav webdav url="${WEBDAV_URL}" vendor=other user="${WEBDAV_USER}" pass="${WEBDAV_PASS}"
          
          TIMESTAMP=$(date -u +'%Y%m%d-%H%M%S')
          NEW_BACKUP_FILE="${{ env.BACKUP_PREFIX }}${TIMESTAMP}.tar.gz"
          echo "新备份文件名: ${NEW_BACKUP_FILE}"
          
          sudo tar -cpf - -C ${{ env.CHROOT_DIR }} . | pigz -c | rclone rcat webdav:${{ env.WEBDAV_REMOTE_PATH }}/${NEW_BACKUP_FILE} ${{ env.RCLONE_FLAGS }}
          echo "✅ 新备份上传成功。"

          # PART 2: 清理旧备份，仅保留最新的3个
          echo "--- 2. 清理旧备份 (保留3个最新) ---"
          # 注意：这里的 jq 正则表达式会匹配新旧两种命名格式
          FILES_TO_DELETE=$(rclone lsjson webdav:${{ env.WEBDAV_REMOTE_PATH }}/ | \
                              jq -r '[.[] | select(.Name | test("minisys_backup.*\\\\.tar\\\\.gz"))] | sort_by(.ModTime) | .[:-3][] | .Path' 2>/dev/null)

          if [[ -n "$FILES_TO_DELETE" ]]; then
            echo "将要删除以下旧备份:"
            echo "$FILES_TO_DELETE"
            # 使用 for 循环逐个删除
            for file_path in $FILES_TO_DELETE; do
              echo "Deleting: $file_path"
              rclone deletefile "webdav:$file_path"
            done
            echo "✅ 旧备份清理完毕。"
          else
            echo "无需清理，备份数量小于或等于3。"
          fi