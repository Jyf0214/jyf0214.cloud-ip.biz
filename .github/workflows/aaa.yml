# 工作流名称
name: Incus CI with SSH and WebDAV Backup (Host Networking)

# 触发条件
on:
  workflow_dispatch:

# 环境变量
env:
  CONTAINER_NAME: my-ci-container
  BACKUP_FILE: incus_backup.tar.gz
  WEBDAV_REMOTE: webdav_backup

jobs:
  build-and-debug:
    runs-on: ubuntu-latest

    steps:
      # 步骤 1：安装依赖
      - name: Install dependencies
        run: |
          sudo apt-get update
          sudo apt-get install -y rclone
          # 安装 Incus
          sudo curl -fsSL https://pkgs.zabbly.com/key.asc | sudo gpg --dearmor -o /usr/share/keyrings/zabbly.gpg
          sudo sh -c "cat > /etc/apt/sources.list.d/zabbly-incus-stable.sources" <<EOF
          Enabled: yes
          Types: deb
          URIs: https://pkgs.zabbly.com/incus/stable
          Suites: $(. /etc/os-release && echo ${VERSION_CODENAME})
          Components: main
          Architectures: $(dpkg --print-architecture)
          Signed-By: /usr/share/keyrings/zabbly.gpg
          EOF
          sudo apt-get update
          sudo apt-get install -y incus

      # 步骤 2：初始化 Incus
      - name: Initialize Incus
        run: |
          echo "Initializing Incus..."
          # 使用 --auto 初始化，但不创建默认网桥，因为我们不需要它
          sudo incus admin init --auto

      # 步骤 3：配置 rclone
      - name: Configure rclone for WebDAV
        run: |
          mkdir -p ~/.config/rclone
          echo "[${WEBDAV_REMOTE}]
          type = webdav
          url = ${{ secrets.WEBDAV_URL }}
          vendor = other
          user = ${{ secrets.WEBDAV_USER }}
          pass = $(echo '${{ secrets.WEBDAV_PASS }}' | rclone obscure -)
          " > ~/.config/rclone/rclone.conf

      # 步骤 4：检查并恢复/创建容器 (使用宿主机网络)
      - name: Check, Restore or Create Container with Host Networking
        run: |
          # 定义网络配置参数，让容器直接使用宿主机网络
          # -c security.nesting=true 是一个好的实践
          # -d root,path=/ ... 是标准配置
          # --device eth0,name=eth0,nictype=physical,parent=eth0,type=nic 这是关键，将宿主机的 eth0 直连给容器
          # 如果在恢复时也想确保网络正确，可以先启动再配置，但直接创建时配置更干净
          
          if [ -n "$(rclone lsf ${WEBDAV_REMOTE}:/ --include ${BACKUP_FILE})" ]; then
            echo "Backup found. Downloading and restoring..."
            rclone copy ${WEBDAV_REMOTE}:${BACKUP_FILE} .
            sudo incus import ${BACKUP_FILE} ${CONTAINER_NAME}
            
            echo "Attaching host network to the restored container..."
            # 为恢复的容器配置网络
            sudo incus config device add ${CONTAINER_NAME} eth0 nic nictype=physical parent=eth0 name=eth0
            
            sudo incus start ${CONTAINER_NAME}
          else
            echo "No backup found. Launching new container with host networking..."
            # 在创建时直接指定网络模式
            sudo incus launch images:ubuntu/22.04 ${CONTAINER_NAME} --device eth0,name=eth0,nictype=physical,parent=eth0,type=nic
          fi
          
          # 等待网络就绪
          echo "Waiting for container to be ready..."
          sleep 5
          
          echo "Verifying container internet access..."
          # 在容器内执行 apt-get update 作为验证
          sudo incus exec ${CONTAINER_NAME} -- apt-get update

      # 步骤 5：启用 Upterm 调试会话
      - name: Enable Upterm debugging
        uses: lhotari/action-upterm@v1
        with:
          limit-access-to-actor: true
          wait-timeout-minutes: 348

      # --- SSH 会话结束后，工作流从这里继续 ---

      # 步骤 6：停止并备份容器
      - name: Stop and Backup Container
        run: |
          echo "Stopping container..."
          sudo incus stop ${CONTAINER_NAME} --force
          echo "Exporting container..."
          sudo incus export ${CONTAINER_NAME} ${BACKUP_FILE} --force
          echo "Uploading new backup to WebDAV..."
          rclone copyto ${BACKUP_FILE} ${WEBDAV_REMOTE}:${BACKUP_FILE}
          echo "Backup complete."