name: CI with Persistent Chroot and Device Info (Advanced)

on:
  workflow_dispatch:
    inputs:
      use_cache:
        description: '是否启用恢复缓存? (Restore from backup?)'
        required: true
        type: boolean
        default: true
      run_startup_script:
        description: '是否自动执行启动脚本? (Auto-run startup script?)'
        required: true
        type: boolean
        default: true
      enable_ssh:
        description: '是否启用SSH手动调试? (Enable SSH for manual debug?)'
        required: true
        type: boolean
        default: false
      save_device_info:
        description: '是否保存当前设备信息用于下次还原? (Save current device info for next run?)'
        required: true
        type: boolean
        default: false

env:
  CHROOT_DIR: /mnt/minisys
  BACKUP_FILE: minisys_backup.tar.gz
  WEBDAV_REMOTE_PATH: "backup"
  RUN_DURATION_MINUTES: 300

jobs:
  build-and-debug:
    runs-on: ubuntu-latest
    steps:
      - name: 1. 最大化运行器磁盘空间 (Maximize runner disk space)
        run: |
          echo "清理前，初始磁盘空间："
          df -h /
          echo "开始清理预装软件以释放空间..."
          sudo rm -rf /usr/share/dotnet /opt/ghc /usr/local/share/boost "$AGENT_TOOLSDIRECTORY"
          echo "✅ 清理完成，当前可用空间："
          df -h /

      - name: 2. 安装所需依赖 (Install dependencies)
        run: |
          sudo apt-get update
          sudo apt-get install -y debootstrap rclone

      - name: 3. 恢复备份或创建新系统 (Restore backup or create new system)
        id: restore_or_create
        env:
          WEBDAV_URL: ${{ secrets.WEBDAV_URL }}
          WEBDAV_USER: ${{ secrets.WEBDAV_USER }}
          WEBDAV_PASS: ${{ secrets.WEBDAV_PASS }}
        run: |
          sudo mkdir -p ${{ env.CHROOT_DIR }}
          if [[ "${{ github.event.inputs.use_cache }}" == "true" ]]; then
            echo "🔎 用户选择启用缓存。正在配置 rclone 并检查备份..."
            rclone config create webdav webdav url="${WEBDAV_URL}" vendor=other user="${WEBDAV_USER}" pass="${WEBDAV_PASS}"
            if rclone lsf webdav:${WEBDAV_REMOTE_PATH}/${BACKUP_FILE} > /dev/null; then
              echo "✅ 发现备份。正在从云端流式恢复系统..."
              rclone cat webdav:${WEBDAV_REMOTE_PATH}/${BACKUP_FILE} | sudo tar -xzpf - -C ${{ env.CHROOT_DIR }}
              echo "restored=true" >> $GITHUB_OUTPUT
            else
              echo "⚠️ 未发现云端备份。将自动转为创建新系统..."
              sudo debootstrap --variant=minbase jammy ${{ env.CHROOT_DIR }} http://archive.ubuntu.com/ubuntu/
              echo "restored=false" >> $GITHUB_OUTPUT
            fi
          else
            echo "ℹ️ 用户选择不使用缓存。将创建全新系统..."
            sudo debootstrap --variant=minbase jammy ${{ env.CHROOT_DIR }} http://archive.ubuntu.com/ubuntu/
            echo "restored=false" >> $GITHUB_OUTPUT
          fi

      - name: 4. 挂载虚拟文件系统到 Chroot 环境 (Mount virtual filesystems)
        run: |
          echo "正在挂载虚拟文件系统..."
          MNT_DIR=${{ env.CHROOT_DIR }}
          sudo mount -t proc proc "${MNT_DIR}/proc"
          sudo mount -o bind /dev "${MNT_DIR}/dev"
          sudo mount -o bind /dev/pts "${MNT_DIR}/dev/pts"
          sudo mount -o bind /sys "${MNT_DIR}/sys"
          echo "✅ 虚拟文件系统已挂载。"

      - name: 5A. [自动化路径] 清理并启动服务 (Automated Path - Cleanup and Run Services)
        if: steps.restore_or_create.outputs.restored == 'true' && github.event.inputs.run_startup_script == 'true'
        run: |
          # The startup script from the previous answer remains the same.
          echo "✅ 进入自动化运行模式..."
          sudo tee ${{ env.CHROOT_DIR }}/tmp/startup.sh > /dev/null <<'EOF'
          #!/bin/bash
          export PATH=/usr/local/sbin:/usr/local/bin:/usr/sbin:/usr/bin:/sbin:/bin:/root/node_modules/.bin
          HOME_DIR="/root"
          echo "--- [Chroot 环境内] 开始执行自动化启动任务 ---"
          if ! command -v pm2 &> /dev/null; then npm install -g pm2; fi
          echo "1. 正在清理旧的日志文件..."
          pm2 flush
          find ${HOME_DIR} -name "*.log" -type f -delete
          echo "2. 正在尝试使用 PM2 启动 launcher.sh..."
          if [ -f "${HOME_DIR}/launcher.sh" ]; then cd "${HOME_DIR}"; pm2 start ./launcher.sh --name "launcher" --output /dev/null --error /dev/null || pm2 restart "launcher"; fi
          echo "3. 正在启动 Redis 服务器..."
          if command -v redis-server &> /dev/null; then redis-server --daemonize yes; fi
          echo "4. 正在尝试启动 Yunzai-Bot..."
          YUNZAI_DIR="${HOME_DIR}/Yunzai"
          if [ -d "${YUNZAI_DIR}" ]; then cd "${YUNZAI_DIR}"; pm2 start app.js --name "yunzai-app" || pm2 restart "yunzai-app"; fi
          echo "--- [Chroot 环境内] 所有启动任务已派发，正在保存PM2进程列表 ---"
          pm2 save && pm2 ls
          EOF
          sudo chmod +x ${{ env.CHROOT_DIR }}/tmp/startup.sh
          sudo chroot ${{ env.CHROOT_DIR }} /tmp/startup.sh
          echo "🚀 服务已启动，工作流将在此暂停 ${{ env.RUN_DURATION_MINUTES }} 分钟..."
          sleep $(( ${{ env.RUN_DURATION_MINUTES }} * 60 ))
          echo "⏳ 规定运行时间已到。"

      - name: 5B. [手动调试路径] 启用 Upterm SSH 会话 (Manual Path - Enable SSH Session)
        if: github.event.inputs.enable_ssh == 'true'
        uses: lhotari/action-upterm@v1
        with:
          limit-access-to-actor: true
          wait-timeout-minutes: 100

      # --- 公共收尾步骤 ---
      - name: 6. (可选) 保存设备信息 (Optional) Save Device Info
        if: github.event.inputs.save_device_info == 'true'
        run: |
          echo "-> 用户选择保存当前运行器的设备信息以备下次使用。"
          if [ -f /etc/machine-id ]; then
            echo "  -> 正在将 /etc/machine-id 复制到 chroot 环境中..."
            sudo cp /etc/machine-id ${{ env.CHROOT_DIR }}/etc/
            # 确保dbus的machine-id也同步，如果存在的话
            if [ -d ${{ env.CHROOT_DIR }}/var/lib/dbus ]; then
              sudo cp /etc/machine-id ${{ env.CHROOT_DIR }}/var/lib/dbus/
            fi
            echo "  ✅ 设备信息已成功保存。"
          else
            echo "  ⚠️ 警告: 在当前运行器上未找到 /etc/machine-id，跳过保存。"
          fi

      - name: 7. 卸载 Chroot 环境的虚拟文件系统 (Unmount virtual filesystems)
        if: always()
        run: |
          echo "会话结束。为安全备份，正在卸载所有虚拟文件系统..."
          MNT_DIR=${{ env.CHROOT_DIR }}
          sudo umount -l "${MNT_DIR}/dev/pts" || true
          sudo umount -l "${MNT_DIR}/dev" || true
          sudo umount -l "${MNT_DIR}/proc" || true
          sudo umount -l "${MNT_DIR}/sys" || true
          echo "✅ 虚拟文件系统已全部卸载。"

      - name: 8. 备份系统环境到 WebDAV (Backup environment to WebDAV)
        if: ${{ !cancelled() }}
        env:
          WEBDAV_URL: ${{ secrets.WEBDAV_URL }}
          WEBDAV_USER: ${{ secrets.WEBDAV_USER }}
          WEBDAV_PASS: ${{ secrets.WEBDAV_PASS }}
        run: |
          echo "开始最终备份..."
          # 优雅停止由PM2管理的服务
          sudo chroot ${{ env.CHROOT_DIR }} bash -c 'command -v pm2 && pm2 stop all' || true
          
          rclone config create webdav webdav url="${WEBDAV_URL}" vendor=other user="${WEBDAV_USER}" pass="${WEBDAV_PASS}"
          echo "开始流式打包并上传系统镜像..."
          sudo tar -czpf - -C ${{ env.CHROOT_DIR }} . | rclone rcat webdav:${WEBDAV_REMOTE_PATH}/${BACKUP_FILE} --progress
          echo "✅ 备份流程执行完毕。"