# 工作流名称
name: CI with Persistent Environment (Backblaze B2 Backups - v8 Secure)

# 工作流触发器
on:
  workflow_dispatch:
    inputs:
      # --- 核心调试与模式开关 ---
      no_cache: { description: '🚫 [模式] 不使用缓存, 强制全新环境? (将禁用备份和自动启动,并强制SSH)', required: true, type: boolean, default: false }
      enable_ssh: { description: '🐞 [调试] 正常模式下, 是否启用SSH手动调试 (将暂停自动化)?', required: true, type: boolean, false }

      # --- 核心功能开关 (no_cache=false 时有效) ---
      create_backup_on_finish: { description: '✅ [核心] 是否在结束时创建环境备份? (这将影响运行时长)', required: true, type: boolean, default: true }
      run_startup_script: { description: '🚀 [核心] 是否自动执行Chroot内的服务启动脚本?', required: true, type: boolean, default: true }

      # --- 服务独立启动开关 (run_startup_script=true 时有效) ---
      run_launcher: { description: '  - 是否启动 launcher 服务?', type: boolean, default: true }
      run_redis: { description: '  - 是否启动 Redis 服务?', type: boolean, default: true }
      run_yunzai: { description: '  - 是否启动 Yunzai-Bot 服务?', type: boolean, default: true }
      run_loophole_webdav: { description: '  - 是否启动 Loophole WebDAV 隧道?', type: boolean, default: true }
      enable_napcat_tunnel: { description: '  - (Loophole) 是否额外启用 Napcat 内网穿透?', type: boolean, default: false }
      run_openlist: { description: '  - 是否启动 openlist 服务?', type: boolean, default: true }
      run_chmlfrp: { description: '  - 是否启动 ChmlFrp 服务?', type: boolean, default: true }

# 并发控制
concurrency:
  group: ${{ github.workflow }}-${{ github.ref }}
  cancel-in-progress: false

# ========================================================================================
# --- 全局环境变量 (集中管理所有配置和密钥) ---
# ========================================================================================
env:
  # --- 基础路径和配置 ---
  CHROOT_DIR: /mnt/minisys
  PYTHON_APP_REPO_DIR: chatgpt-on-wechat
  NODE_VERSION: '18'

  # --- Backblaze B2 备份配置 ---
  B2_REMOTE_NAME: b2
  BACKUP_PREFIX: minisys_backup_
  B2_BACKUP_DIR: backup
  BACKUP_RETENTION_COUNT: 3
  RCLONE_FLAGS: "--multi-thread-streams 4 --buffer-size 64M --fast-list --transfers 8 --progress"

  # --- GitHub & App Secrets ---
  B2_ACCOUNT_ID: ${{ secrets.B2_ACCOUNT_ID }}
  B2_ACCOUNT_KEY: ${{ secrets.B2_ACCOUNT_KEY }}
  B2_BUCKET_NAME: ${{ secrets.B2_BUCKET_NAME }}
  B2_DOWNLOAD_URL: ${{ secrets.B2_DOWNLOAD_URL }} # 注意: 此变量不再被echo, 仅供内部潜在使用
  PAT: ${{ secrets.YUNZAIBOT_PAT }}

  # --- Chroot 内服务所需 Secrets ---
  LOOPHOLE_WEBDAV_USER: ${{ secrets.LOOPHOLE_WEBDAV_USER }}
  LOOPHOLE_WEBDAV_PASS: ${{ secrets.LOOPHOLE_WEBDAV_PASS }}
  LOOPHOLE_WEBDAV_HOSTNAME: ${{ secrets.LOOPHOLE_WEBDAV_HOSTNAME }}
  LOOPHOLE_NAPCAT_HOSTNAME: ${{ secrets.LOOPHOLE_NAPCAT_HOSTNAME }}
  NAPCATUSER: ${{ secrets.NAPCATUSER }}
  NAPCATPASS: ${{ secrets.NAPCATPASS }}

jobs:
  build-and-run-all:
    name: "Run All Services (B2 Enhanced v8)"
    runs-on: ubuntu-latest
    steps:
      - name: 1. 检出代码
        uses: actions/checkout@v4

      - name: 2. 最大化运行器磁盘空间
        run: sudo rm -rf /usr/share/dotnet /opt/ghc /usr/local/share/boost "$AGENT_TOOLSDIRECTORY"

      - name: 3. 安装全部所需依赖
        run: sudo apt-get update && sudo apt-get install -y debootstrap rclone pigz zstd jq

      - name: 4. 设置运行器的 Node.js 和 Python 环境
        uses: actions/setup-node@v3
        with: { node-version: '${{ env.NODE_VERSION }}' }
      - uses: actions/setup-python@v4
        with: { python-version: "3.9" }

      - name: 5A. [缓存模式] ⚡️ 并行执行：智能恢复 Chroot & 部署应用
        if: github.event.inputs.no_cache == 'false'
        id: restore_or_create
        run: |
          # 此步骤的脚本与 v7 版本相同，并行恢复和部署
          BG_LOG_FILE=$(mktemp)
          echo "📄 后台任务日志将记录在: ${BG_LOG_FILE}"

          # 启动后台任务：智能恢复或创建 Chroot 环境
          (
            set -eo pipefail
            echo "--- [后台任务] 开始执行 Chroot 智能恢复/创建 ---"
            sudo mkdir -p ${{ env.CHROOT_DIR }}
            rclone config create ${{ env.B2_REMOTE_NAME }} b2 account "${B2_ACCOUNT_ID}" key "${B2_ACCOUNT_KEY}"

            echo "1. 正在从 Backblaze B2 (${B2_BUCKET_NAME}) 的根目录查找最新的备份..."
            LATEST_BACKUP_FILENAME=$(rclone lsjson ${{ env.B2_REMOTE_NAME }}:${B2_BUCKET_NAME}/ | \
                                      jq -r '[.[] | select(.Name | test("${{ env.BACKUP_PREFIX }}.*\\.tar\\.(zst|gz)$"))] | sort_by(.ModTime) | .[-1].Name' 2>/dev/null)

            if [[ -n "$LATEST_BACKUP_FILENAME" && "$LATEST_BACKUP_FILENAME" != "null" ]]; then
                echo "   -> ✅ 发现最新可用备份: ${LATEST_BACKUP_FILENAME}"
                LOCAL_BACKUP_PATH="/tmp/backup.archive"
                rclone copyto "${{ env.B2_REMOTE_NAME }}:${B2_BUCKET_NAME}/${LATEST_BACKUP_FILENAME}" ${LOCAL_BACKUP_PATH} ${{ env.RCLONE_FLAGS }}
                echo "--- [后台任务] ✅ 下载完成。开始解压..."
                
                if [[ "${LATEST_BACKUP_FILENAME}" == *.zst ]]; then
                    unzstd -c ${LOCAL_BACKUP_PATH} | sudo tar -xpf - -C ${{ env.CHROOT_DIR }}
                else
                    pigz -dc ${LOCAL_BACKUP_PATH} | sudo tar -xpf - -C ${{ env.CHROOT_DIR }}
                fi
                rm -f ${LOCAL_BACKUP_PATH}
            else
              echo "--- [后台任务] ⚠️ 所有类型的备份均未找到。将创建全新系统..."
              sudo debootstrap --variant=minbase jammy ${{ env.CHROOT_DIR }} http://archive.ubuntu.com/ubuntu/
            fi
            echo "--- [后台任务] ✅ Chroot 恢复/创建任务成功完成 ---"
          ) > ${BG_LOG_FILE} 2>&1 &
          CHROOT_SETUP_PID=$!
          
          # 前台任务：部署 Python 应用
          echo "--- [前台任务] 后台正在恢复 Chroot，前台开始部署 Python 应用... ---"
          npm install -g pm2; rm -rf ${{ env.PYTHON_APP_REPO_DIR }}
          git clone https://x-access-token:${{ env.PAT }}@github.com/Jyf0214/${{ env.PYTHON_APP_REPO_DIR }}.git || true
          cd ${{ env.PYTHON_APP_REPO_DIR }} && python -m pip install --upgrade pip && pip install -r requirements.txt --target ./ || true && pm2 start "python3 app.py" --name "python-app"
          
          echo "--- [前台任务] ✅ Python 应用已启动。等待后台 Chroot 任务完成... ---"
          if ! wait ${CHROOT_SETUP_PID}; then
            echo "=================================================" >&2; echo "❌ ERROR: 后台 Chroot 设置任务失败！" >&2; cat ${BG_LOG_FILE} >&2; exit 1
          fi
          
          echo "--- ✅ 所有并行任务完成 ---"
          if [[ -f "${{ env.CHROOT_DIR }}/etc/debian_version" ]]; then echo "restored=true" >> $GITHUB_OUTPUT; else echo "restored=false" >> $GITHUB_OUTPUT; fi
      
      - name: 5B. [无缓存模式] 创建全新的 Chroot 环境
        if: github.event.inputs.no_cache == 'true'
        run: |
          echo "🚫 检测到无缓存模式, 将创建全新的 Chroot 环境..."
          sudo mkdir -p ${{ env.CHROOT_DIR }}
          sudo debootstrap --variant=minbase jammy ${{ env.CHROOT_DIR }} http://archive.ubuntu.com/ubuntu/
          echo "✅ 全新 Chroot 环境创建完成。"

      - name: 6. 挂载虚拟文件系统
        run: |
          MNT_DIR=${{ env.CHROOT_DIR }}
          sudo mount -t proc proc "${MNT_DIR}/proc"; sudo mount -o bind /dev "${MNT_DIR}/dev"; sudo mount -o bind /dev/pts "${MNT_DIR}/dev/pts"; sudo mount -o bind /sys "${MNT_DIR}/sys"

      - name: 7A. [缓存模式] 清理 Chroot 环境空间
        if: steps.restore_or_create.outputs.restored == 'true' && github.event.inputs.no_cache == 'false'
        run: |
          # 仅在恢复了备份时执行清理
          sudo chroot ${{ env.CHROOT_DIR }} /bin/bash -c "set -x; apt-get clean -y; apt-get autoremove -y; rm -rf /var/lib/apt/lists/* /tmp/* /var/tmp/*; find /var/log -type f -delete"

      - name: 7B. [修复] 安装 Chroot 环境内的 Node.js 和 PM2
        # 在自动化或无缓存调试模式下，都需要确保chroot内有Node.js环境
        if: (github.event.inputs.run_startup_script == 'true' && github.event.inputs.no_cache == 'false') || github.event.inputs.no_cache == 'true'
        run: |
          echo "--- [Chroot Prep] 开始在 Chroot 环境中安装 Node.js 和 PM2 ---"
          sudo tee ${{ env.CHROOT_DIR }}/tmp/prepare_env.sh > /dev/null << EOF
          #!/bin/bash
          set -ex
          echo "nameserver 8.8.8.8" > /etc/resolv.conf
          apt-get update -y && apt-get install -y curl ca-certificates
          if ! command -v node &> /dev/null; then
            curl -fsSL https://deb.nodesource.com/setup_${{ env.NODE_VERSION }}.x | bash -
            apt-get install -y nodejs
          fi
          if ! command -v pm2 &> /dev/null; then npm install -g pm2; fi
          rm -f /tmp/prepare_env.sh
          EOF
          sudo chmod +x ${{ env.CHROOT_DIR }}/tmp/prepare_env.sh
          sudo chroot ${{ env.CHROOT_DIR }} /tmp/prepare_env.sh

      - name: 8A. [自动化路径] 根据开关启动服务并动态暂停
        if: github.event.inputs.run_startup_script == 'true' && github.event.inputs.enable_ssh == 'false' && github.event.inputs.no_cache == 'false'
        env:
          RUNTIME_MINUTES: ${{ github.event.inputs.create_backup_on_finish == 'true' && 300 || 350 }}
        run: |
          # 此步骤脚本无变化, 仅调整了执行条件
          echo "✅ 进入自动化运行模式 (Chroot 服务)..."
          sudo tee ${{ env.CHROOT_DIR }}/tmp/startup.sh > /dev/null << 'EOF'
          #!/bin/bash
          set -e
          export PATH=/usr/local/sbin:/usr/local/bin:/usr/sbin:/usr/bin:/sbin:/bin:/root/node_modules/.bin
          HOME_DIR="/root"
          echo "--- [Chroot 环境内] 开始执行自动化启动任务 ---"
          pm2 flush && find ${HOME_DIR} -name "*.log" -type f -delete
          if [[ "${RUN_LAUNCHER}" == "true" ]]; then (cd "${HOME_DIR}" && pm2 start ./launcher.sh --name "launcher") || echo "-> 警告: launcher.sh 未找到。"; fi
          if [[ "${RUN_REDIS}" == "true" ]]; then command -v redis-server &> /dev/null && redis-server --daemonize yes || echo "-> 警告: redis-server 未找到。"; fi
          if [[ "${RUN_YUNZAI}" == "true" ]]; then (cd "${HOME_DIR}/Yunzai" && pm2 start app.js --name "yunzai-app") || echo "-> 警告: Yunzai 目录未找到。"; fi
          if [[ "${RUN_LOOPHOLE_WEBDAV}" == "true" ]]; then if [ -f "${HOME_DIR}/loophole/loophole" ]; then cd "${HOME_DIR}/loophole"; pm2 start ./loophole --name "loophole-webdav" -- webdav ~ -u "${LOOPHOLE_WEBDAV_USER}" -p "${LOOPHOLE_WEBDAV_PASS}" --hostname "${LOOPHOLE_WEBDAV_HOSTNAME}"; if [[ "${ENABLE_NAPCAT_TUNNEL}" == "true" ]]; then pm2 start ./loophole --name "loophole-http" -- http 6099 --hostname "${LOOPHOLE_NAPCAT_HOSTNAME}" --basic-auth-username "${NAPCATUSER}" --basic-auth-password "${NAPCATPASS}"; fi; fi; fi
          if [[ "${RUN_OPENLIST}" == "true" ]]; then (cd "${HOME_DIR}" && pm2 start ./openlist --name "openlist-server" -- server) || echo "-> 警告: openlist 未找到。"; fi
          if [[ "${RUN_CHMLFRP}" == "true" ]]; then (cd "${HOME_DIR}/ChmlFrp" && pm2 start ./frpc --name "chml-frp" -- -c frpc.ini) || echo "-> 警告: frpc 未找到。"; fi
          pm2 save && pm2 ls
          EOF
          sudo chmod +x ${{ env.CHROOT_DIR }}/tmp/startup.sh
          # 将外部变量作为参数传递给 chroot 内的脚本
          sudo chroot ${{ env.CHROOT_DIR }} bash -c "export RUN_LAUNCHER='${{ github.event.inputs.run_launcher }}' ...; /tmp/startup.sh"
          echo "🚀 服务已根据开关启动。工作流将暂停 ${RUNTIME_MINUTES} 分钟..."
          sleep ${RUNTIME_MINUTES}m

      - name: 8B. [调试路径] 启用 SSH
        # 在 'enable_ssh' 或 'no_cache' 模式下均启用
        if: github.event.inputs.enable_ssh == 'true' || github.event.inputs.no_cache == 'true'
        uses: lhotari/action-upterm@v1
        with:
          limit-access-to-actor: true
          wait-timeout-minutes: ${{ github.event.inputs.no_cache == 'true' && 300 || 350 }}

      - name: 9. 卸载虚拟文件系统
        if: always()
        run: |
          sudo umount -l "${{ env.CHROOT_DIR }}/dev/pts" || true
          sudo umount -l "${{ env.CHROOT_DIR }}/dev" || true
          sudo umount -l "${{ env.CHROOT_DIR }}/proc" || true
          sudo umount -l "${{ env.CHROOT_DIR }}/sys" || true

      - name: 10. [安全/极速] 创建双备份到 B2 并清理旧版本
        # 仅在成功、非取消、需要备份且非无缓存模式下运行
        if: success() && !cancelled() && github.event.inputs.create_backup_on_finish == 'true' && github.event.inputs.no_cache == 'false'
        run: |
          echo "--- 准备创建备份 ---"
          sudo chroot ${{ env.CHROOT_DIR }} bash -c 'command -v pm2 && pm2 stop all' || true
          pm2 stop python-app || true
          rclone config create ${{ env.B2_REMOTE_NAME }} b2 account "${B2_ACCOUNT_ID}" key "${B2_ACCOUNT_KEY}"
          
          TIMESTAMP=$(date -u +'%Y%m%d-%H%M%S')
          NEW_BACKUP_FILE="${{ env.BACKUP_PREFIX }}${TIMESTAMP}.tar.zst"
          REMOTE_ROOT="${{ env.B2_REMOTE_NAME }}:${B2_BUCKET_NAME}"
          echo "新备份文件名: ${NEW_BACKUP_FILE}"

          EXCLUDE_OPTS="--exclude='./tmp' --exclude='./var/tmp' --exclude='./root/.cache' --exclude='./var/cache' --exclude='./var/log'"
          
          echo "--- 1. 使用 zstd 创建并上传到 B2 根目录 ---"
          sudo tar -c ${EXCLUDE_OPTS} -f - -C ${{ env.CHROOT_DIR }} . | zstd -T0 -15 -c | rclone rcat "${REMOTE_ROOT}/${NEW_BACKUP_FILE}" ${{ env.RCLONE_FLAGS }}
          echo "✅ 主备份上传成功。"

          echo "--- 2. 使用 B2 Server-Side-Copy 复制到 /${{ env.B2_BACKUP_DIR }} 目录 ---"
          rclone copy "${REMOTE_ROOT}/${NEW_BACKUP_FILE}" "${REMOTE_ROOT}/${{ env.B2_BACKUP_DIR }}/" ${{ env.RCLONE_FLAGS }}
          echo "✅ 第二份备份已同步。"

          # --- [安全移除] 不再打印任何可能包含敏感信息的下载链接 ---
          echo "✅ 备份文件已上传至 Backblaze B2 的根目录和 /${{ env.B2_BACKUP_DIR }} 目录。"

          echo "--- 3. 清理 B2 上的旧备份 (各保留${{ env.BACKUP_RETENTION_COUNT }}个最新) ---"
          for a_dir in "" "${{ env.B2_BACKUP_DIR }}/"; do
            FILES_TO_DELETE=$(rclone lsjson "${REMOTE_ROOT}/${a_dir}" | jq -r '[.[] | select(.Name | test("${{ env.BACKUP_PREFIX }}.*"))] | sort_by(.ModTime) | .[:-${{ env.BACKUP_RETENTION_COUNT }}][] | .Name')
            if [[ -n "$FILES_TO_DELETE" ]]; then
              echo "在 /${a_dir} 中清理旧备份: $FILES_TO_DELETE"
              echo "$FILES_TO_DELETE" | xargs -I {} rclone deletefile "${REMOTE_ROOT}/${a_dir}{}"
            else
              echo "在 /${a_dir} 中无需清理旧备份。"
            fi
          done

      - name: 11. 清理运行器残留文件
        if: always()
        run: |
          echo "--- 开始清理运行器环境 ---"
          sudo rm -rf ${{ env.CHROOT_DIR }}
          if [[ -d "${{ env.PYTHON_APP_REPO_DIR }}" ]]; then rm -rf ${{ env.PYTHON_APP_REPO_DIR }}; fi
          npm cache clean --force || true
          pip cache purge || true
          echo "✅ 运行器清理完成。"```