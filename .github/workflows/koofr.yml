# 工作流名称
name: CI with Persistent Chroot Environment (Enhanced)

# 工作流触发器：手动触发 (workflow_dispatch)
on:
  workflow_dispatch:
    inputs:
      use_cache:
        description: '是否启用恢复缓存 (Restore from backup?)'
        required: true
        type: boolean
        default: true
      run_startup_script:
        description: '是否自动执行启动脚本 (Auto-run startup script?)'
        required: true
        type: boolean
        default: true
      enable_ssh:
        description: '是否启用SSH手动调试 (Enable SSH for manual debug?)'
        required: true
        type: boolean
        default: false

# 全局环境变量
env:
  CHROOT_DIR: /mnt/minisys
  BACKUP_FILE: minisys_backup.tar.gz
  WEBDAV_REMOTE_PATH: "backup"
  B2_REMOTE_NAME: b2
  B2_BUCKET_NAME: ${{ secrets.B2_BUCKET_NAME }}
  B2_BACKUP_DIR: backup
  BACKUP_PREFIX: minisys_backup_
  BACKUP_RETENTION_COUNT: 2
  RUN_DURATION_MINUTES: 300
  LOOPHOLE_WEBDAV_USER: ${{ secrets.LOOPHOLE_WEBDAV_USER }}
  LOOPHOLE_WEBDAV_PASS: ${{ secrets.LOOPHOLE_WEBDAV_PASS }}
  LOOPHOLE_WEBDAV_HOSTNAME: ${{ secrets.LOOPHOLE_WEBDAV_HOSTNAME }}
  LOOPHOLE_NAPCAT_HOSTNAME: ${{ secrets.LOOPHOLE_NAPCAT_HOSTNAME }}

# 作业定义
jobs:
  build-and-debug:
    # 运行环境
    runs-on: ubuntu-latest

    # 作业步骤
    steps:
      - name: 1. 最大化运行器磁盘空间 (Maximize runner disk space)
        run: |
          echo "清理前，初始磁盘空间："
          df -h /
          echo "开始清理预装软件以释放空间..."
          sudo rm -rf /usr/share/dotnet /opt/ghc /usr/local/share/boost "$AGENT_TOOLSDIRECTORY"
          echo "✅ 清理完成，当前可用空间："
          df -h /

      - name: 2. 安装所需依赖 (Install dependencies)
        run: |
          echo "正在安装 debootstrap, rclone, pigz 和 b2cli (用于多线程压缩和 B2 CLI)..."
          sudo apt-get update
          sudo apt-get install -y debootstrap rclone pigz
          pip install --upgrade b2
          echo "✅ 依赖安装完毕。"

      - name: 3. 恢复备份或创建新系统 (Restore backup or create new system)
        id: restore_or_create
        env:
          WEBDAV_URL: ${{ secrets.WEBDAV_URL }}
          WEBDAV_USER: ${{ secrets.WEBDAV_USER }}
          WEBDAV_PASS: ${{ secrets.WEBDAV_PASS }}
          B2_ACCOUNT_ID: ${{ secrets.B2_ACCOUNT_ID }}
          B2_ACCOUNT_KEY: ${{ secrets.B2_ACCOUNT_KEY }}
        run: |
          sudo mkdir -p ${{ env.CHROOT_DIR }}
          if [[ "${{ github.event.inputs.use_cache }}" == "true" ]]; then
            echo "🔎 用户选择启用缓存。正在配置 rclone 和 b2..."
            rclone config create webdav webdav url="${WEBDAV_URL}" vendor=other user="${WEBDAV_USER}" pass="${WEBDAV_PASS}"
            b2 account authorize "${B2_ACCOUNT_ID}" "${B2_ACCOUNT_KEY}"

            # 定义下载重试函数
            retry_download() {
              local max_attempts=3
              local attempt=1
              local cmd="$1"
              local output="$2"
              while [ $attempt -le $max_attempts ]; do
                echo "尝试第 $attempt 次执行: $cmd"
                if eval "$cmd"; then
                  echo "✅ 下载成功"
                  return 0
                else
                  echo "⚠️ 下载失败"
                  if [ $attempt -lt $max_attempts ]; then
                    sleep $((attempt * 5))
                  fi
                  ((attempt++))
                fi
              done
              echo "❌ 重试 $max_attempts 次后仍失败"
              return 1
            }

            # 首先尝试从 B2 下载备份
            if b2 ls "${B2_BUCKET_NAME}" "${B2_BACKUP_DIR}/${BACKUP_FILE}" > /dev/null 2>&1; then
              echo "✅ 发现 B2 备份，正在尝试下载并解压..."
              retry_download "b2 download-file-by-name '${B2_BUCKET_NAME}' '${B2_BACKUP_DIR}/${BACKUP_FILE}' - | pigz -dc | sudo tar -xpf - -C ${{ env.CHROOT_DIR }}" "B2"
              if [ $? -eq 0 ]; then
                echo "restored=true" >> $GITHUB_OUTPUT
              else
                echo "⚠️ B2 备份下载或解压失败，将尝试 WebDAV..."
              fi
            fi

            # 如果 B2 没有备份或下载失败，则尝试 WebDAV
            if [ "$(cat $GITHUB_OUTPUT | grep 'restored=true' | wc -l)" -eq 0 ]; then
              if rclone lsf webdav:${WEBDAV_REMOTE_PATH}/${BACKUP_FILE} > /dev/null 2>&1; then
                echo "✅ 发现 WebDAV 备份，正在尝试下载并解压..."
                retry_download "rclone cat webdav:${WEBDAV_REMOTE_PATH}/${BACKUP_FILE} | pigz -dc | sudo tar -xpf - -C ${{ env.CHROOT_DIR }}" "WebDAV"
                if [ $? -eq 0 ]; then
                  echo "restored=true" >> $GITHUB_OUTPUT
                  # 将 WebDAV 备份上传到 B2
                  echo "正在将 WebDAV 备份上传到 B2..."
                  rclone cat webdav:${WEBDAV_REMOTE_PATH}/${BACKUP_FILE} | b2 upload-file "${B2_BUCKET_NAME}" - "${B2_BACKUP_DIR}/${BACKUP_FILE}"
                else
                  echo "⚠️ WebDAV 备份下载或解压失败，将创建新系统..."
                  sudo debootstrap --variant=minbase jammy ${{ env.CHROOT_DIR }} http://archive.ubuntu.com/ubuntu/
                  echo "restored=false" >> $GITHUB_OUTPUT
                fi
              else
                echo "⚠️ 未发现 WebDAV 备份，将创建新系统..."
                sudo debootstrap --variant=minbase jammy ${{ env.CHROOT_DIR }} http://archive.ubuntu.com/ubuntu/
                echo "restored=false" >> $GITHUB_OUTPUT
              fi
            fi
          else
            echo "ℹ️ 用户选择不使用缓存。将创建全新系统..."
            sudo debootstrap --variant=minbase jammy ${{ env.CHROOT_DIR }} http://archive.ubuntu.com/ubuntu/
            echo "restored=false" >> $GITHUB_OUTPUT
          fi

      - name: 4. 挂载虚拟文件系统到 Chroot 环境 (Mount virtual filesystems)
        run: |
          echo "正在挂载虚拟文件系统..."
          MNT_DIR=${{ env.CHROOT_DIR }}
          sudo mount -t proc proc "${MNT_DIR}/proc"
          sudo mount -o bind /dev "${MNT_DIR}/dev"
          sudo mount -o bind /dev/pts "${MNT_DIR}/dev/pts"
          sudo mount -o bind /sys "${MNT_DIR}/sys"
          echo "✅ 虚拟文件系统已挂载。"

      - name: 5. 清理 Chroot 环境空间 (Clean chroot environment)
        run: |
          echo "🧹 开始清理 chroot 环境内的缓存和临时文件..."
          sudo chroot ${{ env.CHROOT_DIR }} /bin/bash -c " \
            echo '  -> 正在清理 apt 缓存...'; \
            apt-get clean -y > /dev/null 2>&1; \
            rm -rf /var/lib/apt/lists/*; \
            echo '  -> 正在清理临时文件...'; \
            rm -rf /tmp/* /var/tmp/*; \
            echo '  -> 正在清理 /root 目录下的缓存...'; \
            rm -rf /root/.cache; \
            echo '✅ Chroot 环境清理完成。'"

      - name: 6A. [自动化路径] 清理并启动服务 (Automated Path - Cleanup and Run Services)
        if: steps.restore_or_create.outputs.restored == 'true' && github.event.inputs.run_startup_script == 'true'
        run: |
          echo "✅ 进入自动化运行模式..."
          
          sudo tee ${{ env.CHROOT_DIR }}/tmp/startup.sh > /dev/null <<EOF
          #!/bin/bash
          export PATH=/usr/local/sbin:/usr/local/bin:/usr/sbin:/usr/bin:/sbin:/bin:/root/node_modules/.bin
          HOME_DIR="/root"

          echo "--- [Chroot 环境内] 开始执行自动化启动任务 ---"
          
          if ! command -v pm2 &> /dev/null; then
              echo "  -> PM2 未安装，将使用 npm 全局安装..."
              npm install -g pm2
          fi
          
          echo "1. 正在清理旧的日志文件..."
          pm2 flush
          find \${HOME_DIR} -name "*.log" -type f -delete
          echo "  -> 日志已清理。"

          echo "2. 正在尝试使用 PM2 启动 launcher.sh..."
          if [ -f "\${HOME_DIR}/launcher.sh" ]; then
              cd "\${HOME_DIR}"
              pm2 start ./launcher.sh --name "launcher" --output /dev/null --error /dev/null || pm2 restart "launcher"
          else
              echo "  -> 警告: \${HOME_DIR}/launcher.sh 未找到，跳过。"
          fi
          
          echo "3. 正在启动 Redis 服务器..."
          if command -v redis-server &> /dev/null; then
              redis-server --daemonize yes
          else
              echo "  -> 警告: redis-server 命令未找到，跳过。"
          fi
          
          echo "4. 正在尝试启动 Yunzai-Bot..."
          YUNZAI_DIR="\${HOME_DIR}/Yunzai"
          if [ -d "\${YUNZAI_DIR}" ]; then
              cd "\${YUNZAI_DIR}"
              pm2 start app.js --name "yunzai-app" || pm2 restart "yunzai-app"
          else
              echo "  -> 警告: 目录 \${YUNZAI_DIR} 未找到，跳过。"
          fi

          echo "5. 正在尝试启动 loophole 服务..."
          LOOPHOLE_APP="\${HOME_DIR}/loophole/loophole"
          if [ -f "\${LOOPHOLE_APP}" ]; then
              cd "\${HOME_DIR}/loophole"
              # 启动 loophole webdav
              pm2 start ./loophole --name "loophole-webdav" -- \
                webdav ~ -u "${{ env.LOOPHOLE_WEBDAV_USER }}" -p "${{ env.LOOPHOLE_WEBDAV_PASS }}" --hostname "${{ env.LOOPHOLE_WEBDAV_HOSTNAME }}"
              
              # 启动 loophole http
              pm2 start ./loophole --name "loophole-http" -- \
                http 6099 --hostname "${{ env.LOOPHOLE_NAPCAT_HOSTNAME }}"
          else
              echo "  -> 警告: \${LOOPHOLE_APP} 未找到，跳过。"
          fi

          echo "6. 正在尝试启动 openlist server..."
          OPENLIST_APP="\${HOME_DIR}/openlist"
          if [ -f "\${OPENLIST_APP}" ]; then
              echo "  -> 找到 \${OPENLIST_APP}，正在启动服务..."
              cd "\${HOME_DIR}"
              pm2 start ./openlist --name "openlist-server" -- server
          else
              echo "  -> 警告: \${OPENLIST_APP} 未找到，跳过。"
          fi

          echo "7. 正在尝试启动 ChmlFrp 服务..."
          FRPC_APP="\${HOME_DIR}/ChmlFrp/frpc"
          if [ -f "\${FRPC_APP}" ]; then
              echo "  -> 找到 \${FRPC_APP}，正在启动服务..."
              cd "\${HOME_DIR}/ChmlFrp"
              pm2 start ./frpc --name "chml-frp" -- -c frpc.ini
          else
              echo "  -> 警告: \${FRPC_APP} 未找到，跳过。"
          fi
          
          echo "--- [Chroot 环境内] 所有启动任务已派发，正在保存PM2进程列表 ---"
          pm2 save
          pm2 ls
          EOF

          echo "赋予启动脚本执行权限并执行..."
          sudo chmod +x ${{ env.CHROOT_DIR }}/tmp/startup.sh
          sudo chroot ${{ env.CHROOT_DIR }} /tmp/startup.sh

          echo "🚀 服务已启动，工作流将在此暂停 ${{ env.RUN_DURATION_MINUTES }} 分钟..."
          sleep $(( ${{ env.RUN_DURATION_MINUTES }} * 60 ))
          echo "⏳ 规定运行时间已到。"

      - name: 6B. [手动调试路径] 启用 Upterm SSH 会话 (Manual Path - Enable SSH Session)
        if: github.event.inputs.enable_ssh == 'true'
        uses: lhotari/action-upterm@v1
        with:
          limit-access-to-actor: true
          wait-timeout-minutes: 100

      - name: 7. 卸载 Chroot 环境的虚拟文件系统 (Unmount virtual filesystems)
        if: always()
        run: |
          echo "会话结束。为安全备份，正在卸载所有虚拟文件系统..."
          MNT_DIR=${{ env.CHROOT_DIR }}
          sudo umount -l "${MNT_DIR}/dev/pts" || true
          sudo umount -l "${MNT_DIR}/dev" || true
          sudo umount -l "${MNT_DIR}/proc" || true
          sudo umount -l "${MNT_DIR}/sys" || true
          echo "✅ 虚拟文件系统已全部卸载。"

      - name: 8. 备份系统环境到 Backblaze B2 (Backup environment to B2)
        if: ${{ !cancelled() }}
        env:
          B2_ACCOUNT_ID: ${{ secrets.B2_ACCOUNT_ID }}
          B2_ACCOUNT_KEY: ${{ secrets.B2_ACCOUNT_KEY }}
        run: |
          echo "开始使用 pigz 多线程流式打包并上传备份到 B2..."
          # 停止 chroot 环境中的所有 pm2 服务
          sudo chroot ${{ env.CHROOT_DIR }} bash -c 'command -v pm2 && pm2 stop all' || true
          
          b2 account authorize "${B2_ACCOUNT_ID}" "${B2_ACCOUNT_KEY}"
          sudo tar -cpf - -C ${{ env.CHROOT_DIR }} . | pigz -c | b2 upload-file "${B2_BUCKET_NAME}" - "${B2_BACKUP_DIR}/${BACKUP_FILE}"
          echo "✅ 备份流程执行完毕。"