# 工作流名称
name: Sync Backup from WebDAV to B2

# 工作流触发器：手动触发 (workflow_dispatch)，无需任何输入
on:
  workflow_dispatch:

# 全局环境变量
env:
  # --- WebDAV 源配置 ---
  WEBDAV_REMOTE_NAME: origin_webdav
  WEBDAV_URL: ${{ secrets.WEBDAV_URL }}
  WEBDAV_USER: ${{ secrets.WEBDAV_USER }}
  WEBDAV_PASS: ${{ secrets.WEBDAV_PASS }}
  WEBDAV_BACKUP_PATH: "backup" # WebDAV上的备份目录
  WEBDAV_BACKUP_FILENAME: "minisys_backup.tar.gz" # WebDAV上的备份文件名

  # --- Backblaze B2 目标配置 ---
  B2_REMOTE_NAME: destination_b2
  B2_BUCKET_NAME: ${{ secrets.B2_BUCKET_NAME }} # 从 Secrets 读取
  B2_ACCOUNT_ID: ${{ secrets.B2_ACCOUNT_ID }}
  B2_ACCOUNT_KEY: ${{ secrets.B2_ACCOUNT_KEY }}
  B2_DOWNLOAD_URL: ${{ secrets.B2_DOWNLOAD_URL }} # B2 的免费下载 URL

  # --- 备份管理配置 ---
  B2_BACKUP_DIR: backup # B2 存储桶内的目标目录
  BACKUP_PREFIX: minisys_backup_
  BACKUP_RETENTION_COUNT: 2 # 在 B2 上保留的备份数量

# 作业定义
jobs:
  transfer-backup-to-b2:
    # 运行环境
    runs-on: ubuntu-latest

    # 作业步骤
    steps:
      - name: 1. 安装 rclone
        run: |
          echo "正在安装 rclone..."
          sudo apt-get update
          sudo apt-get install -y rclone
          echo "✅ rclone 安装完毕。"

      - name: 2. 配置 rclone 远程存储
        run: |
          echo "正在配置 WebDAV 和 Backblaze B2 的 rclone 远程..."
          
          # 配置 WebDAV 源
          rclone config create ${{ env.WEBDAV_REMOTE_NAME }} webdav \
            url="${{ env.WEBDAV_URL }}" \
            vendor=other \
            user="${{ env.WEBDAV_USER }}" \
            pass="${{ env.WEBDAV_PASS }}"

          # 配置 Backblaze B2 目标 (使用正确的 download_url 参数)
          rclone config create ${{ env.B2_REMOTE_NAME }} b2 \
            account="${{ env.B2_ACCOUNT_ID }}" \
            key="${{ env.B2_ACCOUNT_KEY }}" \
            download_url="${{ env.B2_DOWNLOAD_URL }}"

          echo "✅ rclone 远程配置完成。"
          rclone listremotes

      - name: 3. 转移备份文件到 B2
        run: |
          WEBDAV_SOURCE_FILE="${{ env.WEBDAV_REMOTE_NAME }}:${{ env.WEBDAV_BACKUP_PATH }}/${{ env.WEBDAV_BACKUP_FILENAME }}"
          
          echo "🔎 正在检查源文件 ${WEBDAV_SOURCE_FILE} 是否存在..."
          if ! rclone size "${WEBDAV_SOURCE_FILE}" > /dev/null 2>&1; then
            echo "❌ 错误：在 WebDAV 源上未找到指定的备份文件！"
            exit 1
          fi

          TIMESTAMP=$(date -u +%Y%m%d_%H%M%S)
          B2_FILENAME="${{ env.BACKUP_PREFIX }}${TIMESTAMP}.tar.gz"
          B2_DESTINATION_FILE="${{ env.B2_REMOTE_NAME }}:${{ env.B2_BUCKET_NAME }}/${{ env.B2_BACKUP_DIR }}/${B2_FILENAME}"

          echo "🚀 准备就绪，正在从 WebDAV 流式传输文件到 Backblaze B2..."
          echo "   -> 源: ${WEBDAV_SOURCE_FILE}"
          echo "   -> 目标: ${B2_DESTINATION_FILE}"

          # 使用 rcat 流式传输，不占用本地磁盘空间
          rclone rcat "${WEBDAV_SOURCE_FILE}" "${B2_DESTINATION_FILE}" --progress
          
          echo "✅ 文件成功传输到 B2！"

      - name: 4. 清理 B2 上的旧备份
        # 仅在前一步成功时执行
        if: success()
        run: |
          B2_TARGET_DIR="${{ env.B2_REMOTE_NAME }}:${{ env.B2_BUCKET_NAME }}/${{ env.B2_BACKUP_DIR }}"
          RETENTION_COUNT=${{ env.BACKUP_RETENTION_COUNT }}
          
          echo "🧹 开始清理 Backblaze B2 上的旧备份 (${B2_TARGET_DIR})..."
          echo "    将保留最新的 ${RETENTION_COUNT} 个备份。"

          # 列出所有备份文件，按名称排序（时间戳保证了排序正确性），然后选取需要删除的旧文件
          FILES_TO_DELETE=$(rclone lsf --format "p" "${B2_TARGET_DIR}" | grep "${{ env.BACKUP_PREFIX }}" | sort | head -n -${RETENTION_COUNT})
          
          if [ -z "${FILES_TO_DELETE}" ]; then
            echo "ℹ️ 当前备份数量未超过限制，无需清理。"
          else
            echo "🗑️ 以下旧备份将被删除："
            echo "${FILES_TO_DELETE}"
            
            # 逐个删除旧文件
            echo "${FILES_TO_DELETE}" | while read file; do
              rclone delete "${B2_TARGET_DIR}/${file}" --rc-addr=localhost:0 -v
            done
            echo "✅ 旧备份清理完成。"
          fi

          echo "📊 当前 B2 上的备份列表："
          rclone lsf "${B2_TARGET_DIR}" | grep "${{ env.BACKUP_PREFIX }}"