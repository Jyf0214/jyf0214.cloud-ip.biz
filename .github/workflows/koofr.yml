# 工作流名称
name: CI with Persistent Chroot Environment (Backblaze B2)

# 工作流触发器：手动触发 (workflow_dispatch)
on:
  workflow_dispatch:
    inputs:
      use_cache:
        description: '是否启用恢复缓存 (Restore from backup?)'
        required: true
        type: boolean
        default: true
      run_startup_script:
        description: '是否自动执行启动脚本 (Auto-run startup script?)'
        required: true
        type: boolean
        default: true
      enable_ssh:
        description: '是否启用SSH手动调试 (Enable SSH for manual debug?)'
        required: true
        type: boolean
        default: false
      force_backup:
        description: '强制备份? (即使工作流失败或被取消也执行备份) (Force backup? Runs even if workflow fails or is cancelled)'
        required: true
        type: boolean
        default: false

# 全局环境变量
env:
  # --- Chroot & Runtime Config ---
  CHROOT_DIR: /mnt/minisys
  RUN_DURATION_MINUTES: 300

  # --- Backblaze B2 备份配置 ---
  B2_REMOTE_NAME: b2
  B2_BUCKET_NAME: ${{ secrets.B2_BUCKET_NAME }}
  B2_BACKUP_DIR: backup
  BACKUP_PREFIX: minisys_backup_
  BACKUP_RETENTION_COUNT: 2
  RCLONE_FLAGS: "--multi-thread-streams 4 --buffer-size 64M --fast-list --transfers 8 --progress"
  B2_ACCOUNT_ID: ${{ secrets.B2_ACCOUNT_ID }}
  B2_ACCOUNT_KEY: ${{ secrets.B2_ACCOUNT_KEY }}

  # --- In-Chroot App Secrets (e.g., Loophole) ---
  LOOPHOLE_WEBDAV_USER: ${{ secrets.LOOPHOLE_WEBDAV_USER }}
  LOOPHOLE_WEBDAV_PASS: ${{ secrets.LOOPHOLE_WEBDAV_PASS }}
  LOOPHOLE_WEBDAV_HOSTNAME: ${{ secrets.LOOPHOLE_WEBDAV_HOSTNAME }}
  LOOPHOLE_NAPCAT_HOSTNAME: ${{ secrets.LOOPHOLE_NAPCAT_HOSTNAME }}

# 作业定义
jobs:
  build-and-debug:
    # 运行环境
    runs-on: ubuntu-latest

    # 作业步骤
    steps:
      - name: 1. 最大化运行器磁盘空间 (Maximize runner disk space)
        run: |
          echo "清理前，初始磁盘空间："
          df -h /
          echo "开始清理预装软件以释放空间..."
          sudo rm -rf /usr/share/dotnet /opt/ghc /usr/local/share/boost "$AGENT_TOOLSDIRECTORY"
          echo "✅ 清理完成，当前可用空间："
          df -h /

      - name: 2. 安装所需依赖 (Install dependencies)
        run: |
          echo "正在安装 debootstrap, rclone 和 pigz (用于多线程压缩)..."
          sudo apt-get update
          sudo apt-get install -y debootstrap rclone pigz
          echo "✅ 依赖安装完毕。"

      - name: 3. 恢复备份或创建新系统 (Restore backup or create new system)
        id: restore_or_create
        run: |
          sudo mkdir -p ${{ env.CHROOT_DIR }}
          if [[ "${{ github.event.inputs.use_cache }}" == "true" ]]; then
            echo "🔎 用户选择启用缓存。正在配置 rclone (B2) 并检查备份..."
            rclone config create ${{ env.B2_REMOTE_NAME }} b2 account "${{ env.B2_ACCOUNT_ID }}" key "${{ env.B2_ACCOUNT_KEY }}"
            
            REMOTE_BASE_PATH="${{ env.B2_REMOTE_NAME }}:${{ env.B2_BUCKET_NAME }}/${{ env.B2_BACKUP_DIR }}"
            echo "正在查找最新的备份条目 (兼容 .tar 和 .tar.gz)..."
            # *** 兼容性修正：查找 .tar* 以同时匹配 .tar 和 .tar.gz ***
            LATEST_ENTRY=$(rclone lsf ${REMOTE_BASE_PATH} --include "${{ env.BACKUP_PREFIX }}*.tar*" | sort -r | head -n 1)
            
            if [ -n "$LATEST_ENTRY" ]; then
              ACTUAL_BACKUP_PATH=""
              BACKUP_BASENAME=""

              if [[ "$LATEST_ENTRY" == */ ]]; then
                BACKUP_BASENAME="${LATEST_ENTRY%/}"
                ACTUAL_BACKUP_PATH="${REMOTE_BASE_PATH}/${LATEST_ENTRY}${BACKUP_BASENAME}"
                echo "ℹ️ 发现旧版目录格式备份: ${LATEST_ENTRY}。将从内部恢复: ${ACTUAL_BACKUP_PATH}"
              else
                BACKUP_BASENAME="$LATEST_ENTRY"
                ACTUAL_BACKUP_PATH="${REMOTE_BASE_PATH}/${LATEST_ENTRY}"
                echo "ℹ️ 发现标准文件格式备份: ${LATEST_ENTRY}。"
              fi

              echo "✅ 准备恢复备份。正在使用自适应管道传输并解压 (自动处理 .gz 或 .tar)..."
              rclone cat "${ACTUAL_BACKUP_PATH}" ${{ env.RCLONE_FLAGS }} | { pigz -dc || cat; } | sudo tar -xpf - -C ${{ env.CHROOT_DIR }}
              
              if [ ! -d "${{ env.CHROOT_DIR }}/proc" ] || [ ! -d "${{ env.CHROOT_DIR }}/bin" ]; then
                echo "❌ 恢复校验失败！备份文件 '$BACKUP_BASENAME' 可能已损坏。"
                echo "  -> 正在从 B2 删除损坏的备份..."
                if [[ "$LATEST_ENTRY" == */ ]]; then
                    rclone purge "${REMOTE_BASE_PATH}/${LATEST_ENTRY}"
                else
                    rclone deletefile "${ACTUAL_BACKUP_PATH}"
                fi
                echo "  -> 自动转为创建新系统..."
                sudo rm -rf ${{ env.CHROOT_DIR }}/*
                sudo debootstrap --variant=minbase jammy ${{ env.CHROOT_DIR }} http://archive.ubuntu.com/ubuntu/
                echo "restored=false" >> $GITHUB_OUTPUT
              else
                echo "✅ 恢复校验成功，系统完整。"
                echo "restored=true" >> $GITHUB_OUTPUT
              fi
            else
              echo "⚠️ 未发现云端备份 (B2)。将自动转为创建新系统..."
              sudo debootstrap --variant=minbase jammy ${{ env.CHROOT_DIR }} http://archive.ubuntu.com/ubuntu/
              echo "restored=false" >> $GITHUB_OUTPUT
            fi
          else
            echo "ℹ️ 用户选择不使用缓存。将创建全新系统..."
            sudo debootstrap --variant=minbase jammy ${{ env.CHROOT_DIR }} http://archive.ubuntu.com/ubuntu/
            echo "restored=false" >> $GITHUB_OUTPUT
          fi

      - name: 4. 挂载虚拟文件系统到 Chroot 环境 (Mount virtual filesystems)
        run: |
          echo "正在挂载虚拟文件系统..."
          MNT_DIR=${{ env.CHROOT_DIR }}
          sudo mount -t proc proc "${MNT_DIR}/proc"
          sudo mount -o bind /dev "${MNT_DIR}/dev"
          sudo mount -o bind /dev/pts "${MNT_DIR}/dev/pts"
          sudo mount -o bind /sys "${MNT_DIR}/sys"
          echo "✅ 虚拟文件系统已挂载。"

      - name: 5. 清理 Chroot 环境空间 (Clean chroot environment)
        run: |
          echo "🧹 开始清理 chroot 环境内的缓存和临时文件..."
          sudo chroot ${{ env.CHROOT_DIR }} /bin/bash -c " \
            echo '  -> 正在清理 apt 缓存...'; \
            apt-get clean -y > /dev/null 2>&1; \
            rm -rf /var/lib/apt/lists/*; \
            echo '  -> 正在清理临时文件...'; \
            rm -rf /tmp/* /var/tmp/*; \
            echo '  -> 正在清理 /root 目录下的缓存...'; \
            rm -rf /root/.cache; \
            echo '✅ Chroot 环境清理完成。'"

      - name: 6A. [自动化路径] 清理并启动服务 (Automated Path - Cleanup and Run Services)
        if: steps.restore_or_create.outputs.restored == 'true' && github.event.inputs.run_startup_script == 'true'
        run: |
          # The content of startup script remains unchanged
          echo "✅ 进入自动化运行模式..."
          
          sudo tee ${{ env.CHROOT_DIR }}/tmp/startup.sh > /dev/null <<EOF
          #!/bin/bash
          export PATH=/usr/local/sbin:/usr/local/bin:/usr/sbin:/usr/bin:/sbin:/bin:/root/node_modules/.bin
          HOME_DIR="/root"
          echo "--- [Chroot 环境内] 开始执行自动化启动任务 ---"
          if ! command -v pm2 &> /dev/null; then
              echo "  -> PM2 未安装，将使用 npm 全局安装..."
              npm install -g pm2
          fi
          echo "1. 正在清理旧的日志文件..."
          pm2 flush
          find \${HOME_DIR} -name "*.log" -type f -delete
          echo "  -> 日志已清理。"
          echo "2. 正在尝试使用 PM2 启动 launcher.sh..."
          if [ -f "\${HOME_DIR}/launcher.sh" ]; then
              cd "\${HOME_DIR}"
              pm2 start ./launcher.sh --name "launcher" --output /dev/null --error /dev/null || pm2 restart "launcher"
          else
              echo "  -> 警告: \${HOME_DIR}/launcher.sh 未找到，跳过。"
          fi
          echo "3. 正在启动 Redis 服务器..."
          if command -v redis-server &> /dev/null; then
              redis-server --daemonize yes
          else
              echo "  -> 警告: redis-server 命令未找到，跳过。"
          fi
          echo "4. 正在尝试启动 Yunzai-Bot..."
          YUNZAI_DIR="\${HOME_DIR}/Yunzai"
          if [ -d "\${YUNZAI_DIR}" ]; then
              cd "\${YUNZAI_DIR}"
              pm2 start app.js --name "yunzai-app" || pm2 restart "yunzai-app"
          else
              echo "  -> 警告: 目录 \${YUNZAI_DIR} 未找到，跳过。"
          fi
          echo "5. 正在尝试启动 loophole 服务..."
          LOOPHOLE_APP="\${HOME_DIR}/loophole/loophole"
          if [ -f "\${LOOPHOLE_APP}" ]; then
              cd "\${HOME_DIR}/loophole"
              pm2 start ./loophole --name "loophole-webdav" -- \
                webdav ~ -u "${{ env.LOOPHOLE_WEBDAV_USER }}" -p "${{ env.LOOPHOLE_WEBDAV_PASS }}" --hostname "${{ env.LOOPHOLE_WEBDAV_HOSTNAME }}"
              pm2 start ./loophole --name "loophole-http" -- \
                http 6099 --hostname "${{ env.LOOPHOLE_NAPCAT_HOSTNAME }}"
          else
              echo "  -> 警告: \${LOOPHOLE_APP} 未找到，跳过。"
          fi
          echo "6. 正在尝试启动 openlist server..."
          OPENLIST_APP="\${HOME_DIR}/openlist"
          if [ -f "\${OPENLIST_APP}" ]; then
              echo "  -> 找到 \${OPENLIST_APP}，正在启动服务..."
              cd "\${HOME_DIR}"
              pm2 start ./openlist --name "openlist-server" -- server
          else
              echo "  -> 警告: \${OPENLIST_APP} 未找到，跳过。"
          fi
          echo "7. 正在尝试启动 ChmlFrp 服务..."
          FRPC_APP="\${HOME_DIR}/ChmlFrp/frpc"
          if [ -f "\${FRPC_APP}" ]; then
              echo "  -> 找到 \${FRPC_APP}，正在启动服务..."
              cd "\${HOME_DIR}/ChmlFrp"
              pm2 start ./frpc --name "chml-frp" -- -c frpc.ini
          else
              echo "  -> 警告: \${FRPC_APP} 未找到，跳过。"
          fi
          echo "--- [Chroot 环境内] 所有启动任务已派发，正在保存PM2进程列表 ---"
          pm2 save
          pm2 ls
          EOF
          echo "赋予启动脚本执行权限并执行..."
          sudo chmod +x ${{ env.CHROOT_DIR }}/tmp/startup.sh
          sudo chroot ${{ env.CHROOT_DIR }} /tmp/startup.sh
          echo "🚀 服务已启动，工作流将在此暂停 ${{ env.RUN_DURATION_MINUTES }} 分钟..."
          sleep $(( ${{ env.RUN_DURATION_MINUTES }} * 60 ))
          echo "⏳ 规定运行时间已到。"

      - name: 6B. [手动调试路径] 启用 Upterm SSH 会话 (Manual Path - Enable SSH Session)
        if: github.event.inputs.enable_ssh == 'true'
        uses: lhotari/action-upterm@v1
        with:
          limit-access-to-actor: true
          wait-timeout-minutes: 100

      - name: 7. 卸载 Chroot 环境的虚拟文件系统 (Unmount virtual filesystems)
        if: always()
        run: |
          echo "会话结束。为安全备份，正在卸载所有虚拟文件系统..."
          MNT_DIR=${{ env.CHROOT_DIR }}
          sudo umount -l "${MNT_DIR}/dev/pts" || true
          sudo umount -l "${MNT_DIR}/dev" || true
          sudo umount -l "${MNT_DIR}/proc" || true
          sudo umount -l "${MNT_DIR}/sys" || true
          echo "✅ 虚拟文件系统已全部卸载。"

      - name: 8. 备份系统环境到 Backblaze B2 (Backup environment to Backblaze B2)
        # 如果用户选择强制备份，则总是运行。否则，仅在工作流未被取消时运行。
        if: github.event.inputs.force_backup == true || !cancelled()
        run: |
          echo "开始打包并上传备份到 Backblaze B2..."
          sudo chroot ${{ env.CHROOT_DIR }} bash -c 'command -v pm2 && pm2 stop all' || true
          
          echo "正在计算 Chroot 目录大小以确定备份策略..."
          CHROOT_SIZE_BYTES=$(sudo du -sb ${{ env.CHROOT_DIR }} | awk '{print $1}')
          SIZE_THRESHOLD_BYTES=4294967296 # 4 GiB
          
          BACKUP_FILENAME=""
          LOCAL_BACKUP_FILE=""

          if [ "$CHROOT_SIZE_BYTES" -gt "$SIZE_THRESHOLD_BYTES" ]; then
            echo "✅ 目录大小 ($(printf "%.2f" $(echo "$CHROOT_SIZE_BYTES/1024/1024/1024" | bc -l)) GiB) 大于 4GiB。将执行强制、高可靠性压缩..."
            BACKUP_FILENAME="${{ env.BACKUP_PREFIX }}$(date +%Y%m%d_%H%M%S).tar.gz"
            LOCAL_BACKUP_FILE="/tmp/${BACKUP_FILENAME}"
            
            # 使用 set -o pipefail 确保管道中任何命令失败都会导致整个命令失败
            (set -o pipefail && sudo tar -cpf - -C ${{ env.CHROOT_DIR }} . | pigz -c > ${LOCAL_BACKUP_FILE})
            
            if [ $? -ne 0 ] || [ ! -s "${LOCAL_BACKUP_FILE}" ]; then
              echo "❌ 严重错误：压缩备份过程失败！无法继续备份。"
              exit 1
            fi
            echo "✅ 本地高强度压缩包创建成功。"
          else
            echo "✅ 目录大小 ($(printf "%.2f" $(echo "$CHROOT_SIZE_BYTES/1024/1024/1024" | bc -l)) GiB) 小于等于 4GiB。将执行快速、无压缩的 tar 打包..."
            BACKUP_FILENAME="${{ env.BACKUP_PREFIX }}$(date +%Y%m%d_%H%M%S).tar"
            LOCAL_BACKUP_FILE="/tmp/${BACKUP_FILENAME}"
            
            sudo tar -cpf ${LOCAL_BACKUP_FILE} -C ${{ env.CHROOT_DIR }} .
            if [ $? -ne 0 ] || [ ! -s "${LOCAL_BACKUP_FILE}" ]; then
              echo "❌ 严重错误：无压缩打包过程失败！无法继续备份。"
              exit 1
            fi
            echo "✅ 本地无压缩包创建成功。"
          fi

          rclone config create ${{ env.B2_REMOTE_NAME }} b2 account "${{ env.B2_ACCOUNT_ID }}" key "${{ env.B2_ACCOUNT_KEY }}"
          REMOTE_PATH="${{ env.B2_REMOTE_NAME }}:${{ env.B2_BUCKET_NAME }}/${{ env.B2_BACKUP_DIR }}"
          
          echo "正在上传备份文件: $BACKUP_FILENAME"
          rclone copyto ${LOCAL_BACKUP_FILE} ${REMOTE_PATH}/${BACKUP_FILENAME} ${{ env.RCLONE_FLAGS }}
          echo "✅ 备份上传成功。"
          rm -f ${LOCAL_BACKUP_FILE}

          echo "执行备份保留策略 (保留最新的 ${{ env.BACKUP_RETENTION_COUNT }} 个)..."
          # *** 兼容性修正：查找 .tar* 以同时匹配 .tar 和 .tar.gz ***
          BACKUPS_TO_DELETE=$(rclone lsf ${REMOTE_PATH} --include "${{ env.BACKUP_PREFIX }}*.tar*" | sort | head -n -${{ env.BACKUP_RETENTION_COUNT }})
          
          if [ -n "$BACKUPS_TO_DELETE" ]; then
            echo "🗑️ 发现以下旧备份将被清理:"
            echo "$BACKUPS_TO_DELETE"
            for backup in $BACKUPS_TO_DELETE; do
              # 兼容性处理：如果条目是目录，则用 purge 删除
              if [[ "$backup" == */ ]]; then
                echo "  -> 正在清理旧版目录 $backup ..."
                rclone purge ${REMOTE_PATH}/$backup
              else
                echo "  -> 正在删除文件 $backup ..."
                rclone deletefile ${REMOTE_PATH}/$backup
              fi
            done
            echo "✅ 旧备份清理完毕。"
          else
            echo "✅ 无需清理旧备份。"
          fi
          
          echo "✅ 备份流程执行完毕。"