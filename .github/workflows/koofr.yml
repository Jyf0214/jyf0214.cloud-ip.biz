# 工作流名称
name: CI with Persistent Chroot Environment (Backblaze B2)

# 工作流触发器：手动触发 (workflow_dispatch)
on:
  workflow_dispatch:
    inputs:
      use_cache:
        description: '是否启用恢复缓存 (Restore from backup?)'
        required: true
        type: boolean
        default: true
      run_startup_script:
        description: '是否自动执行启动脚本 (Auto-run startup script?)'
        required: true
        type: boolean
        default: true
      enable_ssh:
        description: '是否启用SSH手动调试 (Enable SSH for manual debug?)'
        required: true
        type: boolean
        default: false
      force_backup:
        description: '强制备份? (即使工作流失败或被取消也执行备份) (Force backup? Runs even if workflow fails or is cancelled)'
        required: true
        type: boolean
        default: false

# 全局环境变量
env:
  # --- Chroot & Runtime Config ---
  CHROOT_DIR: /mnt/minisys
  RUN_DURATION_MINUTES: 300

  # --- Backblaze B2 备份配置 ---
  B2_REMOTE_NAME: b2
  B2_BUCKET_NAME: ${{ secrets.B2_BUCKET_NAME }}
  B2_BACKUP_DIR: backup
  BACKUP_PREFIX: minisys_backup_
  BACKUP_RETENTION_COUNT: 2
  # *** 修正：修复了 --transfers-8 的语法错误 ***
  RCLONE_FLAGS: "--multi-thread-streams 4 --buffer-size 64M --fast-list --transfers 8 --progress"
  B2_ACCOUNT_ID: ${{ secrets.B2_ACCOUNT_ID }}
  B2_ACCOUNT_KEY: ${{ secrets.B2_ACCOUNT_KEY }}

  # --- In-Chroot App Secrets (e.g., Loophole) ---
  LOOPHOLE_WEBDAV_USER: ${{ secrets.LOOPHOLE_WEBDAV_USER }}
  LOOPHOLE_WEBDAV_PASS: ${{ secrets.LOOPHOLE_WEBDAV_PASS }}
  LOOPHOLE_WEBDAV_HOSTNAME: ${{ secrets.LOOPHOLE_WEBDAV_HOSTNAME }}
  LOOPHOLE_NAPCAT_HOSTNAME: ${{ secrets.LOOPHOLE_NAPCAT_HOSTNAME }}

# 作业定义
jobs:
  build-and-debug:
    # 运行环境
    runs-on: ubuntu-latest

    # 作业步骤
    steps:
      - name: 1. 最大化运行器磁盘空间 (Maximize runner disk space)
        run: |
          echo "清理前，初始磁盘空间："
          df -h /
          echo "开始清理预装软件以释放空间..."
          sudo rm -rf /usr/share/dotnet /opt/ghc /usr/local/share/boost "$AGENT_TOOLSDIRECTORY"
          echo "✅ 清理完成，当前可用空间："
          df -h /

      - name: 2. 安装所需依赖 (Install dependencies)
        run: |
          echo "正在安装 debootstrap, rclone, pigz..."
          sudo apt-get update
          sudo apt-get install -y debootstrap rclone pigz
          echo "✅ 依赖安装完毕。"

      - name: 3. 恢复备份或创建新系统 (Restore backup or create new system)
        id: restore_or_create
        run: |
          sudo mkdir -p ${{ env.CHROOT_DIR }}
          if [[ "${{ github.event.inputs.use_cache }}" == "true" ]]; then
            echo "🔎 用户选择启用缓存。正在配置 rclone (B2) 并检查备份..."
            rclone config create ${{ env.B2_REMOTE_NAME }} b2 account "${{ env.B2_ACCOUNT_ID }}" key "${{ env.B2_ACCOUNT_KEY }}"
            
            REMOTE_BASE_PATH="${{ env.B2_REMOTE_NAME }}:${{ env.B2_BUCKET_NAME }}/${{ env.B2_BACKUP_DIR }}"
            # 搜索时包含*以匹配文件和目录
            echo "正在查找最新的备份条目 (包括文件和目录)..."
            LATEST_ENTRY=$(rclone lsf ${REMOTE_BASE_PATH} --include "${{ env.BACKUP_PREFIX }}*" | sort -r | head -n 1)
            
            if [ -n "$LATEST_ENTRY" ]; then
              ACTUAL_BACKUP_PATH=""
              BACKUP_DISPLAY_NAME=""

              if [[ "$LATEST_ENTRY" == */ ]]; then
                echo "ℹ️ 发现旧版目录格式备份: ${LATEST_ENTRY}。正在探测其内部的实际备份文件..."
                ACTUAL_FILENAME=$(rclone lsf "${REMOTE_BASE_PATH}/${LATEST_ENTRY}" | head -n 1)
                if [ -z "$ACTUAL_FILENAME" ]; then
                  echo "❌ 恢复失败：备份目录 '${LATEST_ENTRY}' 为空！将删除此空目录并创建新系统。"
                  rclone purge "${REMOTE_BASE_PATH}/${LATEST_ENTRY}"
                  LATEST_ENTRY="" 
                else
                  ACTUAL_BACKUP_PATH="${REMOTE_BASE_PATH}/${LATEST_ENTRY}${ACTUAL_FILENAME}"
                  BACKUP_DISPLAY_NAME="${LATEST_ENTRY}${ACTUAL_FILENAME}"
                  echo "✅ 成功定位到实际备份文件: ${ACTUAL_FILENAME}"
                fi
              else
                echo "ℹ️ 发现标准文件格式备份: ${LATEST_ENTRY}。"
                ACTUAL_BACKUP_PATH="${REMOTE_BASE_PATH}/${LATEST_ENTRY}"
                BACKUP_DISPLAY_NAME="$LATEST_ENTRY"
              fi

              if [ -n "$LATEST_ENTRY" ]; then
                LOCAL_RESTORE_FILE="/tmp/restore_backup.download"
                echo "✅ 准备恢复备份。正在将 '${BACKUP_DISPLAY_NAME}' 完整下载到本地..."
                rclone copyto "${ACTUAL_BACKUP_PATH}" ${LOCAL_RESTORE_FILE} ${{ env.RCLONE_FLAGS }}

                if [ ! -s "${LOCAL_RESTORE_FILE}" ]; then
                  echo "❌ 恢复失败：下载的备份文件为空或下载失败！可能是远程文件已损坏。"
                  LATEST_ENTRY=""
                else
                  echo "✅ 下载完成。正在从本地文件解压（兼容.tar和.tar.gz）..."
                  cat ${LOCAL_RESTORE_FILE} | { pigz -dc || cat; } | sudo tar -xpf - -C ${{ env.CHROOT_DIR }}
                  rm -f ${LOCAL_RESTORE_FILE}
                  
                  if [ ! -d "${{ env.CHROOT_DIR }}/proc" ] && [ ! -d "${{ env.CHROOT_DIR }}/bin" ]; then
                    echo "❌ 恢复校验失败！备份文件 '$BACKUP_DISPLAY_NAME' 可能已损坏。"
                    echo "  -> 正在从 B2 删除损坏的备份..."
                    if [[ "$LATEST_ENTRY" == */ ]]; then rclone purge "${REMOTE_BASE_PATH}/${LATEST_ENTRY}"; else rclone deletefile "${ACTUAL_BACKUP_PATH}"; fi
                    echo "  -> 自动转为创建新系统..."
                    sudo rm -rf ${{ env.CHROOT_DIR }}/*
                    sudo debootstrap --variant=minbase jammy ${{ env.CHROOT_DIR }} http://archive.ubuntu.com/ubuntu/
                    echo "restored=false" >> $GITHUB_OUTPUT
                  else
                    echo "✅ 恢复校验成功，系统完整。"
                    echo "restored=true" >> $GITHUB_OUTPUT
                  fi
                fi
              fi
            fi

            if [ -z "$LATEST_ENTRY" ]; then
              echo "⚠️ 未能成功恢复备份。将自动创建全新系统..."
              sudo debootstrap --variant=minbase jammy ${{ env.CHROOT_DIR }} http://archive.ubuntu.com/ubuntu/
              echo "restored=false" >> $GITHUB_OUTPUT
            fi
          else
            echo "ℹ️ 用户选择不使用缓存。将创建全新系统..."
            sudo debootstrap --variant=minbase jammy ${{ env.CHROOT_DIR }} http://archive.ubuntu.com/ubuntu/
            echo "restored=false" >> $GITHUB_OUTPUT
          fi

      - name: 4. 挂载虚拟文件系统到 Chroot 环境 (Mount virtual filesystems)
        run: |
          echo "正在挂载虚拟文件系统..."
          MNT_DIR=${{ env.CHROOT_DIR }}
          sudo mount -t proc proc "${MNT_DIR}/proc"
          sudo mount -o bind /dev "${MNT_DIR}/dev"
          sudo mount -o bind /dev/pts "${MNT_DIR}/dev/pts"
          sudo mount -o bind /sys "${MNT_DIR}/sys"
          echo "✅ 虚拟文件系统已挂载。"

      - name: 5. 清理 Chroot 环境空间 (Clean chroot environment)
        if: steps.restore_or_create.outputs.restored == 'true'
        run: |
          echo "🧹 开始清理 chroot 环境内的缓存和临时文件..."
          sudo chroot ${{ env.CHROOT_DIR }} /bin/bash -c " \
            echo '  -> 正在清理 apt 缓存...'; \
            apt-get clean -y > /dev/null 2>&1 || true; \
            rm -rf /var/lib/apt/lists/*; \
            echo '  -> 正在清理临时文件...'; \
            rm -rf /tmp/* /var/tmp/*; \
            echo '  -> 正在清理 /root 目录下的缓存...'; \
            rm -rf /root/.cache; \
            echo '✅ Chroot 环境清理完成。'"

      - name: 6A. [自动化路径] 启动服务 (Automated Path - Run Services)
        if: steps.restore_or_create.outputs.restored == 'true' && github.event.inputs.run_startup_script == 'true' && github.event.inputs.enable_ssh == 'false'
        run: |
          echo "🚀 自动化路径：准备在 chroot 环境中启动服务..."
          cat << EOF > ./inject_secrets.sh
          export LOOPHOLE_WEBDAV_USER='${{ env.LOOPHOLE_WEBDAV_USER }}'
          export LOOPHOLE_WEBDAV_PASS='${{ env.LOOPHOLE_WEBDAV_PASS }}'
          export LOOPHOLE_WEBDAV_HOSTNAME='${{ env.LOOPHOLE_WEBDAV_HOSTNAME }}'
          export LOOPHOLE_NAPCAT_HOSTNAME='${{ env.LOOPHOLE_NAPCAT_HOSTNAME }}'
          EOF
          sudo mv ./inject_secrets.sh ${{ env.CHROOT_DIR }}/root/inject_secrets.sh
          sudo chmod +x ${{ env.CHROOT_DIR }}/root/inject_secrets.sh

          sudo chroot ${{ env.CHROOT_DIR }} /bin/bash -c "source /root/inject_secrets.sh && /root/startup.sh" &

          echo "✅ 启动脚本已在后台执行。工作流将持续运行 ${{ env.RUN_DURATION_MINUTES }} 分钟..."
          sleep ${{ env.RUN_DURATION_MINUTES }}m

      - name: 6B. [手动调试路径] 启用 Upterm SSH 会话 (Manual Path - Enable SSH Session)
        if: github.event.inputs.enable_ssh == 'true'
        uses: lhotari/action-upterm@v1
        with:
          limit-access-to-actor: true
          wait-timeout-minutes: ${{ env.RUN_DURATION_MINUTES }}

      - name: 7. 卸载 Chroot 环境的虚拟文件系统 (Unmount virtual filesystems)
        if: always()
        run: |
          echo "会话结束。为安全备份，正在卸载所有虚拟文件系统..."
          MNT_DIR=${{ env.CHROOT_DIR }}
          sudo umount -l "${MNT_DIR}/dev/pts" || true
          sudo umount -l "${MNT_DIR}/dev" || true
          sudo umount -l "${MNT_DIR}/proc" || true
          sudo umount -l "${MNT_DIR}/sys" || true
          echo "✅ 虚拟文件系统已全部卸载。"

      - name: 8. 备份系统环境到 Backblaze B2 (Backup environment to Backblaze B2)
        if: github.event.inputs.force_backup == true || !cancelled()
        run: |
          echo "开始打包并上传备份到 Backblaze B2..."
          if [ ! -d "${{ env.CHROOT_DIR }}/bin" ]; then
            echo "❌ chroot环境无效或为空，跳过备份以防上传空文件。"
            exit 0
          fi
          
          echo "正在停止chroot内的服务（如pm2），以确保数据一致性..."
          sudo chroot ${{ env.CHROOT_DIR }} bash -c 'command -v pm2 && pm2 stop all' || true
          
          rclone config create ${{ env.B2_REMOTE_NAME }} b2 account "${{ env.B2_ACCOUNT_ID }}" key "${{ env.B2_ACCOUNT_KEY }}"
          
          BACKUP_FILENAME="${{ env.BACKUP_PREFIX }}$(date +%Y%m%d_%H%M%S).tar.gz"
          REMOTE_PATH="${{ env.B2_REMOTE_NAME }}:${{ env.B2_BUCKET_NAME }}/${{ env.B2_BACKUP_DIR }}"
          LOCAL_BACKUP_FILE="/tmp/${BACKUP_FILENAME}"

          echo "✅ 将统一使用 pigz 进行多线程压缩..."
          sudo tar -cpf - -C ${{ env.CHROOT_DIR }} . | pigz -c > ${LOCAL_BACKUP_FILE}

          if [ ! -s "${LOCAL_BACKUP_FILE}" ]; then
              echo "❌ 错误：本地备份文件创建失败或为空！中止备份。"
              exit 1
          fi
          echo "✅ 本地备份文件创建成功: ${LOCAL_BACKUP_FILE}"
          
          echo "正在上传备份文件: $BACKUP_FILENAME"
          rclone copyto ${LOCAL_BACKUP_FILE} ${REMOTE_PATH}/${BACKUP_FILENAME} ${{ env.RCLONE_FLAGS }}
          echo "✅ 备份上传成功。"
          sudo rm -f ${LOCAL_BACKUP_FILE}

          echo "执行备份保留策略 (保留最新的 ${{ env.BACKUP_RETENTION_COUNT }} 个)..."
          REMOTE_FULL_PATH="${REMOTE_PATH}/"
          BACKUPS_TO_DELETE=$(rclone lsf ${REMOTE_FULL_PATH} --include "${{ env.BACKUP_PREFIX }}*" | sort | head -n -${{ env.BACKUP_RETENTION_COUNT }})
          
          if [ -n "$BACKUPS_TO_DELETE" ]; then
            echo "🗑️ 发现以下旧备份将被清理:"
            echo "$BACKUPS_TO_DELETE"
            for backup_entry in $BACKUPS_TO_DELETE; do
              if [[ "$backup_entry" == */ ]]; then
                echo "  -> 正在删除旧版目录备份: $backup_entry ..."
                rclone purge "${REMOTE_FULL_PATH}${backup_entry}"
              else
                echo "  -> 正在删除旧版文件备份: $backup_entry ..."
                rclone deletefile "${REMOTE_FULL_PATH}${backup_entry}"
              fi
            done
            echo "✅ 旧备份清理完毕。"
          else
            echo "✅ 无需清理旧备份。"
          fi
          
          echo "✅ 备份流程执行完毕。"