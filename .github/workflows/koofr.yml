# 工作流名称
name: 'Migration: Sync WebDAV to B2'

# 工作流触发器
on:
  workflow_dispatch:
    inputs:
      dry_run:
        description: '🧪 是否启用演练模式 (Dry Run)? (只会显示将要传输的文件，不会实际操作)'
        required: true
        type: boolean
        default: true

# 全局环境变量
env:
  # Rclone 远程的内部名称 (可自定义)
  WEBDAV_REMOTE_NAME: "webdav_source"
  B2_REMOTE_NAME: "b2_destination"

  # 备份文件所在的目录 (假设两边都叫 'backup')
  REMOTE_PATH: "backup"

  # WebDAV Secrets
  WEBDAV_URL: ${{ secrets.WEBDAV_URL }}
  WEBDAV_USER: ${{ secrets.WEBDAV_USER }}
  WEBDAV_PASS: ${{ secrets.WEBDAV_PASS }}

  # B2 Secrets
  B2_KEY_ID: ${{ secrets.B2_KEY_ID }}
  B2_APPLICATION_KEY: ${{ secrets.B2_APPLICATION_KEY }}
  B2_BUCKET_NAME: ${{ secrets.B2_BUCKET_NAME }}
  
  # Rclone 通用传输参数
  RCLONE_FLAGS: "--multi-thread-streams 8 --buffer-size 64M --fast-list --transfers 16 --progress"

jobs:
  migrate-data:
    name: "Sync Data from WebDAV to B2"
    runs-on: ubuntu-latest
    
    steps:
      - name: 1. 安装 Rclone
        run: sudo apt-get update && sudo apt-get install -y rclone

      - name: 2. 配置 Rclone Remotes (WebDAV 和 B2)
        run: |
          echo "--- 开始配置 Rclone ---"
          
          # 配置 WebDAV 源
          echo "1. 配置 WebDAV 源: ${{ env.WEBDAV_REMOTE_NAME }}"
          rclone config create ${{ env.WEBDAV_REMOTE_NAME }} webdav \
            url "${{ env.WEBDAV_URL }}" \
            vendor "other" \
            user "${{ env.WEBDAV_USER }}" \
            pass "${{ env.WEBDAV_PASS }}"

          # 配置 B2 目标
          echo "2. 配置 B2 目标: ${{ env.B2_REMOTE_NAME }}"
          rclone config create ${{ env.B2_REMOTE_NAME }} b2 \
            account "${{ env.B2_KEY_ID }}" \
            key "${{ env.B2_APPLICATION_KEY }}"

          echo "✅ Rclone 配置完成。已设置两个远程。"
          rclone listremotes

      - name: 3. 执行数据同步
        run: |
          SOURCE="${{ env.WEBDAV_REMOTE_NAME }}:${{ env.REMOTE_PATH }}"
          DESTINATION="${{ env.B2_REMOTE_NAME }}:${{ env.B2_BUCKET_NAME }}/${{ env.REMOTE_PATH }}"
          
          echo "同步源: ${SOURCE}"
          echo "同步目标: ${DESTINATION}"
          
          # 根据输入参数决定是否为演练模式
          if [[ "${{ github.event.inputs.dry_run }}" == "true" ]]; then
            echo "--- 🧪 演练模式 (DRY RUN) ---"
            echo "以下文件将会被同步，但不会执行实际操作："
            rclone sync "${SOURCE}" "${DESTINATION}" --dry-run ${{ env.RCLONE_FLAGS }}
          else
            echo "--- 🚀 实时同步模式 (LIVE RUN) ---"
            echo "警告：现在将开始实际的文件传输！"
            rclone sync "${SOURCE}" "${DESTINATION}" ${{ env.RCLONE_FLAGS }}
            echo "✅ 同步操作执行完毕。"
          fi

      - name: 4. [可选] 验证同步结果
        if: github.event.inputs.dry_run == 'false' # 仅在真实同步后才验证
        run: |
          echo "--- 开始验证同步结果 ---"
          SOURCE="${{ env.WEBDAV_REMOTE_NAME }}:${{ env.REMOTE_PATH }}"
          DESTINATION="${{ env.B2_REMOTE_NAME }}:${{ env.B2_BUCKET_NAME }}/${{ env.REMOTE_PATH }}"
          
          # rclone check 会比较源和目标的文件，如果一致则成功退出
          rclone check "${SOURCE}" "${DESTINATION}" --one-way --progress
          echo "✅ 验证完成，两边文件一致！"